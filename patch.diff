From 791a102544ec5e2b83b0a94eb43f6473f16d2f29 Mon Sep 17 00:00:00 2001
From: aska <aska@cc.com>
Date: Sat, 2 Jul 2022 16:57:27 +0800
Subject: [PATCH] initail

---
 .gitignore                                    |   2 +
 README.md                                     | 104 +++
 composer.json                                 |  46 ++
 config/easy_suit.php                          |  28 +
 config/error_code.php                         |  41 ++
 config/sanctum.php                            |   8 +
 src/Annotations/AnnoLog.php                   |  76 +++
 src/Annotations/AnnoLogMiddleware.php         |  89 +++
 src/Auth/Authenticate.php                     |  31 +
 src/Auth/CacheEloquentUserProvider.php        | 195 ++++++
 src/Auth/readme.md                            |  93 +++
 src/Console/Base/BaseGeneratorCommand.php     | 109 +++
 src/Console/Commands/DataSeed.php             |  82 +++
 src/Console/Commands/GenContextCommand.php    |  39 ++
 src/Console/Commands/GenCtrlCommand.php       |  66 ++
 src/Console/Commands/GenEntityCommand.php     |  49 ++
 src/Console/Commands/GenEventCommand.php      |  39 ++
 src/Console/Commands/GenListenerCommand.php   |  39 ++
 src/Console/Commands/GenLogicCommand.php      |  39 ++
 src/Console/Commands/GenMapperCommand.php     |  39 ++
 src/Console/Commands/GenModelCommand.php      |  39 ++
 src/Console/Commands/GenParamCommand.php      |  39 ++
 src/Console/Commands/GenRequestCommand.php    |  53 ++
 src/Console/Commands/GenServiceCommand.php    |  49 ++
 src/Console/Commands/PostmanClear.php         |  31 +
 src/Console/Commands/PostmanRevert.php        |  84 +++
 src/Console/Commands/PostmanSync.php          | 621 ++++++++++++++++++
 src/Console/Commands/RouteToPermission.php    |  86 +++
 src/Console/Commands/UnitTest.php             | 107 +++
 src/Console/Commands/stubs/comment.stub       |   5 +
 src/Console/Commands/stubs/ctrl.stub          |  20 +
 src/Console/Commands/stubs/ctx.stub           |  13 +
 src/Console/Commands/stubs/entity.stub        |  12 +
 src/Console/Commands/stubs/event.stub         |  36 +
 src/Console/Commands/stubs/func.stub          |  15 +
 src/Console/Commands/stubs/listener.stub      |  31 +
 src/Console/Commands/stubs/logic.stub         |  10 +
 src/Console/Commands/stubs/logic_func.stub    |  11 +
 src/Console/Commands/stubs/mapper.stub        |  30 +
 src/Console/Commands/stubs/model.stub         |  11 +
 src/Console/Commands/stubs/param.stub         |  11 +
 src/Console/Commands/stubs/request.stub       |  19 +
 src/Console/Commands/stubs/service.stub       |  12 +
 src/Console/Traits/getNameInputTrait.php      |  43 ++
 src/Deployer.php                              |  83 +++
 src/Domain/Casts/Aws3CdnUrl.php               | 114 ++++
 src/Domain/Casts/CdnUrl.php                   | 144 ++++
 src/Domain/Casts/HighRate.php                 |  46 ++
 src/Domain/Casts/Ip.php                       |  43 ++
 src/Domain/Casts/OssImgProcess.php            |  59 ++
 src/Domain/Casts/Percent.php                  |  46 ++
 src/Domain/Casts/RedisBitMap.php              |  44 ++
 src/Domain/Casts/Secret.php                   |  42 ++
 src/Domain/Core/AuthModel.php                 |  37 ++
 src/Domain/Core/DomainContext.php             |  99 +++
 src/Domain/Core/DomainEntity.php              |  40 ++
 src/Domain/Core/DomainParam.php               | 169 +++++
 src/Domain/Core/DomainService.php             |  64 ++
 src/Domain/Core/JwtModel.php                  |  39 ++
 src/Domain/Core/Model.php                     |  56 ++
 src/Domain/Core/ModelView.php                 |  19 +
 src/Domain/Core/Pivot.php                     |  43 ++
 src/Domain/Core/UUIDModel.php                 |  32 +
 src/Domain/Traits/Appendable/GenderText.php   |  45 ++
 src/Domain/Traits/Appendable/StatusText.php   |  43 ++
 src/Domain/Traits/Appendable/TypeText.php     |  45 ++
 src/Domain/Traits/Common/ModelUUID.php        |  30 +
 .../Traits/DomainMgr/DomainManageable.php     | 132 ++++
 src/Domain/Traits/Locational/Locational.php   |  22 +
 .../Traits/Locational/LocationalScope.php     | 110 ++++
 src/Domain/Traits/MobileMask/MobileMask.php   |  31 +
 .../Traits/MobileMask/MobileMaskScope.php     |  53 ++
 src/Domain/Traits/Sortable/AutoSortable.php   |  21 +
 .../Traits/Sortable/AutoSortableScope.php     |  66 ++
 src/Domain/Traits/Sortable/Sortable.php       | 172 +++++
 src/Domain/Traits/Sortable/SortableScope.php  | 114 ++++
 .../UnlimitedAgentScope.php                   |  48 ++
 .../UnlimitedAgentable/UnlimitedAgentable.php | 181 +++++
 .../EloquentExtensionProvider.php             | 204 ++++++
 .../SlimLengthAwarePaginator.php              |  26 +
 src/ErrorCode/ErrorCode.php                   |  42 ++
 src/ErrorCode/ErrorCodeProvider.php           |  63 ++
 src/ErrorCode/Facade.php                      |  20 +
 src/Exceptions/Exception.php                  |  20 +
 src/Exceptions/Handler.php                    |  85 +++
 src/Http/Middleware/ApiLocale.php             |  47 ++
 src/Http/Middleware/ApiSignature.php          |  56 ++
 src/Http/Middleware/GlobalResponse.php        | 130 ++++
 src/Http/Requests/BaseRequest.php             | 125 ++++
 .../ResponseMappers/BaseResponseMapper.php    | 200 ++++++
 src/Jwt/AutoRefreshJwtAuth.php                | 113 ++++
 src/Jwt/JwtAuthencicateProvider.php           |  26 +
 src/MeiliSearch/Factory/RequestFactory.php    |  24 +
 .../MeiliSearchServiceProvider.php            |  22 +
 src/MeiliSearch/readme.md                     |  22 +
 src/Request/RequestExtension.php              | 208 ++++++
 src/Request/RequestExtensionProvider.php      |  83 +++
 .../Listeners/TokenAuthenticatedListener.php  |  24 +
 .../Middleware/TokenRefreshAuthenticate.php   |  99 +++
 .../SanctumExtensionProvider.php              |  44 ++
 src/SanctumExtension/readme.md                |  49 ++
 src/ServiceProvider.php                       | 157 +++++
 src/Services/PostmanClient.php                |  60 ++
 src/Validators/IdCardValidator.php            | 143 ++++
 src/Validators/MbMaxValidator.php             |  24 +
 src/Validators/MobileValidator.php            |  25 +
 src/Validators/Validator.php                  |  34 +
 src/Validators/ValidatorExtension.php         |  26 +
 src/Validators/ValidatorServiceProvider.php   |  33 +
 src/helpers.php                               | 270 ++++++++
 110 files changed, 7438 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 README.md
 create mode 100644 composer.json
 create mode 100644 config/easy_suit.php
 create mode 100644 config/error_code.php
 create mode 100644 config/sanctum.php
 create mode 100644 src/Annotations/AnnoLog.php
 create mode 100644 src/Annotations/AnnoLogMiddleware.php
 create mode 100644 src/Auth/Authenticate.php
 create mode 100644 src/Auth/CacheEloquentUserProvider.php
 create mode 100644 src/Auth/readme.md
 create mode 100644 src/Console/Base/BaseGeneratorCommand.php
 create mode 100644 src/Console/Commands/DataSeed.php
 create mode 100644 src/Console/Commands/GenContextCommand.php
 create mode 100644 src/Console/Commands/GenCtrlCommand.php
 create mode 100644 src/Console/Commands/GenEntityCommand.php
 create mode 100644 src/Console/Commands/GenEventCommand.php
 create mode 100644 src/Console/Commands/GenListenerCommand.php
 create mode 100644 src/Console/Commands/GenLogicCommand.php
 create mode 100644 src/Console/Commands/GenMapperCommand.php
 create mode 100644 src/Console/Commands/GenModelCommand.php
 create mode 100644 src/Console/Commands/GenParamCommand.php
 create mode 100644 src/Console/Commands/GenRequestCommand.php
 create mode 100644 src/Console/Commands/GenServiceCommand.php
 create mode 100644 src/Console/Commands/PostmanClear.php
 create mode 100644 src/Console/Commands/PostmanRevert.php
 create mode 100644 src/Console/Commands/PostmanSync.php
 create mode 100644 src/Console/Commands/RouteToPermission.php
 create mode 100644 src/Console/Commands/UnitTest.php
 create mode 100644 src/Console/Commands/stubs/comment.stub
 create mode 100644 src/Console/Commands/stubs/ctrl.stub
 create mode 100644 src/Console/Commands/stubs/ctx.stub
 create mode 100644 src/Console/Commands/stubs/entity.stub
 create mode 100644 src/Console/Commands/stubs/event.stub
 create mode 100644 src/Console/Commands/stubs/func.stub
 create mode 100644 src/Console/Commands/stubs/listener.stub
 create mode 100644 src/Console/Commands/stubs/logic.stub
 create mode 100644 src/Console/Commands/stubs/logic_func.stub
 create mode 100644 src/Console/Commands/stubs/mapper.stub
 create mode 100644 src/Console/Commands/stubs/model.stub
 create mode 100644 src/Console/Commands/stubs/param.stub
 create mode 100644 src/Console/Commands/stubs/request.stub
 create mode 100644 src/Console/Commands/stubs/service.stub
 create mode 100644 src/Console/Traits/getNameInputTrait.php
 create mode 100644 src/Deployer.php
 create mode 100644 src/Domain/Casts/Aws3CdnUrl.php
 create mode 100644 src/Domain/Casts/CdnUrl.php
 create mode 100644 src/Domain/Casts/HighRate.php
 create mode 100644 src/Domain/Casts/Ip.php
 create mode 100644 src/Domain/Casts/OssImgProcess.php
 create mode 100644 src/Domain/Casts/Percent.php
 create mode 100644 src/Domain/Casts/RedisBitMap.php
 create mode 100644 src/Domain/Casts/Secret.php
 create mode 100644 src/Domain/Core/AuthModel.php
 create mode 100644 src/Domain/Core/DomainContext.php
 create mode 100644 src/Domain/Core/DomainEntity.php
 create mode 100644 src/Domain/Core/DomainParam.php
 create mode 100644 src/Domain/Core/DomainService.php
 create mode 100644 src/Domain/Core/JwtModel.php
 create mode 100644 src/Domain/Core/Model.php
 create mode 100644 src/Domain/Core/ModelView.php
 create mode 100644 src/Domain/Core/Pivot.php
 create mode 100644 src/Domain/Core/UUIDModel.php
 create mode 100644 src/Domain/Traits/Appendable/GenderText.php
 create mode 100644 src/Domain/Traits/Appendable/StatusText.php
 create mode 100644 src/Domain/Traits/Appendable/TypeText.php
 create mode 100644 src/Domain/Traits/Common/ModelUUID.php
 create mode 100644 src/Domain/Traits/DomainMgr/DomainManageable.php
 create mode 100644 src/Domain/Traits/Locational/Locational.php
 create mode 100644 src/Domain/Traits/Locational/LocationalScope.php
 create mode 100644 src/Domain/Traits/MobileMask/MobileMask.php
 create mode 100644 src/Domain/Traits/MobileMask/MobileMaskScope.php
 create mode 100644 src/Domain/Traits/Sortable/AutoSortable.php
 create mode 100644 src/Domain/Traits/Sortable/AutoSortableScope.php
 create mode 100644 src/Domain/Traits/Sortable/Sortable.php
 create mode 100644 src/Domain/Traits/Sortable/SortableScope.php
 create mode 100644 src/Domain/Traits/UnlimitedAgentable/UnlimitedAgentScope.php
 create mode 100644 src/Domain/Traits/UnlimitedAgentable/UnlimitedAgentable.php
 create mode 100644 src/EloquentExtension/EloquentExtensionProvider.php
 create mode 100644 src/EloquentExtension/SlimLengthAwarePaginator.php
 create mode 100644 src/ErrorCode/ErrorCode.php
 create mode 100644 src/ErrorCode/ErrorCodeProvider.php
 create mode 100644 src/ErrorCode/Facade.php
 create mode 100644 src/Exceptions/Exception.php
 create mode 100644 src/Exceptions/Handler.php
 create mode 100644 src/Http/Middleware/ApiLocale.php
 create mode 100644 src/Http/Middleware/ApiSignature.php
 create mode 100644 src/Http/Middleware/GlobalResponse.php
 create mode 100644 src/Http/Requests/BaseRequest.php
 create mode 100644 src/Http/ResponseMappers/BaseResponseMapper.php
 create mode 100644 src/Jwt/AutoRefreshJwtAuth.php
 create mode 100644 src/Jwt/JwtAuthencicateProvider.php
 create mode 100644 src/MeiliSearch/Factory/RequestFactory.php
 create mode 100644 src/MeiliSearch/MeiliSearchServiceProvider.php
 create mode 100644 src/MeiliSearch/readme.md
 create mode 100644 src/Request/RequestExtension.php
 create mode 100644 src/Request/RequestExtensionProvider.php
 create mode 100644 src/SanctumExtension/Listeners/TokenAuthenticatedListener.php
 create mode 100644 src/SanctumExtension/Middleware/TokenRefreshAuthenticate.php
 create mode 100644 src/SanctumExtension/SanctumExtensionProvider.php
 create mode 100644 src/SanctumExtension/readme.md
 create mode 100644 src/ServiceProvider.php
 create mode 100644 src/Services/PostmanClient.php
 create mode 100644 src/Validators/IdCardValidator.php
 create mode 100644 src/Validators/MbMaxValidator.php
 create mode 100644 src/Validators/MobileValidator.php
 create mode 100644 src/Validators/Validator.php
 create mode 100644 src/Validators/ValidatorExtension.php
 create mode 100644 src/Validators/ValidatorServiceProvider.php
 create mode 100644 src/helpers.php

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..dfd6caa
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+/vendor
+composer.lock
\ No newline at end of file
diff --git a/README.md b/README.md
new file mode 100644
index 0000000..a464227
--- /dev/null
+++ b/README.md
@@ -0,0 +1,104 @@
+# Laravel Easy Suit
+这是一个为了方便使用Laravel框架开发api而提供的简单封装套件。
+
+
+## 安装
+
+
+## Request封装
+
+BaseRequest继承于FormRequest，增加一个rule方法配置参数规则。
+
+
+### 定义Request对象
+
+```php
+use Zeaven\EasySuit\Http\Requests\BaseRequest;
+
+class LoginRequest extends BaseRequest
+{
+    /**
+     * 返回参数验证规则.
+     *
+     * @return array
+     */
+    protected function rule(): array
+    {
+        return [
+            // 用户名
+            'username' => ['rule' => 'required'],
+            // 密码
+            'password' => ['rule' => 'required|min:6']
+        ];
+    }
+}
+```
+
+Request对象提供两个方法获取参数：params和values，*注意：未配置的参数是无法通过这两个方法获取的*
+
+```php
+[$username, $password] = $request->params();
+// 或
+[$username] = $request->params(['username']);
+// 或
+[$password, $username] = $request->params(['password', 'username']);
+// 或
+$params = $request->params(false);
+// 等同
+$params = $request->values();
+// $params = ['username' => 'xxx', 'password' => 'xxx']
+```
+
+
+### Request对象参数配置
+
+rule方法返回参数的配置，完整配置字段如下：
+```php
+[
+    'username' => [
+        'rule' => 'required',
+        'default' => 'admin',
+        'type' => 'string',
+        'as' => 'login_name'
+    ],
+    'remember' => true, // 等同于 'remember' => ['default' => true]
+    'password'  // 等同于‘password’ => ['default' => null]
+]
+```
+
+> 1. rule 与Laravel的表单验证规则一致；
+> 2. default 默认值；
+> 3. type 参数类型，可选值有：int、float、bool、array(json)、date、ip、url、split(将字符串转以逗号分割成数组)；
+> 4. as 别名，使用values()方法返回的key值；
+
+
+## 全局返回统一格式
+
+在easy_suit.php配置文件中有如下默认配置:
+```php
+'global_response' => [
+    'fields' => [
+        'code' => 'code',
+        'data' => 'data',
+        'message' => 'msg',
+        'error' => false, // error只有在debug环境下有效
+    ],
+    'exclude' => [
+        'horizon/*',
+        'laravel-websockets/*',
+        'broadcasting/*',
+        '*/export/*',
+        '*/pusher/auth',
+        '*/pusher/auth',
+        'web/*',
+    ]
+],
+```
+
+> fields 指定返回的字段，以及字段名称，如果定义为false则不显示
+> exclude 可定义排除的路由
+
+
+## 错误码和异常抛出
+
+### 错误码
diff --git a/composer.json b/composer.json
new file mode 100644
index 0000000..c647adb
--- /dev/null
+++ b/composer.json
@@ -0,0 +1,46 @@
+{
+    "name": "zeaven/laravel-easy-suit",
+    "description": "easy setup package",
+    "type": "library",
+    "require": {
+        "php": ">=8.1",
+        "hidehalo/nanoid-php": "^1.1",
+        "tymon/jwt-auth": "dev-develop",
+        "meilisearch/meilisearch-php": "^0.23.2"
+    },
+    "license": "MIT",
+    "autoload": {
+        "psr-4": {
+            "Zeaven\\EasySuit\\": "src/"
+        },
+        "files": [
+            "src/helpers.php"
+        ]
+    },
+    "authors": [
+        {
+            "name": "zeaven",
+            "email": "zeaven@gmail.com"
+        }
+    ],
+    "minimum-stability": "dev",
+    "extra": {
+        "branch-alias": {
+            "dev-master": "1.0-dev"
+        },
+        "laravel": {
+            "providers": [
+                "Zeaven\\EasySuit\\ServiceProvider",
+                "Zeaven\\EasySuit\\ErrorCode\\ErrorCodeProvider",
+                "Zeaven\\EasySuit\\Request\\RequestExtensionProvider",
+                "Zeaven\\EasySuit\\EloquentExtension\\EloquentExtensionProvider",
+                "Zeaven\\EasySuit\\Validators\\ValidatorServiceProvider",
+                "Zeaven\\EasySuit\\SanctumExtension\\SanctumExtensionProvider",
+                "Zeaven\\EasySuit\\MeiliSearch\\MeiliSearchServiceProvider"
+            ],
+            "aliases": {
+                "ErrorCode": "Zeaven\\EasySuit\\ErrorCode\\Facade"
+            }
+        }
+    }
+}
diff --git a/config/easy_suit.php b/config/easy_suit.php
new file mode 100644
index 0000000..cc17775
--- /dev/null
+++ b/config/easy_suit.php
@@ -0,0 +1,28 @@
+<?php
+
+return [
+    'postman' => [
+        'token' => env('POSTMAN_API_TOKEN'),
+    ],
+    'anno_log' => [
+        'enable' => env('EASY_SUIT_ANNO_LOG', true),
+    ],
+    // 全局返回格式
+    'global_response' => [
+        'fields' => [
+            'code' => 'code',
+            'data' => 'data',
+            'message' => 'msg',
+            'error' => 'error'
+        ],
+        'exclude' => [
+            'horizon/*',
+            'laravel-websockets/*',
+            'broadcasting/*',
+            '*/export/*',
+            '*/pusher/auth',
+            '*/pusher/auth',
+            'web/*',
+        ]
+    ],
+];
diff --git a/config/error_code.php b/config/error_code.php
new file mode 100644
index 0000000..9ebec83
--- /dev/null
+++ b/config/error_code.php
@@ -0,0 +1,41 @@
+<?php
+
+/**
+ * 错误码定义样例，请不要在这里定义错误码！应在对应的语言包目录下创建error_code.php文件！
+ * 错误码以十六进制方式定义，如f00000:
+ * -- 第1位：项目 f全局、1~e自行分项目，如1ios、2android、3web、4小程序
+ * -- 第2-3位：模块 00全局、其他数字自行定义，如01登录、02订单、03钱包
+ * -- 第4-5位：错误码，如00~ff都可以使用
+ * -- 第6位：提示码，0忽略错误、1客户端弹窗提示、2客户端toast提示
+ * 出现error_code=0,则后台未知错误
+ *
+ * 比如定义ios端登录模块错误码： 101012 => '用户名错误'， 101022 => '用户密码错误'
+ */
+
+return [
+    '401'    => '未授权',
+    '500'    => '查询出错',
+    'f00002' => 'token已过期',
+    'f00012' => '用户不存在',
+    'f00022' => 'token无效',
+    'f00032' => '缺少登录信息',
+    'f00042' => '登录失败，请检账号或密码是否正确',
+    'f00052' => '登陆用户类型不存在！',
+    'f00212' => '验证码不正确',
+    'f00222' => '验证码已发送，请稍候',
+    'f00230' => '微信用户未绑定手机号',
+    'f00232' => '短信发送失败',
+    'f00242' => '用户手机号禁止登录',
+    'f00252' => '账号异常，请联系客服',
+    'f00262' => '手机号已绑定',
+    'f00102' => '邮箱已注册',
+    'f00112' => '用户名已注册',
+    'f00122' => '用户不存在',
+    'f00132' => '密码不一致',
+    'f00142' => '登录失败',
+    'f00152' => '找不到该数据',
+    'f00172' => '密码错误',
+    'f00182' => '原密码错误',
+    'f00192' => '注册用户失败，系统繁忙',
+    'f00402' => '只能添加一个收款账户',
+];
diff --git a/config/sanctum.php b/config/sanctum.php
new file mode 100644
index 0000000..d2d25a2
--- /dev/null
+++ b/config/sanctum.php
@@ -0,0 +1,8 @@
+<?php
+
+return [
+    'expiration' => 20160,  // 两周过期时间
+    'refresh_ttl' => 60,    // 一个小时刷新一次token
+    'refresh_grace_ttl' => 5, // 刷新token的灰色时间，防止同一token并发多个请求刷新多次
+    'remove_refresh_expire_token' => true,  // 是否移除刷新后的token
+];
diff --git a/src/Annotations/AnnoLog.php b/src/Annotations/AnnoLog.php
new file mode 100644
index 0000000..14b641b
--- /dev/null
+++ b/src/Annotations/AnnoLog.php
@@ -0,0 +1,76 @@
+<?php
+
+namespace Zeaven\EasySuit\Annotations;
+
+// use Doctrine\Common\Annotations\AnnotationReader;
+use ReflectionMethod;
+use Arr;
+use Attribute;
+use Str;
+
+/**
+ * 用户日志注解
+ *
+ * @date    2020-06-30 10:33:33
+ * @version $Id$
+ * @Annotation
+ * @Target({"METHOD"})
+ */
+#[Attribute(Attribute::TARGET_METHOD)]
+class AnnoLog
+{
+    /**
+     * @Required()
+     * 1管理员，2投资者用户，3居间商，4系统生成
+     * @var int
+     */
+    // private int $type;
+    /**
+     * @Required()
+     *
+     * @var string
+     */
+    // private string $tpl;
+
+    public function __construct(private int $type, private string $tpl)
+    {
+    }
+
+    public function toArray()
+    {
+        $user = [];
+        if (auth()->user()) {
+            $user = auth()->user()->toArray();
+        }
+        $variables = request()->attributes->get('$anno_log', []) + $user;
+        $log = Str::replaceMatch($this->tpl, $variables);
+        return [
+            'type' => $this->type,
+            'log' => $log,
+        ];
+    }
+
+    public static function data($key, $value = null)
+    {
+        if (!is_array($key)) {
+            $key = [$key => $value];
+        }
+        $data = request()->attributes->get('$anno_log', []);
+        $data = array_merge($data, $key);
+        request()->attributes->set('$anno_log', $data);
+    }
+
+    public static function annotation(string $action)
+    {
+        [$ctrl, $method] = explode('@', $action);
+        $rm = new ReflectionMethod($ctrl, $method);
+        // $reader = new AnnotationReader();
+
+        // $annotation = $reader->getMethodAnnotation($rm, self::class);
+        $attrs = $rm->getAttributes(self::class);
+
+        if (count($attrs)) {
+            return $attrs[0]->newInstance()->toArray();
+        }
+    }
+}
diff --git a/src/Annotations/AnnoLogMiddleware.php b/src/Annotations/AnnoLogMiddleware.php
new file mode 100644
index 0000000..df9d14d
--- /dev/null
+++ b/src/Annotations/AnnoLogMiddleware.php
@@ -0,0 +1,89 @@
+<?php
+
+namespace Zeaven\EasySuit\Annotations;
+
+use App;
+use Zeaven\EasySuit\Annotations\AnnoLog;
+use Arr;
+use Browser;
+use Closure;
+use Illuminate\Http\JsonResponse;
+use Illuminate\Http\Response;
+use Symfony\Component\HttpFoundation\BinaryFileResponse;
+use Symfony\Component\HttpFoundation\StreamedResponse;
+
+class AnnoLogMiddleware
+{
+    public function handle($request, Closure $next)
+    {
+        return $next($request);
+    }
+
+    public function terminate($request, $response)
+    {
+        if (
+            config('easy_suit.anno_log.enable') !== true
+            || $response instanceof StreamedResponse
+            || $response instanceof BinaryFileResponse
+            || App::runningInConsole()
+        ) {
+            return;
+        }
+        $route = request()->route();
+        $user = auth()->user() ?? [];
+
+        $data = [];
+        $data['status'] = $response instanceof Response ? $response->getStatusCode() : $response->status();
+        if (in_array($request->method(), ['GET', 'POST', 'PUT', 'DELETE'])) {
+            $data['user_id'] = $user['uid'] ?? '';
+            $data['controller'] = $route->getActionName();
+            $data['method'] = $request->method();
+            $data['url'] = str_replace($request->url(), $request->path(), $request->fullUrl());
+            $data['params'] = json_encode($request->all());
+            $data['time'] = date('Y-m-d H:i:s');
+            $data['ip'] = request()->ip;
+            $data['referrer'] = isset($_SERVER['HTTP_REFERER']) ? $_SERVER['HTTP_REFERER'] : $request->fullUrl();
+            $data['data'] = ($response instanceof JsonResponse) ? $response->getData(true) : $response->getContent();
+            if (is_string($data['data'])) {
+                $data['data'] = json_decode($data['data'], true);
+            }
+            $data['app_name'] = config('app.name', '');
+        }
+
+        // 处理
+        rescue(
+            function () use ($route, $data) {
+                $this->captureUserLog($route->getAction(), $data);
+            },
+            function ($e) use ($data) {
+                logs('daily')->info($e->getMessage(), [$e->getTraceAsString()]);
+            },
+            false
+        );
+    }
+
+    /**
+     * 记录用户日志
+     * @param User $user 用户对象
+     * @param array $data 日志数据
+     * @return [type]          [description]
+     */
+    private function captureUserLog($action, array $data)
+    {
+        $action = $action['uses'];
+        // 判断成功或失败
+        $annotation = AnnoLog::annotation($action);
+        if (empty($annotation)) {
+            return;
+        }
+        $log = Arr::pull($annotation, 'log');
+
+        // $success = intval($data['status']) === 200 && intval(Arr::get($data, 'data.code', 2)) === 0;
+        if (class_exists('Browser')) {
+            $browser = Browser::detect();
+            $data['device'] = $browser->platformName() . ', ' . $browser->deviceFamily();
+        }
+
+        logger($log, $annotation + $data);
+    }
+}
diff --git a/src/Auth/Authenticate.php b/src/Auth/Authenticate.php
new file mode 100644
index 0000000..c326084
--- /dev/null
+++ b/src/Auth/Authenticate.php
@@ -0,0 +1,31 @@
+<?php
+
+namespace Zeaven\EasySuit\Auth;
+
+use App\Http\Middleware\Authenticate as Middleware;
+use Closure;
+use Zeaven\EasySuit\Jwt\AutoRefreshJwtAuth;
+use Zeaven\EasySuit\SanctumExtension\Middleware\TokenRefreshAuthenticate;
+
+class Authenticate extends Middleware
+{
+    /**
+     * Handle an incoming request.
+     *
+     * @param  \Illuminate\Http\Request  $request
+     * @param  \Closure  $next
+     *
+     * @return mixed
+     */
+    public function handle($request, Closure $next, ...$guards)
+    {
+        if (count($guards)) {
+            if ($guards[0] === 'sanctum') {
+                return (new TokenRefreshAuthenticate($this->auth))->handle($request, $next, 'sanctum');
+            } else if ($guards[0] === 'jwt') {
+                return (new AutoRefreshJwtAuth($this->auth))->handle($request, $next, 'jwt');
+            }
+        }
+        return parent::handle($request, $next, ...$guards);
+    }
+}
diff --git a/src/Auth/CacheEloquentUserProvider.php b/src/Auth/CacheEloquentUserProvider.php
new file mode 100644
index 0000000..8c5c5c0
--- /dev/null
+++ b/src/Auth/CacheEloquentUserProvider.php
@@ -0,0 +1,195 @@
+<?php
+
+/**
+ * 自定义用户提供者
+ * 将缓存用户信息一小时，可减少请求查询用户表信息
+ * CustomEloquentUserProvider::refresh(uid) 将清除缓存信息
+ *
+ * @date    2019-08-13 19:41:48
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Auth;
+
+use Illuminate\Auth\EloquentUserProvider;
+use Illuminate\Contracts\Hashing\Hasher as HasherContract;
+
+/**
+ * 账号用户关系模型如：
+ * Account<---N:1-->User
+ * Account和User都有uid字段
+ * 登录时调用retrieveByCredentials查询Account，并且返回的是User
+ * 请求接口时通过uid调用retrieveById查询用户表
+ * 此时可从User表查询
+ * 这样auth()->user()获取的就是user表
+ */
+class CacheEloquentUserProvider extends EloquentUserProvider
+{
+    // 缓存Account账号信息时间
+    const CACHE_SECOND = 3600;
+
+    // 字段数组、账户模型
+    protected array $fields = [];
+    protected $authModel;
+
+    /**
+     * CustomEloquentUserProvider constructor.
+     * @param HasherContract $hasher
+     * @param $model
+     * @param $authModel
+     * @param array $fields
+     */
+    public function __construct(HasherContract $hasher, $model, $authModel, $fields = [])
+    {
+        // 父类的构造函数初始化从父类继承的成员数据
+        parent::__construct($hasher, $model);
+
+        // 初始化子类定义的成员数据
+        $this->fields = $fields;
+        $this->authModel = $authModel;
+    }
+
+    /**
+     * 缓存数据
+     * @param string $key 主键
+     * @param callable $callback 回调函数
+     * @return mixed
+     * @throws \Exception
+     */
+    private function cache(string $key, callable $callback)
+    {
+        return cache()->tags(['auth'])->remember(
+            class_basename(__CLASS__) . ':' . $key,
+            static::CACHE_SECOND,
+            $callback
+        );
+    }
+
+    /**
+     * 删除登录缓存
+     * @param string $key
+     * @return mixed
+     * @throws \Exception
+     */
+    public static function refresh(string $key)
+    {
+        return cache()->tags(['auth'])->forget(class_basename(__CLASS__) . ':' . $key);
+    }
+
+    /**
+     * 查找登录缓存
+     * @param string $key
+     * @return bool
+     * @throws \Exception
+     */
+    private function has(string $key): bool
+    {
+        return cache()->tags(['auth'])->has(class_basename(__CLASS__) . ':' . $key);
+    }
+
+    /**
+     * 通过主键获取用户信息
+     * @param mixed $identifier
+     * @return \Illuminate\Contracts\Auth\Authenticatable|\Illuminate\Database\Eloquent\Model|null
+     * @throws \Exception
+     */
+    public function retrieveById($identifier)
+    {
+        // 获取用户数据，先从缓存查，没有再去数据库查询
+        $user = $this->cache(
+            $identifier,
+            function () use ($identifier) {
+                $model = $this->createModel();
+                $user = $this->newModelQuery($model)
+                    ->where($model->getAuthIdentifierName(), $identifier)
+                    ->select($this->fields)
+                    ->first();
+
+                throw_empty($user, 0xf00012);
+                // throw_on($user->status === -1, 0xf00242);
+                // $user->setHidden(['gender_text', 'password']);
+                return $user->toArray();
+            }
+        );
+
+        // 使用用户数据创建用户实例
+        return $this->createCacheModel($user);
+    }
+
+    /**
+     * 使用传入的数据创建用户实例
+     * @param array $attributes
+     * @return \Illuminate\Database\Eloquent\Model
+     */
+    protected function createCacheModel(array $attributes)
+    {
+        $model = $this->createModel();
+        $model->fill($attributes);
+        $model->id = $attributes['id'];
+        $model->exists = true;
+
+        return $model;
+    }
+
+    /**
+     * 记住token
+     * @param mixed $identifier
+     * @param string $token
+     * @return \Illuminate\Contracts\Auth\Authenticatable|\Illuminate\Database\Eloquent\Model|null
+     * @throws \Exception
+     */
+    public function retrieveByToken($identifier, $token)
+    {
+        throw_e('暂不支持记住我的');
+        $user = $this->cache(
+            $identifier,
+            function () use ($identifier, $token) {
+                $acc = parent::retrieveByToken($identifier, $token);
+                $user = $acc->member()->select($this->fields)->first();
+                throw_empty($user, 0xf00012);
+                // throw_on($user->status === -1, 0xf00242);
+                // $user->setHidden(['gender_text', 'password']);
+                return $user->toArray();
+            }
+        );
+
+        return $this->createCacheModel($user);
+    }
+
+    /**
+     * @param array $credentials
+     * @return \Illuminate\Contracts\Auth\Authenticatable|\Illuminate\Database\Eloquent\Model|null
+     * @throws \Exception
+     */
+    public function retrieveByCredentials(array $credentials)
+    {
+        // 切换到验证模型，即Account表
+        $bak_model = $this->model;
+        $this->model = $this->authModel;
+        $model = throw_empty(parent::retrieveByCredentials($credentials), 0xf00012);
+
+        // 切换回来
+        $this->model = $bak_model;
+        $key = $this->createModel()->getAuthIdentifierName();
+        // 账户对应实体表(user, admin)
+        $relation = strtolower(class_basename($this->model));
+        $fields = implode(',', $this->fields);
+        $model->load("{$relation}:{$fields}");
+
+        static::refresh($model->{$relation}->{$key});
+        throw_empty(method_exists($model, $relation), 0xf00012); // 账号不存在对应实体
+
+        // $model->$relation = $this->retrieveById($model->{$relation}->{$key});
+        // throw_on(!empty($model->$relation->disabled_at), 0xf00242);
+        // 提供 实体 模型验证密码功能
+        $model->$relation->password = $model->password;
+        // $model->$relation->setHidden(['gender_text', 'password']);
+
+        return $model->$relation;
+    }
+
+    public function getFields(): array
+    {
+        return $this->fields;
+    }
+}
diff --git a/src/Auth/readme.md b/src/Auth/readme.md
new file mode 100644
index 0000000..6abcccb
--- /dev/null
+++ b/src/Auth/readme.md
@@ -0,0 +1,93 @@
+## 用户提供者
+
+一般的用户数据库设计都会有一个user表，里面包含用户名和登录密码信息
+可能还会有手机号登录、email登录甚至微信绑定登录等等，所以user表会越来越多信息，如
+
+|user|
+|----|
+|id|
+|username|
+|mobile|
+|email|
+|wx_union_id|
+|password|
+|...其他|
+
+因为用户信息表会经常用到，但是登录信息并不是
+因此可以拆成用户信息表和账号表，即 user <-> account，关联字段为uid，也可以使用任何你想要的字段
+
+|user|             |account|                       
+|----|             |----|                     
+|id|               |id|     
+|uid|              |uid|         
+|username|         |username|         
+|nickname|         |email|     
+|email|            |wx_union_id|      
+|gender|           |password|
+|...其他|           |last_login_at|
+
+
+> user表只保存用户信息，如用户名、手机号、呢称、性别、年龄等
+> account表只保存登录相关信息，如用户名、手机号、email、密码、最后登录时间等
+> account表只在登录时使用，其他业务很少会使用到
+
+为了使用这种设计，如果通过account登录，默认的 User Provider 会返回account信息，并绑定到Auth服务里
+每次想获取登录用户信息都得通过 Auth::user()->user 的方式，比较笼统（Auth::user()其实是account记录)
+因此自定义一个 User Provider，通过 account 表验证，返回 user 表信息到Auth服务
+
+### 注册服务提供者
+
+在合适的地方，把CacheEloquentUserProvider注册到 Auth服务里，可以在AuthServiceProvider，也可以是CommonServiceProvider
+这里默认已经在CommonServiceProvider注册了
+
+```php
+Auth::provider(
+    'cache_eloquent',
+    function ($app, array $config) {
+        // 返回 Illuminate\Contracts\Auth\UserProvider 实例...
+        $model = $config['model'];
+        $fields = $config['fields'];
+        $authModel = $config['auth_model'];
+
+        return $app->make(CacheEloquentUserProvider::class, compact('model', 'authModel', 'fields'));
+    }
+);
+```
+
+### 配置 User Provider
+
+在 config/auth.php 里添加一个 providers 配置，名为 cache, 并且对应的Guard指定provider为cache
+
+```php
+[
+    'guards' => [
+        'web' => [
+            'driver' => 'session',
+            'provider' => 'accounts',
+        ],
+        'api' => [
+            'driver' => 'session',
+            'provider' => 'cache',
+        ]
+    ],
+    'providers' => [
+        'users' => [
+            'driver' => 'eloquent',
+            'model' => App\Domain\Module\UserCenter\Model\User::class,
+        ],
+        'cache' => [
+            'driver' => 'cache_eloquent',
+            'model' => App\Domain\Module\UserCenter\Model\User::class,
+            'auth_model' => App\Domain\Module\UserCenter\Model\Account::class,
+            'fields' => ['id','uid','username', 'nickname'],
+        ],
+    ]
+]
+```
+
+> - driver就是已经注册的 User Provider
+> - mode为返回的具体模型，即User表
+> - auth_model为验证使用的模型，即Account表
+> - fields指定返回user表的列数据，填 \['*'\] 或为 null返回所有列数据
+
+
diff --git a/src/Console/Base/BaseGeneratorCommand.php b/src/Console/Base/BaseGeneratorCommand.php
new file mode 100644
index 0000000..ff966d6
--- /dev/null
+++ b/src/Console/Base/BaseGeneratorCommand.php
@@ -0,0 +1,109 @@
+<?php
+
+namespace Zeaven\EasySuit\Console\Base;
+
+use Zeaven\EasySuit\Console\Traits\getNameInputTrait;
+use Illuminate\Console\GeneratorCommand;
+use Illuminate\Filesystem\Filesystem;
+use Symfony\Component\Console\Input\InputOption;
+
+/**
+ * 生成器基类
+ *
+ * @date    2020-06-02 15:46:53
+ * @version $Id$
+ */
+abstract class BaseGeneratorCommand extends GeneratorCommand
+{
+    use getNameInputTrait;
+
+    /**
+     * Create a new controller creator command instance.
+     *
+     * @param  \Illuminate\Filesystem\Filesystem  $files
+     * @return void
+     */
+    public function __construct(Filesystem $files)
+    {
+        parent::__construct($files);
+        $def = $this->getDefinition();
+        if (!$def->hasOption('force')) {
+            $forceOption = new InputOption('force', 'f', null, '强制生成');
+            $def->addOption($forceOption);
+        }
+    }
+
+    public function handle()
+    {
+        $name = $this->qualifyClass($this->getNameInput());
+
+        $path = $this->getPath($name);
+
+        // First we will check to see if the class already exists. If it does, we don't want
+        // to create the class and overwrite the user's code. So, we will bail out so the
+        // code is untouched. Otherwise, we will continue generating this class' files.
+        if (
+            (! $this->hasOption('force') ||
+             ! $this->option('force')) &&
+             $this->alreadyExists($this->getNameInput())
+        ) {
+            $this->error($this->type . ' already exists!');
+
+            return false;
+        }
+
+        // Next, we will generate the path to the location where this class' file should get
+        // written. Then, we will build the class and make the proper replacements on the
+        // stub files so that it gets the correctly formatted namespace and class name.
+        $this->makeDirectory($path);
+
+        $this->files->put(
+            $path,
+            $this->sortImports(
+                $this->replaceCustom(
+                    $this->replaceComment(
+                        $this->buildClass($name)
+                    ),
+                    $name
+                )
+            )
+        );
+
+        $this->info($this->type . ' created successfully.');
+    }
+
+    protected function replaceCustom(string $stub, string $name)
+    {
+        return $stub;
+    }
+
+    /**
+     * 替换头部注释
+     *
+     * @param  string $stub [description]
+     * @return [type]       [description]
+     */
+    protected function replaceComment(string $stub)
+    {
+        $comment = $this->files->get(__DIR__ . '/../Commands/stubs/comment.stub');
+        $author = $this->getAuthorInput();
+        $comment = str_replace('{{author}}', $author, $comment);
+        $comment = str_replace('{{date}}', date('Y-m-d H:i:s'), $comment);
+
+        return str_replace(['DummyComment', '{{ comment }}', '{{comment}}'], $comment, $stub);
+    }
+
+    /**
+     * 返回注释作者
+     *
+     * @return [type] [description]
+     */
+    protected function getAuthorInput()
+    {
+        if ($this->hasOption('author')) {
+            return $this->option('author') ?? 'generator';
+        } else {
+            return 'generator';
+        }
+    }
+}
diff --git a/src/Console/Commands/DataSeed.php b/src/Console/Commands/DataSeed.php
new file mode 100644
index 0000000..1ddc733
--- /dev/null
+++ b/src/Console/Commands/DataSeed.php
@@ -0,0 +1,82 @@
+<?php
+
+/**
+ * 数据填充 db:seed 交互命令
+ *
+ * @date    2018-07-05 21:10:09
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use Artisan;
+use Illuminate\Console\Command;
+use Illuminate\Support\Collection;
+use Str;
+
+class DataSeed extends Command
+{
+    protected $signature = 'data-seed';// {seeder=SaasTableSeeder}
+    /**
+     * 控制台命令说明。
+     *
+     * @var string
+     */
+    protected $description = 'run a data seeder';
+
+    protected $seeder_path;
+    /**
+     * Execute the command.
+     *
+     * @return void
+     */
+    public function handle()
+    {
+        $this->seeder_path = base_path('database/seeders');
+
+        $files = $this->getSeeders();
+
+        $seeder_file = $this->chooseSeeder($files);
+        if (strtolower($seeder_file) === 'exit') {
+            $this->line('退出执行。');
+            return;
+        } else {
+            $this->line('开始执行：' . $seeder_file);
+        }
+
+        Artisan::call('db:seed', [
+                '--class' => $seeder_file
+            ], $this->output);
+        $this->line('执行完毕。');
+    }
+
+    private function getSeeders()
+    {
+        $dir = dir($this->seeder_path);
+        try {
+            while (($file = $dir->read()) !== false) {
+                if (!Str::endsWith($file, '.php')) {
+                    continue;
+                }
+                $filename = pathinfo($file)['filename'];
+                $clsz = "Database\\Seeders\\{$filename}";
+                $desc = data_get(new $clsz(), 'description', '');
+                $filename .= '   --' . $desc;
+                $files[] = $filename;
+            }
+            sort($files);
+            array_unshift($files, 'Exit');
+        } finally {
+            $dir->close();
+        }
+
+        return $files;
+    }
+
+    private function chooseSeeder(array $seeder_files)
+    {
+        $choose_file = $this->choice('选择要执行的Seeder?', $seeder_files, false);
+        $choose_file = trim(explode('--', $choose_file)[0]);
+        return $choose_file;
+    }
+}
diff --git a/src/Console/Commands/GenContextCommand.php b/src/Console/Commands/GenContextCommand.php
new file mode 100644
index 0000000..7bef527
--- /dev/null
+++ b/src/Console/Commands/GenContextCommand.php
@@ -0,0 +1,39 @@
+<?php
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use Zeaven\EasySuit\Console\Base\BaseGeneratorCommand;
+
+/**
+ * 业务逻辑生成命令
+ *
+ */
+class GenContextCommand extends BaseGeneratorCommand
+{
+    const ROOT_FOLDER = 'Domain/Module/?/Context/?';
+    const SUFFIX = 'Context';
+    /**
+     * The name and signature of the console command.
+     *
+     * @var string
+     */
+    protected $signature = 'gen:ctx {name : 名称} {--o|author= : 作者}';
+
+    /**
+     * The console command description.
+     *
+     * @var string
+     */
+    protected $description = '生成领域上下文文件代码，如 gen:ctx home/any ==> App/Domain/Module/Home/Context/AnyContext';
+
+
+    /**
+     * 控制器模板
+     *
+     * @return [type] [description]
+     */
+    protected function getStub()
+    {
+        return __DIR__ . '/stubs/ctx.stub';
+    }
+}
diff --git a/src/Console/Commands/GenCtrlCommand.php b/src/Console/Commands/GenCtrlCommand.php
new file mode 100644
index 0000000..ffa0ed3
--- /dev/null
+++ b/src/Console/Commands/GenCtrlCommand.php
@@ -0,0 +1,66 @@
+<?php
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use Zeaven\EasySuit\Console\Base\BaseGeneratorCommand;
+use Str;
+use Artisan;
+
+/**
+ * 控制器生成命令
+ *
+ */
+class GenCtrlCommand extends BaseGeneratorCommand
+{
+    const ROOT_FOLDER = 'Http/Controllers/';
+
+    const SUFFIX = 'Controller';
+    /**
+     * The name and signature of the console command.
+     *
+     * @var string
+     */
+    protected $signature = 'gen:ctrl {name : 控制器名}  {--o|author= : 作者}';
+
+    /**
+     * The console command description.
+     *
+     * @var string
+     */
+    protected $description = '生成控制器文件代码，如 gen:ctrl home/any ==> App/Http/Controllers/Home/AnyController';
+
+
+    /**
+     * 控制器模板
+     *
+     * @return [type] [description]
+     */
+    protected function getStub()
+    {
+        return __DIR__ . '/stubs/ctrl.stub';
+    }
+
+    protected function replaceCustom(string $stub, string $name)
+    {
+        $logic_name = Str::studly(str_replace('Controller', '', Str::after($name, 'App\\Http\\Controllers\\')));
+        Artisan::call(
+            'gen:logic',
+            [
+            'name' => $logic_name,
+            '--force' => true
+            ]
+        );
+        $logic_namespace = 'use App\\Logics\\' . $logic_name . 'Logic;';
+        $is_admin_ctrl = preg_match('/Admin\\\\/', $logic_name);
+        if ($is_admin_ctrl) {
+            $request = 'use App\Http\Requests\AdminRequest;';
+        } else {
+            $request = 'use App\Http\Requests\ApiRequest;';
+        }
+
+        $stub = str_replace('{{logic_namespace}}', $logic_namespace, $stub);
+        $stub = str_replace('{{logic}}', class_basename($logic_name . 'Logic'), $stub);
+        $stub = str_replace('{{request}}', $request, $stub);
+        return $stub;
+    }
+}
diff --git a/src/Console/Commands/GenEntityCommand.php b/src/Console/Commands/GenEntityCommand.php
new file mode 100644
index 0000000..565a0da
--- /dev/null
+++ b/src/Console/Commands/GenEntityCommand.php
@@ -0,0 +1,49 @@
+<?php
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use Zeaven\EasySuit\Console\Base\BaseGeneratorCommand;
+use Str;
+
+/**
+ * 业务逻辑生成命令
+ *
+ */
+class GenEntityCommand extends BaseGeneratorCommand
+{
+    const ROOT_FOLDER = 'Domain/Module/?/Entity/?';
+    const SUFFIX = 'Entity';
+    /**
+     * The name and signature of the console command.
+     *
+     * @var string
+     */
+    protected $signature = 'gen:entity {name : 实体名} {--o|author= : 作者}';
+
+    /**
+     * The console command description.
+     *
+     * @var string
+     */
+    protected $description = '生成领域实体文件代码，如 gen:model home/any ==> App/Domain/Module/Home/Entity/AnyEntity';
+
+
+    /**
+     * 控制器模板
+     *
+     * @return [type] [description]
+     */
+    protected function getStub()
+    {
+        return __DIR__ . '/stubs/entity.stub';
+    }
+
+    protected function replaceCustom(string $stub, string $name)
+    {
+        $model_class = str_replace('\\Entity\\', '\\Model\\', $name);
+        $model_class = str_replace('Entity', '', $model_class);
+        $stub = str_replace('{{model_class}}', $model_class, $stub);
+        $model = Str::afterLast($model_class, '\\');
+        return str_replace('{{model}}', $model, $stub);
+    }
+}
diff --git a/src/Console/Commands/GenEventCommand.php b/src/Console/Commands/GenEventCommand.php
new file mode 100644
index 0000000..2c37efd
--- /dev/null
+++ b/src/Console/Commands/GenEventCommand.php
@@ -0,0 +1,39 @@
+<?php
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use Zeaven\EasySuit\Console\Base\BaseGeneratorCommand;
+
+/**
+ * 业务逻辑生成命令
+ *
+ */
+class GenEventCommand extends BaseGeneratorCommand
+{
+    const ROOT_FOLDER = 'Domain/Events/';
+    const SUFFIX = 'Event';
+    /**
+     * The name and signature of the console command.
+     *
+     * @var string
+     */
+    protected $signature = 'gen:event {name : 事件名} {--o|author= : 作者}';
+
+    /**
+     * The console command description.
+     *
+     * @var string
+     */
+    protected $description = '生成领域事件文件代码，如 gen:event home/any ==> App/Domain/Events/Home/AnyEvent';
+
+
+    /**
+     * 控制器模板
+     *
+     * @return [type] [description]
+     */
+    protected function getStub()
+    {
+        return __DIR__ . '/stubs/event.stub';
+    }
+}
diff --git a/src/Console/Commands/GenListenerCommand.php b/src/Console/Commands/GenListenerCommand.php
new file mode 100644
index 0000000..399879f
--- /dev/null
+++ b/src/Console/Commands/GenListenerCommand.php
@@ -0,0 +1,39 @@
+<?php
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use Zeaven\EasySuit\Console\Base\BaseGeneratorCommand;
+
+/**
+ * 业务逻辑生成命令
+ *
+ */
+class GenListenerCommand extends BaseGeneratorCommand
+{
+    const ROOT_FOLDER = 'Listeners/';
+    const SUFFIX = 'Listener';
+    /**
+     * The name and signature of the console command.
+     *
+     * @var string
+     */
+    protected $signature = 'gen:listener {name : 事件名称} {--o|author= : 作者}';
+
+    /**
+     * The console command description.
+     *
+     * @var string
+     */
+    protected $description = '生成事件文件代码，如 gen:listener home/any ==> App/Listeners/Home/AnyListener';
+
+
+    /**
+     * 控制器模板
+     *
+     * @return [type] [description]
+     */
+    protected function getStub()
+    {
+        return __DIR__ . '/stubs/listener.stub';
+    }
+}
diff --git a/src/Console/Commands/GenLogicCommand.php b/src/Console/Commands/GenLogicCommand.php
new file mode 100644
index 0000000..51111da
--- /dev/null
+++ b/src/Console/Commands/GenLogicCommand.php
@@ -0,0 +1,39 @@
+<?php
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use Zeaven\EasySuit\Console\Base\BaseGeneratorCommand;
+
+/**
+ * 业务逻辑生成命令
+ *
+ */
+class GenLogicCommand extends BaseGeneratorCommand
+{
+    const ROOT_FOLDER = 'Logics/';
+    const SUFFIX = 'Logic';
+    /**
+     * The name and signature of the console command.
+     *
+     * @var string
+     */
+    protected $signature = 'gen:logic {name : 业务逻辑名} {--o|author= : 作者}';
+
+    /**
+     * The console command description.
+     *
+     * @var string
+     */
+    protected $description = '生成业务逻辑文件代码，如 gen:logic home/any ==> App/Logics/Home/AnyLogic';
+
+
+    /**
+     * 控制器模板
+     *
+     * @return [type] [description]
+     */
+    protected function getStub()
+    {
+        return __DIR__ . '/stubs/logic.stub';
+    }
+}
diff --git a/src/Console/Commands/GenMapperCommand.php b/src/Console/Commands/GenMapperCommand.php
new file mode 100644
index 0000000..db9cace
--- /dev/null
+++ b/src/Console/Commands/GenMapperCommand.php
@@ -0,0 +1,39 @@
+<?php
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use Zeaven\EasySuit\Console\Base\BaseGeneratorCommand;
+
+/**
+ * 业务逻辑生成命令
+ *
+ */
+class GenMapperCommand extends BaseGeneratorCommand
+{
+    const ROOT_FOLDER = 'Http/ResponseMappers/';
+    const SUFFIX = 'Mapper';
+    /**
+     * The name and signature of the console command.
+     *
+     * @var string
+     */
+    protected $signature = 'gen:mapper {name : 名称} {--o|author= : 作者}';
+
+    /**
+     * The console command description.
+     *
+     * @var string
+     */
+    protected $description = '生成资源映射文件代码，如 gen:mapper home/any ==> App/Http/ResponseMappers/Home/AnyMapper';
+
+
+    /**
+     * 控制器模板
+     *
+     * @return [type] [description]
+     */
+    protected function getStub()
+    {
+        return __DIR__ . '/stubs/mapper.stub';
+    }
+}
diff --git a/src/Console/Commands/GenModelCommand.php b/src/Console/Commands/GenModelCommand.php
new file mode 100644
index 0000000..17dc899
--- /dev/null
+++ b/src/Console/Commands/GenModelCommand.php
@@ -0,0 +1,39 @@
+<?php
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use Zeaven\EasySuit\Console\Base\BaseGeneratorCommand;
+
+/**
+ * 业务逻辑生成命令
+ *
+ */
+class GenModelCommand extends BaseGeneratorCommand
+{
+    const ROOT_FOLDER = 'Domain/Module/?/Model/?';
+    const SUFFIX = '';
+    /**
+     * The name and signature of the console command.
+     *
+     * @var string
+     */
+    protected $signature = 'gen:model {name : 模型名} {--o|author= : 作者}';
+
+    /**
+     * The console command description.
+     *
+     * @var string
+     */
+    protected $description = '生成领域模型文件代码，如 gen:model home/any ==> App/Domain/Module/Home/Model/AnyModel';
+
+
+    /**
+     * 控制器模板
+     *
+     * @return [type] [description]
+     */
+    protected function getStub()
+    {
+        return __DIR__ . '/stubs/model.stub';
+    }
+}
diff --git a/src/Console/Commands/GenParamCommand.php b/src/Console/Commands/GenParamCommand.php
new file mode 100644
index 0000000..d7490f2
--- /dev/null
+++ b/src/Console/Commands/GenParamCommand.php
@@ -0,0 +1,39 @@
+<?php
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use Zeaven\EasySuit\Console\Base\BaseGeneratorCommand;
+
+/**
+ * 业务逻辑生成命令
+ *
+ */
+class GenParamCommand extends BaseGeneratorCommand
+{
+    const ROOT_FOLDER = 'Domain/Module/?/Param/?';
+    const SUFFIX = 'Param';
+    /**
+     * The name and signature of the console command.
+     *
+     * @var string
+     */
+    protected $signature = 'gen:param {name : 实体名} {--o|author= : 作者}';
+
+    /**
+     * The console command description.
+     *
+     * @var string
+     */
+    protected $description = '生成领域参数文件代码，如 gen:param home/any ==> App/Domain/Module/Home/Param/AnyParam';
+
+
+    /**
+     * 控制器模板
+     *
+     * @return [type] [description]
+     */
+    protected function getStub()
+    {
+        return __DIR__ . '/stubs/param.stub';
+    }
+}
diff --git a/src/Console/Commands/GenRequestCommand.php b/src/Console/Commands/GenRequestCommand.php
new file mode 100644
index 0000000..96388ce
--- /dev/null
+++ b/src/Console/Commands/GenRequestCommand.php
@@ -0,0 +1,53 @@
+<?php
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use Zeaven\EasySuit\Console\Base\BaseGeneratorCommand;
+
+/**
+ * 业务逻辑生成命令
+ *
+ */
+class GenRequestCommand extends BaseGeneratorCommand
+{
+    const ROOT_FOLDER = 'Http/Requests/';
+    const SUFFIX = 'Request';
+    /**
+     * The name and signature of the console command.
+     *
+     * @var string
+     */
+    protected $signature = 'gen:request {name : 请求对象名} {--o|author= : 作者}';
+
+    /**
+     * The console command description.
+     *
+     * @var string
+     */
+    protected $description = '生成请求对象文件代码，如 gen:request home/any ==> App/Http/Requests/Home/AnyRequest';
+
+
+    /**
+     * 控制器模板
+     *
+     * @return [type] [description]
+     */
+    protected function getStub()
+    {
+        return __DIR__ . '/stubs/request.stub';
+    }
+
+    protected function replaceCustom(string $stub, string $name)
+    {
+        $baseRequest = 'BaseRequest';
+        $isApi = preg_match('/Api\\\\/', $name);
+        if ($isApi) {
+            $baseRequest = 'ApiRequest';
+        } else {
+            $baseRequest = 'AdminRequest';
+        }
+
+        $stub = str_replace('{{BaseRequest}}', $baseRequest, $stub);
+        return $stub;
+    }
+}
diff --git a/src/Console/Commands/GenServiceCommand.php b/src/Console/Commands/GenServiceCommand.php
new file mode 100644
index 0000000..7d09c25
--- /dev/null
+++ b/src/Console/Commands/GenServiceCommand.php
@@ -0,0 +1,49 @@
+<?php
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use Zeaven\EasySuit\Console\Base\BaseGeneratorCommand;
+use Str;
+
+/**
+ * 业务逻辑生成命令
+ *
+ */
+class GenServiceCommand extends BaseGeneratorCommand
+{
+    const ROOT_FOLDER = 'Domain/Module/?/Service/?';
+    const SUFFIX = 'Service';
+    /**
+     * The name and signature of the console command.
+     *
+     * @var string
+     */
+    protected $signature = 'gen:service {name : 实体名} {--o|author= : 作者}';
+
+    /**
+     * The console command description.
+     *
+     * @var string
+     */
+    protected $description = '生成领域服务文件代码，如 gen:service home/any ==> App/Domain/Module/Home/Service/AnyService';
+
+
+    /**
+     * 控制器模板
+     *
+     * @return [type] [description]
+     */
+    protected function getStub()
+    {
+        return __DIR__ . '/stubs/service.stub';
+    }
+
+    protected function replaceCustom(string $stub, string $name)
+    {
+        $model_class = str_replace('\\Service\\', '\\Context\\', $name);
+        $model_class = str_replace('Service', 'Context', $model_class);
+        $stub = str_replace('{{ctx_class}}', $model_class, $stub);
+        $model = Str::afterLast($model_class, '\\');
+        return str_replace('{{ctx}}', $model, $stub);
+    }
+}
diff --git a/src/Console/Commands/PostmanClear.php b/src/Console/Commands/PostmanClear.php
new file mode 100644
index 0000000..4c46c1f
--- /dev/null
+++ b/src/Console/Commands/PostmanClear.php
@@ -0,0 +1,31 @@
+<?php
+
+/**
+ * postman 回退操作
+ *
+ * @date    2020-06-05 13:38:12
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use Illuminate\Console\Command;
+use Illuminate\Support\Collection;
+use Storage;
+
+class PostmanClear extends Command
+{
+    protected $signature = 'pm:clear';
+    protected $description = '删除Postman缓存';
+
+    const POSTMAN_GENERATOR_CACHE = 'postman/cache.json';
+
+
+    public function handle()
+    {
+        if (Storage::exists(static::POSTMAN_GENERATOR_CACHE)) {
+            Storage::delete(static::POSTMAN_GENERATOR_CACHE);
+        }
+        $this->info('删除完成！');
+    }
+}
diff --git a/src/Console/Commands/PostmanRevert.php b/src/Console/Commands/PostmanRevert.php
new file mode 100644
index 0000000..d0fe134
--- /dev/null
+++ b/src/Console/Commands/PostmanRevert.php
@@ -0,0 +1,84 @@
+<?php
+
+/**
+ * postman 回退操作
+ *
+ * @date    2020-06-05 13:38:12
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use Illuminate\Console\Command;
+use Illuminate\Support\Collection;
+use Storage;
+
+class PostmanRevert extends Command
+{
+    protected $signature = 'pm:revert';
+    protected $description = '删除上次从Postman生成的代码和文件';
+
+    const POSTMAN_GENERATOR_BACKUP = 'postman/backup.json';
+
+
+    public function handle()
+    {
+        if (!Storage::exists(static::POSTMAN_GENERATOR_BACKUP)) {
+            return $this->error('无删除数据！');
+        }
+        $data = Storage::get(static::POSTMAN_GENERATOR_BACKUP);
+        $mapper = collect(json_decode($data, true));
+
+
+        $this->revert($mapper);
+        Storage::delete(static::POSTMAN_GENERATOR_BACKUP);
+    }
+
+    private function revert(Collection $mapper)
+    {
+        $mapper->each(
+            function ($item, $key) {
+                if (boolval($item['created'])) {
+                    // 删除文件
+                    $this->info('删除控制器：' . $key);
+                    $this->deleteFile($item['file']);
+                    $this->deleteFile($item['logic']);
+                    $this->deleteRequest($item['request']);
+                } else {
+                    // 删除请求对象
+                    $this->deleteRequest($item['request']);
+                    // 删除方法
+                    $this->info('移除控制器：' . $key . '中的方法');
+                    $this->deleteFunc($item['file'], $item['func']);
+                }
+            }
+        );
+    }
+
+    private function deleteFile(string $file)
+    {
+        throw_on(!unlink($file), '删除文件失败：' . $file);
+    }
+
+    private function deleteFunc(string $file, array $func)
+    {
+        if (!file_exists($file)) {
+            return;
+        }
+        $content = file_get_contents($file);
+
+        foreach ($func as $func_text) {
+            $func_text = str_replace('/** #generate function# 删除后将无法自动生成控制器方法 */', '', $func_text);
+            $content = str_replace($func_text, '', $content);
+        }
+
+        file_put_contents($file, $content);
+    }
+
+    private function deleteRequest(array $requests)
+    {
+        foreach ($requests as $request) {
+            throw_on(!unlink($request), '删除请求对象失败：' . $request);
+        }
+    }
+}
diff --git a/src/Console/Commands/PostmanSync.php b/src/Console/Commands/PostmanSync.php
new file mode 100644
index 0000000..c1ecdfd
--- /dev/null
+++ b/src/Console/Commands/PostmanSync.php
@@ -0,0 +1,621 @@
+<?php
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use Zeaven\EasySuit\Services\PostmanClient;
+use Artisan;
+use Illuminate\Console\Command;
+use Illuminate\Support\Arr;
+use Illuminate\Support\Collection;
+use Illuminate\Support\Str;
+
+class PostmanSync extends Command
+{
+    private $_client;
+
+    private $_files = [];
+
+    private $_force = false;
+
+    private $_mapper = [];
+
+    private $_route = [];
+
+    const POSTMAN_GENERATOR_BACKUP = 'postman/backup.json';
+    const POSTMAN_GENERATOR_CACHE = 'postman/cache.json';
+
+    /**
+     * The name and signature of the console command.
+     *
+     * @var string
+     */
+    protected $signature = 'pm:run {collection? : 生成代码的集合名称} {--F|force}';
+
+    /**
+     * The console command description.
+     *
+     * @var string
+     */
+    protected $description = '从postman接口定义生成Laravel控制器代码';
+
+    /**
+     * Create a new command instance.
+     *
+     * @return void
+     */
+    public function __construct()
+    {
+        parent::__construct();
+    }
+
+    /**
+     * Execute the console command.
+     *
+     * @return mixed
+     */
+    public function handle()
+    {
+        $this->_client = app(PostmanClient::class);
+        $collection_name = $this->argument('collection');
+        $this->_force = $this->option('force');
+
+        $folders = $this->getCollection($collection_name);
+        $selected_folders = $this->choiceFolders($folders);
+        try {
+            $this->handleFolders($selected_folders);
+
+            foreach ($this->_files as ['path' => $path, 'content' => $content, 'logic_path' => $logic_path, 'logic_content' => $logic_content]) {
+                file_put_contents($path, $content);
+                file_put_contents($logic_path, $logic_content);
+            }
+            $this->mergeRouteConfig();
+        } catch (\Exception $ex) {
+            $this->error($ex);
+        } finally {
+            // 保存创建记录，提供删除能力
+            \Storage::put(static::POSTMAN_GENERATOR_BACKUP, json_encode($this->_mapper, JSON_UNESCAPED_UNICODE));
+        }
+    }
+
+    protected function choiceFolders(array $folders, $parent = null)
+    {
+        // 只处理目录
+        $fds = $parent ? ['生成代码'] : [];
+        foreach ($folders as $folder) {
+            if (isset($folder['request'])) {
+                continue;
+            }
+            $fds[] = $folder['name'];
+        }
+
+        $selected = $this->choice(
+            '选择要生成控制器的目录?' . ($parent ? "[{$parent['name']}]" : ''),
+            $fds,
+            0,
+            $maxAttempts = null,
+            $allowMultipleSelections = false
+        );
+
+        if ($selected === '生成代码') {
+            return [$parent];
+        }
+
+        foreach ($folders as $folder) {
+            if ($folder['name'] === $selected) {
+                $selected = $folder;
+            }
+        }
+        // 选择下级目录
+        $sub_folders = [];
+        foreach ($selected['item'] as $value) {
+            if (!isset($value['request'])) {
+                $sub_folders[] = $value;
+            }
+        }
+        if (!empty($sub_folders)) {
+            return $this->choiceFolders($sub_folders, $selected);
+        }
+
+        return [$selected];
+    }
+
+    protected function handleFolders($selected_folders, $namespaces = [])
+    {
+        foreach ($selected_folders as $folder) {
+            $namespace = $namespaces;
+            if (!isset($folder['request'])) {
+                $this->handleFolders($folder['item'], $namespace);
+            } else {
+                $this->generateApi($folder['name'], $folder['request'], $folder['description'] ?? '');
+            }
+        }
+    }
+
+    /**
+     * 生成控制器
+     *
+     * @param  [type] $name [description]
+     * @param  [type] $request        [description]
+     * @return [type]             [description]
+     */
+    protected function generateApi(string $name, array $request, string $description)
+    {
+        $method = strtolower($request['method']);
+        // $query => [{key, value, type}], $urlPath => ['api', 'login', 'dologin']
+        ['raw' => $url, 'path' => $urlPaths] = $request['url'];
+        $query = $request['url']['query'] ?? [];
+        if ($method === 'post' || $method === 'put') {
+            $body = Arr::get($request, 'body.' . Arr::get($request, 'body.mode', 'formdata'), []);
+            $query = array_merge($query, $body);
+        }
+        $api = $this->parseController($method, $url, $query, $urlPaths);
+        $ctrl = $api['ctrl'];
+        ['path' => $path, 'content' => $ctrl_stub, 'logic_path' => $logic_path, 'logic_content' => $logic_stub] = $this->createController($ctrl);
+        $request = $this->createRequest($api['action'], $ctrl, $api['query']);
+        $method_desc = $request['description'] ?? '';
+        [$ctrl_text, $func_stub, $logic_text] = $this->createFunction(
+            $name,
+            $ctrl_stub,
+            $logic_stub,
+            $api['action'],
+            $api['query'],
+            $api['params'],
+            $method_desc,
+            class_basename($request)
+        );
+        $this->addMapperRoute($api, $url, $method, $name);
+        if ($ctrl_text !== false) {
+            $this->addMapperFunc($ctrl, $func_stub);
+
+            $this->_files[$ctrl]['content'] = $ctrl_text;
+            $this->_files[$ctrl]['logic_content'] = $logic_text;
+            $this->info("请求方法：[{$api['action']}]创建成功！");
+        }
+    }
+
+    /**
+     * 解释控制器
+     *
+     * restful接口规定
+     * get      /api/articles               文章列表，方法index
+     * post     /api/articles               创建文章, 方法add
+     * get      /api/articles/{article_id}  获取文章信息，方法get
+     * put      /api/articles/{article_id}  更新文章, 方法update
+     * delete   /api/articles/{article_id}  删除文章，方法delete
+     * 其他方法
+     * get      /api/articles/{article_id}/category 获取文章分类，方法 category
+     * put      /api/articles/{article_id}/category 修改文章分类，方法 updateCategory
+     *
+     * @param  string $url      [description]
+     * @param  array  $query   [description]
+     * @param  array  $urlPaths [description]
+     * @return object           {ctrl, action, query, params}
+     */
+    protected function parseController(string $method, string $url, array $query, array $urlPaths): array
+    {
+        // 判断是否restful接口，restful接口的控制器为复数形式或s结尾
+        $params = []; // url路径参数
+        $namespaces = [];
+        $action = '';
+        for ($i = 0,$l = count($urlPaths); $i < $l; $i++) {
+            $path = $urlPaths[$i];
+            if (Str::contains($path, '{')) {
+                // 参数
+                $params[] = preg_replace('/[{}]/', '', $path);
+            } else {
+                $action = Str::camel(str_replace('-', '_', $path)); // 方法名为驼峰式
+                $namespaces[] = Str::studly($action);    // 命名空间为变种驼峰命名
+            }
+        }
+        // 获取倒数第二个参数，判断是否restful接口
+        $ctrl = head(array_slice($namespaces, -2, 1));
+        $restful = $ctrl === Str::plural($ctrl);
+        // 如果方法名是复数形式，说明是result接口
+        if (($restful && $action !== Str::plural($action)) || $action === Str::plural($action)) {
+            // restful 接口以请求method为方法名
+            $action_key = ($method === 'get' && count($params) === 0) ? 'index' : $method;
+            $action = [
+            'index' => 'index',
+            'get' => 'show',
+            'post' => 'store',
+            'put' => 'update',
+            'delete' => 'destroy'
+            ][$action_key] ?? $action_key;
+
+            if ($restful) {
+                // 最后一个是方法名，需要去掉
+                $act_name = array_pop($namespaces);
+                if (!in_array($action, ['index', 'show'])) {
+                    $action .= $act_name;
+                } else {
+                    $action = Str::camel($act_name);
+                }
+            }
+        } else {
+            // 最后一个是方法名，需要去掉
+            array_pop($namespaces);
+        }
+        // 命名空间最后一个是控制器名，转成单数形式
+        $namespaces[] = Str::singular(array_pop($namespaces));
+        if (count($namespaces) <= 2) {
+            $namespaces[] = last($namespaces);
+        }
+        // 合并控制器路径
+        $ctrl = implode('/', $namespaces);
+
+        return [
+            'ctrl' => $ctrl,
+            'action' => $action,
+            'query' => $query,
+            'params' => $params,
+        ];
+    }
+
+    /**
+     * 创建控制器
+     * @param  [type] $ctrl [description]
+     * @return [type]       [description]
+     */
+    protected function createController(string $ctrl): array
+    {
+        if (isset($this->_files[$ctrl])) {
+            return $this->_files[$ctrl];
+        }
+        $force = $this->_force;
+        $ctrl_path = $ctrl . 'Controller.php';
+        $file_path = app_path('Http/Controllers/' . $ctrl_path);
+        $logic_file_path = app_path('Logics/' . $ctrl . 'Logic.php');
+        if ($force || !file_exists($file_path)) {
+            // 添加文件映射，失败后可通过pm:revert回复
+            $this->addMapperFile($ctrl, $file_path, true);
+            $this->addMapperLogic($ctrl, $logic_file_path);
+            Artisan::call(
+                'gen:ctrl',
+                [
+                'name' => $ctrl,
+                '--force' => true
+                ]
+            );
+            $this->info("控制器：[{$ctrl_path}]创建成功！");
+            $this->info("业务逻辑：[{$ctrl}Logic.php]创建成功！");
+        } else {
+            $this->addMapperFile($ctrl, $file_path, false);
+            $this->comment("控制器：[{$ctrl_path}]已存在！");
+            $this->comment("业务逻辑：[{$ctrl}Logic.php]已存在！");
+        }
+
+        $this->_files[$ctrl] = ['path' => $file_path, 'content' => file_get_contents($file_path),
+            'logic_path' => $logic_file_path, 'logic_content' => file_get_contents($logic_file_path)];
+
+        return $this->_files[$ctrl];
+    }
+
+    /**
+     * 创建控制请求对象
+     * @param  string $ctrl  [description]
+     * @param  array  $query [description]
+     * @return [type]        [description]
+     */
+    protected function createRequest(string $method, string $ctrl, array $query): string
+    {
+        if (count($query) === 0) {
+            return preg_match('/Admin\//', $ctrl) ?
+                'Admin' :
+                'Api';
+        }
+        $ctrl = collect(explode('/', $ctrl))->unique()->implode('/');
+        // 生成Request
+        $request = $ctrl . '/' . Str::studly($method);
+        $request_path = str_replace(
+            '-',
+            '_',
+            Str::singular($request)
+        ) . 'Request.php';
+        $force = $this->_force;
+        $file_path = app_path('Http/Requests/' . $request_path);
+        if ($force || !file_exists($file_path)) {
+            // 添加文件映射，失败后可通过pm:revert回复
+            $this->addMapperRequest($ctrl, $file_path, true);
+            Artisan::call(
+                'gen:request',
+                [
+                'name' => $request,
+                '--force' => true
+                ]
+            );
+        } else {
+            $this->comment("请求对象：[{$request_path}]已存在！");
+            return $request;
+        }
+
+        $content = file_get_contents($file_path);
+        // 规则param信息
+        $param = 'return [' . PHP_EOL;
+        $param .= collect($query)->unique('key')->map(
+            function ($item) {
+                $desc = $item['description'] ?? '';
+                return '            ' . "// {$desc}" . PHP_EOL . '            ' . "'{$item['key']}'";
+            }
+        )->join(',' . PHP_EOL);
+        $param .= PHP_EOL . '        ];' . PHP_EOL;
+        $content = str_replace('{{params}}', $param, $content);
+        file_put_contents($file_path, $content);
+
+        $this->info("请求对象：[{$request_path}]创建成功！");
+
+        return $request;
+    }
+
+    /**
+     * 生成控制器方法
+     * @param  string  $name [description]
+     * @param  string  $ctrl_stub [description]
+     * @param  string  $logic_stub [description]
+     * @param  string $action     [description]
+     * @param  array  $query      [description]
+     * @param  array  $params     [description]
+     * @return [type]             [description]
+     */
+    protected function createFunction(string $name, string $ctrl_stub, string $logic_stub, string $action, array $query, array $params, string $description, string $request)
+    {
+        // 判断方法是否存在
+        if (preg_match("/\s{$action}\s*\(/", $ctrl_stub)) {
+            $this->comment("请求方法[{$action}]已存在");
+            return [false, null];
+        }
+        // 查找方法勾子
+        if (!preg_match('/\/\*\* \#generate function\#[^\*]+\*\//', $ctrl_stub, $match)) {
+            $this->error("请求方法[{$action}]生成失败，#generate function#不存在");
+            return [false, null];
+        }
+        $hook = $match[0];
+        $request .= 'Request';
+        $func_stub = file_get_contents(__DIR__ . '/stubs/func.stub');
+        $func_stub = str_replace('{{name}}', $name, $func_stub);
+        $func_stub = str_replace('{{comment}}', $description, $func_stub);
+        $func_stub = str_replace('{{time}}', date('Y-m-d H:i:s'), $func_stub);
+        $func_stub = str_replace('{{action}}', $action, $func_stub);
+        $func_stub = str_replace('{{request}}', $request, $func_stub);
+
+        if (count($params)) {
+            $param = ', int $' . implode(', int $', $params);
+        } else {
+            $param = '';
+        }
+        $func_stub = str_replace('{{params}}', $param, $func_stub);
+        if (count($query)) {
+            $query = array_column($query, 'key');
+            // $args = "\$param = \$request->params();  // params方法传入对应的Param对象" . PHP_EOL;
+            $args = '// 请求传入的参数值，要获取key/value参数数组请使用 $param = $request->params();' . PHP_EOL;
+            $args .= "\t\t" . '[$' . implode(', $', $query) . '] = ' . (count($query) > 6 ? PHP_EOL : '');
+            $args .= (count($query) > 6 ? "\t\t\t" : '') . "\$request->values();";
+        } else {
+            $args = '';
+        }
+        $func_stub = str_replace('{{query}}', $args, $func_stub);
+
+        $ctrl_stub = str_replace($hook, $func_stub, $ctrl_stub);
+
+        $logic_stub = $this->createLogicFunction($name, $logic_stub, $action, $description);
+
+        return [$ctrl_stub, $func_stub, $logic_stub];
+    }
+
+    protected function createLogicFunction(string $name, string $logic_stub, string $action, string $description)
+    {
+        // 判断方法是否存在
+        if (preg_match("/\s{$action}\s*\(/", $logic_stub)) {
+            $this->comment("请求方法[{$action}]已存在");
+            return [false, null];
+        }
+        // 查找方法勾子
+        if (!preg_match('/\/\*\* \#generate function\#[^\*]+\*\//', $logic_stub, $match)) {
+            $this->error("请求方法[{$action}]生成失败，#generate function#不存在");
+            return [false, null];
+        }
+        $hook = $match[0];
+        $func_stub = file_get_contents(__DIR__ . '/stubs/logic_func.stub');
+        $func_stub = str_replace('{{name}}', $name, $func_stub);
+        $func_stub = str_replace('{{comment}}', $description, $func_stub);
+        $func_stub = str_replace('{{time}}', date('Y-m-d H:i:s'), $func_stub);
+        $func_stub = str_replace('{{action}}', $action, $func_stub);
+
+        $logic_stub = str_replace($hook, $func_stub, $logic_stub);
+
+        return $logic_stub;
+    }
+
+    private function cacheCollections()
+    {
+        $response = $this->_client->get('collections');
+        $collections = collect($response['collections'])
+            ->mapWithKeys(
+                function ($item) {
+                    return [$item['name'] => Arr::only($item, ['id','uid'])];
+                }
+            )->toArray();
+        \Storage::put(static::POSTMAN_GENERATOR_CACHE, json_encode($collections, JSON_UNESCAPED_UNICODE));
+        return $collections;
+    }
+
+    /**
+     * 获取集合
+     * @param  string $name [description]
+     * @return [type]       [description]
+     */
+    private function getCollection(?string $name)
+    {
+        // 先从本地获取
+        $collects = [];
+        if (\Storage::exists(static::POSTMAN_GENERATOR_CACHE)) {
+            $collects = json_decode(\Storage::get(static::POSTMAN_GENERATOR_CACHE), true);
+        }
+        if (!isset($collects[$name])) {
+            $collects = $this->cacheCollections();
+        }
+
+        if ($name) {
+            throw_on(!isset($collects[$name]), '集合不存在');
+        } else {
+            $name = $this->choice(
+                '选择Postman集合?',
+                array_keys($collects),
+                0,
+                null,
+                false
+            );
+        }
+        $uid = $collects[$name]['uid'];
+
+        $response = $this->_client->get('collections/' . $uid);
+
+        return $response['collection']['item'];
+    }
+
+    private function addMapperFile(string $ctrl, string $file_path, bool $created = false)
+    {
+        if ($this->addMapper('file', $ctrl, $file_path)) {
+            $this->_mapper[$ctrl]['created'] = $created;
+        }
+    }
+
+    private function addMapperLogic(string $ctrl, string $file_path)
+    {
+        $this->addMapper('logic', $ctrl, $file_path);
+    }
+
+    private function addMapperFunc(string $ctrl, string $func)
+    {
+        $this->addMapper('func', $ctrl, $func);
+    }
+
+    private function addMapperRequest(string $ctrl, string $request_path)
+    {
+        $this->addMapper('request', $ctrl, $request_path);
+    }
+
+    private function addMapperRoute(array $api, string $url, string $method, string $desc = '')
+    {
+        $url = str($url)->after('/')->before('?')->replace('{{', '{')->replace('}}', '}')->value();  // api/test/home/{uid}
+        $segments = str($api['ctrl'])->explode('/')->toArray();
+        $group = strtolower(array_shift($segments));    // api => routes/api.php
+        $root = 'index';
+        $namespaces = [];
+        $ctrl = last($segments) . 'Controller';
+        $action = $api['action'];
+        if (count($segments) > 1) {
+            $root = str($segments[0])->snake()->value();
+            $namespaces = array_slice($segments, 0, -1);
+        }
+        $name = "{$group}_{$root}_routes";  // => api_test_routes
+
+        $this->_route[] = compact('group', 'name', 'url', 'root', 'namespaces', 'ctrl', 'action', 'method', 'desc');
+    }
+
+    private function mergeRouteConfig()
+    {
+        foreach ($this->_route as $route) {
+            $this->createRouteGroup($route);
+        }
+    }
+
+    private function createRouteGroup($route)
+    {
+        $routeConfigPath = base_path("routes/{$route['group']}.php");
+        if (!file_exists($routeConfigPath)) {
+            return;
+        }
+        $routeContent = file_get_contents($routeConfigPath);
+        if (!preg_match("/\/\*+\s?generate config\s?\*+\//", $routeContent)) {
+            $routeContent .= <<<TXT
+
+/******* generate config ********/
+
+TXT;
+        }
+        if (!preg_match("/\/\*+\s?generate router\s?\*+\//", $routeContent)) {
+            $routeContent .= <<<TXT
+
+/******* generate router ********/
+TXT;
+        }
+        $urlPath = str($route['url'])->after('/')->value();
+        $method = $route['method'];
+        $pregUrl = "{$method}\('" . str_replace('/', '\/', $urlPath);
+        if (preg_match("/{$pregUrl}/", $routeContent)) {
+            return;
+        }
+        $name = $route['name'];
+        $ctrl = implode('\\', array_merge($route['namespaces'], [$route['ctrl']]));
+        if (!preg_match("/{$name}/", $routeContent)) {
+            // 创建路由
+            if (!preg_match("/\/\*+\s?generate config\s?\*+\//", $routeContent, $hookMatch)) {
+                $this->error("路由配置，# generate config #不存在");
+                return;
+            }
+            $hook = $hookMatch[0];
+            $plainText = <<<TXT
+
+/*** {$name} start ***/
+if (! function_exists('{$name}')) {
+    function {$name}()
+    {
+    }/*** {$name} end ***/
+}
+
+/******* generate config ********/
+TXT;
+            $routeContent = str_replace($hook, $plainText, $routeContent);
+            if (preg_match("/\/\*+\s?generate router\s?\*+\//", $routeContent, $loaderMatch)) {
+                $hook = $loaderMatch[0];
+                $loaderStr = <<<LOAD
+{$name}();
+
+{$hook}
+LOAD;
+                $routeContent = str_replace($hook, $loaderStr, $routeContent);
+            }
+        }
+        // 获取路由插入点
+        if (!preg_match("/}\/\*+\s?{$name} end\s?\*+\//", $routeContent, $importMatch)) {
+            $this->error("路由配置，插入路由{$route['url']}失败!");
+            return;
+        }
+        $importHook = $importMatch[0];
+        $routeStr = <<<STR
+    // {$route['desc']}
+        Route::{$method}('{$urlPath}', "{$ctrl}@{$route['action']}");
+    }/*** {$name} end ***/
+STR;
+
+        $routeContent = str_replace($importHook, $routeStr, $routeContent);
+
+        file_put_contents($routeConfigPath, $routeContent);
+    }
+
+    private function addMapper(string $type, string $ctrl, string $content)
+    {
+        $mapper = $this->_mapper[$ctrl] ?? [
+            'created' => false,
+            'file' => '',
+            'logic' => '',
+            'func' => [],
+            'request' => []
+        ];
+        if ($type === 'file' && empty($mapper['file'])) {
+            $mapper['file'] = $content;
+        } elseif ($type === 'logic') {
+            $mapper['logic'] = $content;
+        } elseif ($type === 'func') {
+            if (!in_array($content, $mapper['func'])) {
+                $mapper['func'][] = $content;
+            }
+        } elseif ($type === 'request') {
+            $mapper['request'][] = $content;
+        } else {
+            return false;
+        }
+        $this->_mapper[$ctrl] = $mapper;
+        return true;
+    }
+}
diff --git a/src/Console/Commands/RouteToPermission.php b/src/Console/Commands/RouteToPermission.php
new file mode 100644
index 0000000..c8c823a
--- /dev/null
+++ b/src/Console/Commands/RouteToPermission.php
@@ -0,0 +1,86 @@
+<?php
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use App\Domain\Module\System\Model\Permission;
+use App\Domain\Module\System\Model\Role;
+use Illuminate\Console\Command;
+use Route;
+use Str;
+
+class RouteToPermission extends Command
+{
+    /**
+     * The name and signature of the console command.
+     *
+     * @var string
+     */
+    protected $signature = 'route:permission';
+
+    /**
+     * The console command description.
+     *
+     * @var string
+     */
+    protected $description = '根据路由生成权限';
+
+    /**
+     * Create a new command instance.
+     *
+     * @return void
+     */
+    public function __construct()
+    {
+        parent::__construct();
+    }
+
+    /**
+     * Execute the console command.
+     *
+     * @return mixed
+     */
+    public function handle()
+    {
+        $count = 0;
+        $role_count = 0;
+        db_trans(
+            function () use (&$count, &$role_count) {
+                // 添加配置文件中的权限
+                $config = config('user-permission', []);
+                $defaultGuards = array_keys(config('auth.guards'));
+                foreach ($config['permissions'] as $permission) {
+                    $guards = $permission['guard_name'] ?: $defaultGuards;
+                    foreach ($guards as $guard_name) {
+                        Permission::updateOrCreate(
+                            [
+                                'name' => $permission['name'],
+                                'guard_name' => $guard_name
+                            ],
+                            [
+                                'description' => $permission['description'],
+                            ]
+                        );
+                        $count++;
+                    }
+                }
+                foreach ($config['roles'] as $role) {
+                    $guards = $role['guard_name'] ?: $defaultGuards;
+                    foreach ($guards as $guard_name) {
+                        $role['guard_name'] = $guard_name;
+                        Role::updateOrCreate(
+                            [
+                                'name' => $role['name'],
+                                'guard_name' => $guard_name
+                            ],
+                            [
+                                'description' => $role['description'],
+                            ]
+                        );
+                        $role_count++;
+                    }
+                }
+            }
+        );
+        $this->info("{$count}个权限已生成，{$role_count}个角色已生成！");
+    }
+}
diff --git a/src/Console/Commands/UnitTest.php b/src/Console/Commands/UnitTest.php
new file mode 100644
index 0000000..00c2c95
--- /dev/null
+++ b/src/Console/Commands/UnitTest.php
@@ -0,0 +1,107 @@
+<?php
+
+namespace Zeaven\EasySuit\Console\Commands;
+
+use Illuminate\Console\Command;
+use Symfony\Component\Process\Process;
+
+class UnitTest extends Command
+{
+    /**
+     * The name and signature of the console command.
+     *
+     * @var string
+     */
+    protected $signature = 'test:run';
+
+    /**
+     * The console command description.
+     *
+     * @var string
+     */
+    protected $description = '运行 phpunit 测试';
+
+    /**
+     * Create a new command instance.
+     *
+     * @return void
+     */
+    public function __construct()
+    {
+        parent::__construct();
+    }
+
+    /**
+     * Execute the console command.
+     *
+     * @return mixed
+     */
+    public function handle()
+    {
+        $unit = $this->chooseUnits();
+
+        if (!$unit || strtolower($unit) === 'exit') {
+            return $this->warn('退出');
+        } else {
+            $this->runUnit($unit);
+        }
+
+        $this->line('结束');
+    }
+
+    private function chooseUnits()
+    {
+        $dir = base_path('tests');
+        $file_iterator = $this->traverseDir($dir);
+        $files = [];
+        foreach ($file_iterator as $file) {
+            $files[] = $file;
+        }
+        array_unshift($files, 'ALL');
+        array_unshift($files, 'Exit');
+
+        $choose_file = $this->choice('选择要执行的测试任务?', $files, false);
+        return $choose_file;
+    }
+
+    function traverseDir($filedir, $base_path = '')
+    {
+        empty($base_path) && $base_path = $filedir;
+        //打开目录
+        $dir = @dir($filedir);
+        try {
+            //列出目录中的文件
+            while (($file = $dir->read()) !== false) {
+                if (in_array($file, ['.', '..', 'TestCase.php', 'CreatesApplication.php'])) {
+                    continue;
+                } elseif (is_dir($filedir . "/" . $file)) {
+                    //递归遍历子目录
+                    yield from $this->traverseDir($filedir . "/" . $file, $base_path);
+                } elseif (\Str::endsWith($file, '.php')) {
+                    //输出文件完整路径
+                    yield trim(str_replace($base_path, '', $filedir)  . "/" . $file, '/');
+                }
+            }
+        } finally {
+            $dir && $dir->close();
+        }
+    }
+
+    private function runUnit($unit)
+    {
+        $path = ['./vendor/bin/phpunit'];
+        if (strtoupper($unit) !== 'ALL') {
+            $path[] = ' tests/' . $unit;
+        }
+        $this->comment('执行命令：' . implode(' ', $path));
+        $process = new Process($path);
+        $process->setTimeout(60);
+        $process->setIdleTimeout(60);
+        $process->setWorkingDirectory(base_path());
+        $process->start();
+        $iterator = $process->getIterator($process::ITER_SKIP_ERR | $process::ITER_KEEP_OUTPUT);
+        foreach ($iterator as $data) {
+            $this->line($data);
+        }
+    }
+}
diff --git a/src/Console/Commands/stubs/comment.stub b/src/Console/Commands/stubs/comment.stub
new file mode 100644
index 0000000..c9710da
--- /dev/null
+++ b/src/Console/Commands/stubs/comment.stub
@@ -0,0 +1,5 @@
+/**
+ * 
+ * @authors {{author}}
+ * @date    {{date}}
+ */
\ No newline at end of file
diff --git a/src/Console/Commands/stubs/ctrl.stub b/src/Console/Commands/stubs/ctrl.stub
new file mode 100644
index 0000000..f0229b7
--- /dev/null
+++ b/src/Console/Commands/stubs/ctrl.stub
@@ -0,0 +1,20 @@
+<?php
+
+namespace {{namespace}};
+
+use App\Http\Controllers\Controller;
+{{logic_namespace}}
+{{request}}
+
+{{comment}}
+class {{class}} extends Controller
+{
+    protected $logic;
+
+    public function __construct({{logic}} $logic)
+    {
+        $this->logic = $logic;
+    }
+
+    /** #generate function# 删除后将无法自动生成控制器方法 */
+}
diff --git a/src/Console/Commands/stubs/ctx.stub b/src/Console/Commands/stubs/ctx.stub
new file mode 100644
index 0000000..f8b7322
--- /dev/null
+++ b/src/Console/Commands/stubs/ctx.stub
@@ -0,0 +1,13 @@
+<?php
+{{comment}}
+
+namespace {{namespace}};
+
+use App\Domain\Core\DomainContext;
+
+class {{class}} extends DomainContext
+{
+    protected array $services = [
+        // 'name' => 'namespace'
+    ];
+}
diff --git a/src/Console/Commands/stubs/entity.stub b/src/Console/Commands/stubs/entity.stub
new file mode 100644
index 0000000..6bacf4b
--- /dev/null
+++ b/src/Console/Commands/stubs/entity.stub
@@ -0,0 +1,12 @@
+<?php
+{{comment}}
+
+namespace {{namespace}};
+
+use App\Domain\Core\DomainEntity;
+use {{model_class}};
+
+class {{class}} extends DomainEntity
+{
+    const ENTITY = {{model}}::class;
+}
diff --git a/src/Console/Commands/stubs/event.stub b/src/Console/Commands/stubs/event.stub
new file mode 100644
index 0000000..414478b
--- /dev/null
+++ b/src/Console/Commands/stubs/event.stub
@@ -0,0 +1,36 @@
+<?php
+
+namespace {{namespace}};
+
+use Illuminate\Broadcasting\Channel;
+use Illuminate\Broadcasting\InteractsWithSockets;
+use Illuminate\Broadcasting\PresenceChannel;
+use Illuminate\Broadcasting\PrivateChannel;
+use Illuminate\Contracts\Broadcasting\ShouldBroadcast;
+use Illuminate\Foundation\Events\Dispatchable;
+use Illuminate\Queue\SerializesModels;
+
+class {{class}}
+{
+    use Dispatchable, InteractsWithSockets, SerializesModels;
+
+    /**
+     * Create a new event instance.
+     *
+     * @return void
+     */
+    public function __construct()
+    {
+        //
+    }
+
+    /**
+     * Get the channels the event should broadcast on.
+     *
+     * @return \Illuminate\Broadcasting\Channel|array
+     */
+    public function broadcastOn()
+    {
+        // return new PrivateChannel('channel-name');
+    }
+}
diff --git a/src/Console/Commands/stubs/func.stub b/src/Console/Commands/stubs/func.stub
new file mode 100644
index 0000000..98f3058
--- /dev/null
+++ b/src/Console/Commands/stubs/func.stub
@@ -0,0 +1,15 @@
+/**
+     * {{name}}
+     * {{comment}}
+     * @param  {{request}} $request [description]
+     * @return Response
+     */
+    public function {{action}}({{request}} $request{{params}})
+    {
+        {{query}}
+        $result = $this->logic->{{action}}();
+
+        return ok($result);
+    }
+
+    /** #generate function# 删除后将无法自动生成控制器方法 */
diff --git a/src/Console/Commands/stubs/listener.stub b/src/Console/Commands/stubs/listener.stub
new file mode 100644
index 0000000..20fcf36
--- /dev/null
+++ b/src/Console/Commands/stubs/listener.stub
@@ -0,0 +1,31 @@
+<?php
+
+namespace {{namespace}};
+
+use Illuminate\Contracts\Queue\ShouldQueue;
+use Illuminate\Queue\InteractsWithQueue;
+
+{{comment}}
+class {{class}}
+{
+    /**
+     * Create the event listener.
+     *
+     * @return void
+     */
+    public function __construct()
+    {
+        // TODO:
+    }
+
+    /**
+     * Handle the event.
+     *
+     * @param  object  $event
+     * @return void
+     */
+    public function handle($event)
+    {
+        // TODO:
+    }
+}
diff --git a/src/Console/Commands/stubs/logic.stub b/src/Console/Commands/stubs/logic.stub
new file mode 100644
index 0000000..3930062
--- /dev/null
+++ b/src/Console/Commands/stubs/logic.stub
@@ -0,0 +1,10 @@
+<?php
+
+namespace {{namespace}};
+
+{{comment}}
+class {{class}}
+{
+
+    /** #generate function# 删除后将无法自动生成控制器方法 */
+}
\ No newline at end of file
diff --git a/src/Console/Commands/stubs/logic_func.stub b/src/Console/Commands/stubs/logic_func.stub
new file mode 100644
index 0000000..75a55bb
--- /dev/null
+++ b/src/Console/Commands/stubs/logic_func.stub
@@ -0,0 +1,11 @@
+/**
+     * {{name}}
+     * {{comment}}
+     * @return Response
+     */
+    public function {{action}}($params = null)
+    {
+        // TODO:
+    }
+
+    /** #generate function# 删除后将无法自动生成控制器方法 */
diff --git a/src/Console/Commands/stubs/mapper.stub b/src/Console/Commands/stubs/mapper.stub
new file mode 100644
index 0000000..154ca07
--- /dev/null
+++ b/src/Console/Commands/stubs/mapper.stub
@@ -0,0 +1,30 @@
+<?php
+{{comment}}
+
+namespace {{namespace}};
+
+use Zeaven\EasySuit\Http\ResponseMappers\BaseResponseMapper;
+
+class {{class}} extends BaseResponseMapper
+{
+    /**
+     * 属性映射
+     * 'username' => 'user.0.username',
+     *  'user.*' => [
+     *      'name' => 'username',
+     *      'status' => 'status_text'
+     *  ]
+     * @type {Array}
+     */
+    protected $mapper = [
+    ];
+
+    /**
+     * 属性隐藏
+     * 'user.*.username',
+    *  'user.*.mobile'
+     * @type {Array}
+     */
+    protected $hidden = [
+    ];
+}
diff --git a/src/Console/Commands/stubs/model.stub b/src/Console/Commands/stubs/model.stub
new file mode 100644
index 0000000..af50489
--- /dev/null
+++ b/src/Console/Commands/stubs/model.stub
@@ -0,0 +1,11 @@
+<?php
+{{comment}}
+
+namespace {{namespace}};
+
+use App\Domain\Core\Model;
+
+class {{class}} extends Model
+{
+
+}
\ No newline at end of file
diff --git a/src/Console/Commands/stubs/param.stub b/src/Console/Commands/stubs/param.stub
new file mode 100644
index 0000000..2013938
--- /dev/null
+++ b/src/Console/Commands/stubs/param.stub
@@ -0,0 +1,11 @@
+<?php
+{{comment}}
+
+namespace {{namespace}};
+
+use App\Domain\Core\DomainParam;
+
+class {{class}} extends DomainParam
+{
+
+}
\ No newline at end of file
diff --git a/src/Console/Commands/stubs/request.stub b/src/Console/Commands/stubs/request.stub
new file mode 100644
index 0000000..eb80b39
--- /dev/null
+++ b/src/Console/Commands/stubs/request.stub
@@ -0,0 +1,19 @@
+<?php
+
+namespace {{namespace}};
+
+use App\Http\Requests\{{BaseRequest}};
+
+{{comment}}
+class {{class}} extends {{BaseRequest}}
+{
+    /**
+     * 返回参数验证规则.
+     *
+     * @return array
+     */
+    protected function rule(): array
+    {
+        {{params}}
+    }
+}
diff --git a/src/Console/Commands/stubs/service.stub b/src/Console/Commands/stubs/service.stub
new file mode 100644
index 0000000..325c208
--- /dev/null
+++ b/src/Console/Commands/stubs/service.stub
@@ -0,0 +1,12 @@
+<?php
+{{comment}}
+
+namespace {{namespace}};
+
+use App\Domain\Core\DomainService;
+use {{ctx_class}};
+
+class {{class}} extends DomainService
+{
+    const CONTEXT = {{ctx}}::class;
+}
diff --git a/src/Console/Traits/getNameInputTrait.php b/src/Console/Traits/getNameInputTrait.php
new file mode 100644
index 0000000..4647735
--- /dev/null
+++ b/src/Console/Traits/getNameInputTrait.php
@@ -0,0 +1,43 @@
+<?php
+
+namespace Zeaven\EasySuit\Console\Traits;
+
+use Str;
+
+/**
+ *
+ *
+ * @date    2020-06-02 15:33:57
+ * @version $Id$
+ */
+trait getNameInputTrait
+{
+    /**
+     * Get the desired class name from the input.
+     *
+     * @return string
+     */
+    protected function getNameInput()
+    {
+        $name = trim($this->argument('name'));
+        if (Str::contains(static::ROOT_FOLDER, '?')) {
+            $name = Str::replaceArray('?', explode('/', $name), static::ROOT_FOLDER);
+        } else {
+            $name = static::ROOT_FOLDER . $name;
+        }
+
+        if (!Str::endsWith($name, static::SUFFIX)) {
+            $name = $name . static::SUFFIX;
+        }
+        $arr = preg_split('/(\/|\\\\)/', $name);
+        $name = implode(
+            '/',
+            array_map(
+                fn($str) => Str::studly($str),
+                $arr
+            )
+        );
+
+        return $name;
+    }
+}
diff --git a/src/Deployer.php b/src/Deployer.php
new file mode 100644
index 0000000..1d048cc
--- /dev/null
+++ b/src/Deployer.php
@@ -0,0 +1,83 @@
+<?php
+
+/**
+ *
+ * @authors zeaven (zeaven@163.com)
+ * @date    2019-08-06 14:07:23
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit;
+
+use Composer\Script\Event;
+use Composer\Installer\PackageEvent;
+
+class Deployer
+{
+    public static function postDeploy(Event $event)
+    {
+        $env = $event->getArguments()[0] ?? 'local';
+
+        $file_path = '.env.example';
+        $content_lines = file($file_path);
+
+        if ($env !== 'product' && $env !== 'production') {
+            echo '>>>>>>>>>更新环境变量配置文件……' . PHP_EOL;
+            $config = static::configure($env);
+
+            if ($config) {
+                foreach ($content_lines as $line => $content) {
+                    if (empty($content) || strpos($content, '#') !== false) {
+                        continue;
+                    }
+                    [$key] = explode('=', $content);
+
+                    if (isset($config[$key])) {
+                        $content_lines[$line] = "{$key}={$config[$key]}" . PHP_EOL;
+                    }
+                }
+            }
+            file_put_contents('.env', implode('', $content_lines));
+        }
+
+        // static::installPackage();
+        if ($env === 'product' || $env === 'production') {
+            static::optimize();
+            // echo PHP_EOL. '>>>>>>>>>发布sentry版本……'. PHP_EOL;
+            // system('./deploy/sentry.sh');
+        }
+        system('php artisan route:permission'); // 生成权限
+        // system('php artisan queue:restart');    // 重启队列
+        echo PHP_EOL . '>>>>>>>>>发布完成。' . PHP_EOL;
+    }
+
+    protected static function optimize()
+    {
+        echo PHP_EOL . '>>>>>>>>>缓存编译、配置、路由，刷新队列、OpCache……' . PHP_EOL;
+        system('php artisan optimize');
+        system('php artisan config:cache');
+        system('php artisan api:cache');
+        system('php artisan event:cache');
+        // system('phpbrew fpm restart');  // 重启php服务，刷新opcache，需要构建的时候执行，在php代码中无法重启php
+    }
+
+    public static function installPackage()
+    {
+        echo PHP_EOL . '>>>>>>>>>清除laravel 编译缓存……' . PHP_EOL;
+        system('php artisan clear-compiled');
+        // 读取上次文件
+        $md5 = md5_file('composer.lock');
+        $old_md5 = '';
+        if (file_exists('./deploy/deploy.lock')) {
+            $old_md5 = file_get_contents('./deploy/deploy.lock');
+        }
+        if ($old_md5 !== $md5) {
+            echo PHP_EOL . '>>>>>>>>>更新依赖包……' . PHP_EOL;
+            system('php composer.phar install');
+            file_put_contents('./deploy/deploy.lock', $md5);
+        } else {
+            echo PHP_EOL . '>>>>>>>>>dump package……' . PHP_EOL;
+            system('php composer.phar dump');
+        }
+    }
+}
diff --git a/src/Domain/Casts/Aws3CdnUrl.php b/src/Domain/Casts/Aws3CdnUrl.php
new file mode 100644
index 0000000..fd30a4d
--- /dev/null
+++ b/src/Domain/Casts/Aws3CdnUrl.php
@@ -0,0 +1,114 @@
+<?php
+
+/**
+ * Cdn地址转换
+ * 使用
+ * protected $casts = [
+ *     'uri' => CdnUrl::class,  // 转换成cdn地址
+ *     'cover_uri' => CdnUrl::class. ':cdn,true', // 转换成cdn地址并生成有效期访问地址
+ *     'id_card' => CdnUrl::class. ':image,true'， // 转换成image地址并授权访问
+ * ]
+ *
+ * @date    2020-06-19 16:25:27
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Casts;
+
+use Illuminate\Contracts\Database\Eloquent\CastsAttributes;
+use Str;
+use Storage;
+
+class Aws3CdnUrl implements CastsAttributes
+{
+    public static $cloud;
+    // 转换方式，默认cdn，有image还有zip，根据services配置添加其他方式
+    protected $type;
+    // 是否授权访问，默认不授权，true、false，
+    protected $auth;
+
+    public function __construct($type = null, $auth = null)
+    {
+        $this->type = $type ?: '';
+        $this->auth = boolval($auth ?: false);
+        if ($this->auth && empty(static::$cloud)) {
+            static::$cloud = \Storage::cloud();
+        }
+    }
+
+    /**
+     * 将取出的数据进行转换
+     *
+     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  string  $key
+     * @param  mixed  $value
+     * @param  array  $attributes
+     * @return \App\Address
+     */
+    public function get($model, $key, $value, $attributes)
+    {
+        $cdn_host = config("services.cdn.{$this->type}_url", config("services.cdn.url"));
+        $cdn_host = Str::finish($cdn_host, '/');
+        if (is_array($value)) {
+            foreach ($value as $idx => $item) {
+                $value[$idx] = $this->convertUrl($item, $cdn_host);
+            }
+        } else {
+            $value = $this->convertUrl($value, $cdn_host);
+        }
+
+        return $value;
+    }
+
+    private function convertUrl($url, $cdn_host)
+    {
+        $type = $this->type;
+        $url = stripcslashes($url);
+
+        if (blank($url)) {
+            return $url;
+        } elseif (Str::startsWith($url, $cdn_host)) {
+        } elseif (Str::startsWith($url, 'http')) {
+            // 转换 url 地址域名为 cdn 域名
+            $url = preg_replace('/^http.*\.(com|cn|net)\//', $cdn_host, $url);
+        } elseif ($this->auth) {
+            $url = static::$cloud->temporaryUrl($url, now()->addHour());
+        } else {
+            $url = $cdn_host . trim($url, '/');
+        }
+        return $url;
+    }
+
+    /**
+     * 转换成将要进行存储的值
+     *
+     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  string  $key
+     * @param  \App\Address  $value
+     * @param  array  $attributes
+     * @return array
+     */
+    public function set($model, $key, $value, $attributes)
+    {
+        if (is_array($value)) {
+            foreach ($value as $idx => $item) {
+                $item = stripcslashes($item);
+                $item = urldecode($item);
+                $value = preg_replace('/\?.*$/', '', $value);
+                if (Str::startsWith($item, 'http')) {
+                    // 转换 url 地址域名为 cdn 域名
+                    $value[$idx] = preg_replace('/^http.*\.(com|cn|net)/', '', $item);
+                }
+            }
+        } else {
+            $value = stripcslashes($value);
+            $value = urldecode($value);
+            $value = preg_replace('/\?.*$/', '', $value);
+            if (Str::startsWith($value, 'http')) {
+                // 转换 url 地址域名为 cdn 域名
+                $value = preg_replace('/^http.*\.(com|cn|net)/', '', $value);
+            }
+        }
+        return $value;
+    }
+}
diff --git a/src/Domain/Casts/CdnUrl.php b/src/Domain/Casts/CdnUrl.php
new file mode 100644
index 0000000..236548f
--- /dev/null
+++ b/src/Domain/Casts/CdnUrl.php
@@ -0,0 +1,144 @@
+<?php
+
+/**
+ * Cdn地址转换
+ * 使用
+ * protected $casts = [
+ *     'uri' => CdnUrl::class,  // 转换成cdn地址
+ *     'cover_uri' => CdnUrl::class. ':cdn,auth_key', // 转换成cdn地址并生成有效期访问地址
+ *     'id_card' => CdnUrl::class. ':cdn,encrypt'， // 转换成cdn地址并加密，客户端需要解密
+ *     ‘avatar' => CdnUrl::class. ':cdn,auth_key,60' // 转换成cdn地址并裁剪成宽度为60
+ * ]
+ *
+ * @date    2020-06-19 16:25:27
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Casts;
+
+use Illuminate\Contracts\Database\Eloquent\CastsAttributes;
+use Str;
+
+class CdnUrl implements CastsAttributes
+{
+    // 转换方式，默认cdn，有image还有zip，根据services配置添加其他方式
+    protected $type;
+    // 加密方式，默认不加密，有cdn的auth_key，和encrypt
+    protected $auth;
+    // 缩放, 整数，如传入1080，则x-oss-process=image/resize,w_1080,
+    protected $resize;
+
+    public function __construct($type = null, $auth = null, $resize = null)
+    {
+        $this->type = $type;
+        $this->auth = $auth;
+        $this->resize = $resize;
+    }
+
+    /**
+     * 将取出的数据进行转换
+     *
+     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  string  $key
+     * @param  mixed  $value
+     * @param  array  $attributes
+     * @return \App\Address
+     */
+    public function get($model, $key, $value, $attributes)
+    {
+        $cdn_host = config("services.cdn.{$this->type}_url", config("services.cdn.url"));
+        $cdn_host = Str::finish($cdn_host, '/');
+        if (is_array($value)) {
+            foreach ($value as $idx => $item) {
+                $value[$idx] = $this->convertUrl($item, $cdn_host);
+            }
+        } else {
+            $value = $this->convertUrl($value, $cdn_host);
+        }
+
+        return $value;
+    }
+
+    private function convertUrl($url, $cdn_host)
+    {
+        $type = $this->type;
+        $encrypt = $this->auth;
+        $resize = $this->resize;
+        $url = stripcslashes($url);
+        if (blank($url)) {
+            return $url;
+        } elseif (Str::startsWith($url, $cdn_host)) {
+        } elseif (Str::startsWith($url, 'http')) {
+            // 转换 url 地址域名为 cdn 域名
+            $url = preg_replace('/^http.*\.(com|cn)\//', $cdn_host, $url);
+        } else {
+            $url = $cdn_host . trim($url, '/');
+        }
+        // cdn url auth
+        if ($auth_key = config("services.cdn.{$encrypt}")) {
+            $url = static::cdnURLAuth($url);
+        }
+        if ($resize) {
+            $prefix = strpos($url, '?') === false ? '?' : '&';
+            $url .= "{$prefix}x-oss-process=image/resize,w_" . $resize;
+        }
+        if ($encrypt === 'encrypt' && config("services.cdn.encrypt")) {
+            $url = encrypt($url);
+        }
+        return $url;
+    }
+
+    public static function cdnURLAuth(string $url)
+    {
+        $key = config("services.cdn.auth_key");
+        $url = implode(
+            '/',
+            array_map(
+                function ($item) {
+                    return strpos($item, 'http') !== false ? $item : urlencode($item);
+                },
+                explode('/', $url)
+            )
+        );
+        $uri = parse_url($url, PHP_URL_PATH);
+        $timestamp = time() + 3600;
+        $rand = 0; //preg_replace('/\-/', '', Str::uuid()->toString());
+        $uid = 0;
+        $md5hash = md5("{$uri}-{$timestamp}-{$rand}-{$uid}-{$key}");
+        $auth_key = "{$timestamp}-{$rand}-{$uid}-{$md5hash}";
+        return $url . (strpos($url, '?') !== false ? '&' : '?') . "auth_key={$auth_key}";
+    }
+
+    /**
+     * 转换成将要进行存储的值
+     *
+     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  string  $key
+     * @param  \App\Address  $value
+     * @param  array  $attributes
+     * @return array
+     */
+    public function set($model, $key, $value, $attributes)
+    {
+        if (is_array($value)) {
+            foreach ($value as $idx => $item) {
+                $item = stripcslashes($item);
+                $item = urldecode($item);
+                $value = preg_replace('/\?.*$/', '', $value);
+                if (Str::startsWith($item, 'http')) {
+                    // 转换 url 地址域名为 cdn 域名
+                    $value[$idx] = preg_replace('/^http.*\.(com|cn)/', '', $item);
+                }
+            }
+        } else {
+            $value = stripcslashes($value);
+            $value = urldecode($value);
+            $value = preg_replace('/\?.*$/', '', $value);
+            if (Str::startsWith($value, 'http')) {
+                // 转换 url 地址域名为 cdn 域名
+                $value = preg_replace('/^http.*\.(com|cn)/', '', $value);
+            }
+        }
+        return $value;
+    }
+}
diff --git a/src/Domain/Casts/HighRate.php b/src/Domain/Casts/HighRate.php
new file mode 100644
index 0000000..a5035e0
--- /dev/null
+++ b/src/Domain/Casts/HighRate.php
@@ -0,0 +1,46 @@
+<?php
+
+/**
+ * 万分比转换
+ *
+ * @date    2020-07-24 12:07:31
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Casts;
+
+use Illuminate\Contracts\Database\Eloquent\CastsAttributes;
+
+class HighRate implements CastsAttributes
+{
+    /**
+     * 将取出的数据进行转换
+     *
+     * @param \Illuminate\Database\Eloquent\Model $model
+     * @param string $key
+     * @param mixed $value
+     * @param array $attributes
+     * @return array
+     */
+    public function get($model, $key, $value, $attributes)
+    {
+        return _bcdiv($value, 10000, 5);
+    }
+
+    /**
+     * 转换成将要进行存储的值
+     *
+     * @param \Illuminate\Database\Eloquent\Model $model
+     * @param string $key
+     * @param array $value
+     * @param array $attributes
+     * @return string
+     */
+    public function set($model, $key, $value, $attributes)
+    {
+        if (floatval($value) < 1) {
+            return _bcmul($value, 10000, 5);
+        }
+        return $value;
+    }
+}
diff --git a/src/Domain/Casts/Ip.php b/src/Domain/Casts/Ip.php
new file mode 100644
index 0000000..89bba87
--- /dev/null
+++ b/src/Domain/Casts/Ip.php
@@ -0,0 +1,43 @@
+<?php
+
+/**
+ * Ip地址转换器
+ *
+ * @date    2020-06-19 15:57:36
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Casts;
+
+use Illuminate\Contracts\Database\Eloquent\CastsAttributes;
+
+class Ip implements CastsAttributes
+{
+    /**
+     * 将取出的数据进行转换
+     *
+     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  string  $key
+     * @param  mixed  $value
+     * @param  array  $attributes
+     * @return array
+     */
+    public function get($model, $key, $value, $attributes)
+    {
+        return long2ip($value);
+    }
+
+    /**
+     * 转换成将要进行存储的值
+     *
+     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  string  $key
+     * @param  array  $value
+     * @param  array  $attributes
+     * @return string
+     */
+    public function set($model, $key, $value, $attributes)
+    {
+        return ip2long($value);
+    }
+}
diff --git a/src/Domain/Casts/OssImgProcess.php b/src/Domain/Casts/OssImgProcess.php
new file mode 100644
index 0000000..9ef4c8b
--- /dev/null
+++ b/src/Domain/Casts/OssImgProcess.php
@@ -0,0 +1,59 @@
+<?php
+
+/**
+ * oss 图片处理程序
+ *
+ * @date    2020-09-11 09:39:06
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Casts;
+
+use Zeaven\EasySuit\Domain\Casts\CdnUrl;
+use Illuminate\Database\Eloquent\Model;
+
+class OssImgProcess extends CdnUrl
+{
+    public function __construct($type = null, $auth = null)
+    {
+        parent::__construct($type, $auth);
+    }
+    /**
+     * 将取出的数据进行转换
+     *
+     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  string  $key
+     * @param  mixed  $value
+     * @param  array  $attributes
+     * @return \App\Address
+     */
+    public function get($model, $key, $value, $attributes)
+    {
+        $value = parent::get($model, $key, $value, $attributes);
+
+        // 进行剪裁
+        $value = $this->crop($model, $value);
+
+        return $value;
+    }
+
+    /**
+     * 剪裁图片
+     * x-oss-process=image/crop,x_1565,y_274,w_139,h_144
+     * @return [type] [description]
+     */
+    protected function crop(Model $model, string $url)
+    {
+        if (!$model->avatar_location || !isset($model->avatar_location['top'])) {
+            return $value;
+        }
+        ['top' => $y, 'right' => $right, 'bottom' => $bottom, 'left' => $x] = $model->avatar_location ?? [];
+        $x = intval($x);
+        $y = intval($y);
+        $w = intval($right - $x);
+        $h = intval($bottom - $y);
+        $prefix = strpos($url, '?') === false ? '?' : '&';
+
+        return "{$url}{$prefix}x-oss-process=image/crop,x_{$x},y_{$y},w_{$w},h_{$h}";
+    }
+}
diff --git a/src/Domain/Casts/Percent.php b/src/Domain/Casts/Percent.php
new file mode 100644
index 0000000..9cdab72
--- /dev/null
+++ b/src/Domain/Casts/Percent.php
@@ -0,0 +1,46 @@
+<?php
+
+/**
+ * 百分比转换
+ *
+ * @date    2020-07-24 12:07:31
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Casts;
+
+use Illuminate\Contracts\Database\Eloquent\CastsAttributes;
+
+class Percent implements CastsAttributes
+{
+    /**
+     * 将取出的数据进行转换
+     *
+     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  string  $key
+     * @param  mixed  $value
+     * @param  array  $attributes
+     * @return array
+     */
+    public function get($model, $key, $value, $attributes)
+    {
+        return _bcdiv($value, 100);
+    }
+
+    /**
+     * 转换成将要进行存储的值
+     *
+     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  string  $key
+     * @param  array  $value
+     * @param  array  $attributes
+     * @return string
+     */
+    public function set($model, $key, $value, $attributes)
+    {
+        if (floatval($value) <= 1) {
+            return _bcmul($value, 100);
+        }
+        return $value;
+    }
+}
diff --git a/src/Domain/Casts/RedisBitMap.php b/src/Domain/Casts/RedisBitMap.php
new file mode 100644
index 0000000..2bebcce
--- /dev/null
+++ b/src/Domain/Casts/RedisBitMap.php
@@ -0,0 +1,44 @@
+<?php
+
+namespace Zeaven\EasySuit\Domain\Casts;
+
+use Illuminate\Contracts\Database\Eloquent\CastsAttributes;
+
+/**
+ * 字段加密特性
+ *
+ * @date    2020-08-07 10:24:23
+ * @version $Id$
+ */
+class RedisBitMap implements CastsAttributes
+{
+    /**
+     * 将取出的数据进行转换
+     *
+     * @param \Illuminate\Database\Eloquent\Model $model
+     * @param string $key
+     * @param mixed $value
+     * @param array $attributes
+     * @return array
+     */
+    public function get($model, $key, $value, $attributes)
+    {
+        $days = $model->calendar->daysInMonth;
+        $map = $value ? decbin($value) : '';
+        return str_pad($map, $days, '0', STR_PAD_LEFT);
+    }
+
+    /**
+     * 转换成将要进行存储的值
+     *
+     * @param \Illuminate\Database\Eloquent\Model $model
+     * @param string $key
+     * @param array $value
+     * @param array $attributes
+     * @return string
+     */
+    public function set($model, $key, $value, $attributes)
+    {
+        return strlen($value) > 18 ? bindec($value) : $value;
+    }
+}
diff --git a/src/Domain/Casts/Secret.php b/src/Domain/Casts/Secret.php
new file mode 100644
index 0000000..f7aa026
--- /dev/null
+++ b/src/Domain/Casts/Secret.php
@@ -0,0 +1,42 @@
+<?php
+
+namespace Zeaven\EasySuit\Domain\Casts;
+
+use Illuminate\Contracts\Database\Eloquent\CastsAttributes;
+
+/**
+ * 字段加密特性
+ *
+ * @date    2020-08-07 10:24:23
+ * @version $Id$
+ */
+class Secret implements CastsAttributes
+{
+    /**
+     * 将取出的数据进行转换
+     *
+     * @param \Illuminate\Database\Eloquent\Model $model
+     * @param string $key
+     * @param mixed $value
+     * @param array $attributes
+     * @return array
+     */
+    public function get($model, $key, $value, $attributes)
+    {
+        return $value ? decrypt($value) : '';
+    }
+
+    /**
+     * 转换成将要进行存储的值
+     *
+     * @param \Illuminate\Database\Eloquent\Model $model
+     * @param string $key
+     * @param array $value
+     * @param array $attributes
+     * @return string
+     */
+    public function set($model, $key, $value, $attributes)
+    {
+        return $value ? encrypt($value) : '';
+    }
+}
diff --git a/src/Domain/Core/AuthModel.php b/src/Domain/Core/AuthModel.php
new file mode 100644
index 0000000..39e6f1d
--- /dev/null
+++ b/src/Domain/Core/AuthModel.php
@@ -0,0 +1,37 @@
+<?php
+
+namespace Zeaven\EasySuit\Domain\Core;
+
+use Zeaven\EasySuit\Domain\Core\Model as BaseModel;
+use Zeaven\EasySuit\Domain\Traits\Common\ModelUUID;
+use Illuminate\Auth\Authenticatable;
+use Illuminate\Contracts\Auth\Access\Authorizable as AuthorizableContract;
+use Illuminate\Contracts\Auth\Authenticatable as AuthenticatableContract;
+use Illuminate\Foundation\Auth\Access\Authorizable;
+
+/**
+ * laravel 框架基础模型
+ *
+ * @mixin \Eloquent
+ * @method static \Illuminate\Database\Eloquent\Builder|\App\Commons\Models\Model newModelQuery()
+ * @method static \Illuminate\Database\Eloquent\Builder|\App\Commons\Models\Model newQuery()
+ * @method static \Illuminate\Database\Eloquent\Builder|\App\Commons\Models\Model query()
+ */
+class AuthModel extends BaseModel implements
+    AuthorizableContract,
+    AuthenticatableContract
+{
+    use Authenticatable;
+    use Authorizable;
+    use ModelUUID;
+
+    /**
+     * Get the name of the unique identifier for the user.
+     *
+     * @return string
+     */
+    public function getAuthIdentifierName()
+    {
+        return 'uid';
+    }
+}
diff --git a/src/Domain/Core/DomainContext.php b/src/Domain/Core/DomainContext.php
new file mode 100644
index 0000000..4f2a9fc
--- /dev/null
+++ b/src/Domain/Core/DomainContext.php
@@ -0,0 +1,99 @@
+<?php
+
+/**
+ * 领域上下文
+ *
+ * @date    2020-06-23 11:11:46
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Core;
+
+use Zeaven\EasySuit\Domain\Core\DomainService;
+use Zeaven\EasySuit\Domain\Core\Model;
+
+abstract class DomainContext
+{
+    protected array $services = [];
+    protected static $booted = [];
+    protected $domainName;
+    protected $contextUser;
+
+    public function __construct()
+    {
+        $this->domainName = str(get_class($this))->before('Context') . 'Context\\';
+        static::bindings($this->services, $this->domainName);
+    }
+
+    private static function bindings(array $services, string $domain = '')
+    {
+        if (isset(static::$booted[static::class])) {
+            return;
+        }
+        static::$booted[static::class] = true;
+        $container = app();
+        foreach ($services as $key => $class) {
+            if (is_numeric($key)) {
+                continue;
+            }
+            // 如果没有使用Octane加速，可改为单例绑定
+            if (php_sapi_name() === 'cli') {
+                $container->bindIf(
+                    $domain . $key,
+                    function () use ($class) {
+                        return resolve($class);
+                    }
+                );
+            } else {
+                $container->scopedIf(
+                    $domain . $key,
+                    function () use ($class) {
+                        return resolve($class);
+                    }
+                );
+            }
+        }
+    }
+
+    public function __get($service)
+    {
+        if ($service === 'user') {
+            return $this->user();
+        }
+        $instance = resolve($this->domainName . $service);
+        if ($instance instanceof DomainService) {
+            $instance->setUser($this->contextUser);
+        }
+
+        return $instance;
+    }
+
+    /**
+     * 设置当前上下文登录用户
+     * @return [type] [description]
+     */
+    public function setUser(Model $user)
+    {
+        $this->contextUser = $user;
+    }
+
+    /**
+     * 获取当前上下文登录用户
+     */
+    public function user(string $uid = null)
+    {
+        if ($uid && $this->contextUser && $this->contextUser->uid === $uid) {
+            return $this->contextUser;
+        }
+        if ($uid) {
+            $guard = auth()->getDefaultDriver();
+            $provider = config("auth.guards.{$guard}.provider");
+            $model = config("auth.providers.{$provider}.model");
+            $this->contextUser = (new $model())->whereUid($uid)->first();
+        }
+        if ($this->contextUser) {
+            return $this->contextUser;
+        }
+        return $this->contextUser = auth()->user();
+    }
+}
diff --git a/src/Domain/Core/DomainEntity.php b/src/Domain/Core/DomainEntity.php
new file mode 100644
index 0000000..d6afb34
--- /dev/null
+++ b/src/Domain/Core/DomainEntity.php
@@ -0,0 +1,40 @@
+<?php
+
+/**
+ * 实体/仓储
+ *
+ * @date    2019-03-06 13:53:21
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Core;
+
+abstract class DomainEntity
+{
+    protected static $instance;
+    protected static $entityInstance = [];
+    public function __call($method, $paramters)
+    {
+        throw_on(!defined('static::ENTITY'), 'server domain error');
+        if (!isset(static::$entityInstance[static::class])) {
+            if (php_sapi_name() === 'cli') {
+                $instance = app(static::ENTITY);
+            } else {
+                static::$entityInstance[static::class] = app(static::ENTITY);
+                $instance = static::$entityInstance[static::class];
+            }
+        }
+        if ($instance) {
+            return $instance->$method(...$paramters);
+        }
+        throw_e('server domain error');
+    }
+
+    public static function __callStatic(string $method, array $paramters)
+    {
+        if (!static::$instance) {
+            static::$instance = new static();
+        }
+        return static::$instance->{$method}(...$paramters);
+    }
+}
diff --git a/src/Domain/Core/DomainParam.php b/src/Domain/Core/DomainParam.php
new file mode 100644
index 0000000..682877c
--- /dev/null
+++ b/src/Domain/Core/DomainParam.php
@@ -0,0 +1,169 @@
+<?php
+
+/**
+ * 参数基类
+ *
+ * @date    2020-06-05 15:51:26
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Core;
+
+use ArrayAccess;
+use JsonSerializable;
+
+abstract class DomainParam implements
+    ArrayAccess,
+    JsonSerializable
+{
+    protected $attributes;
+
+    public function __construct(array $attributes = [])
+    {
+        $this->attributes = $attributes;
+        $this->fill($attributes);
+    }
+
+    protected function fill(array $attributes)
+    {
+        foreach ($attributes as $attr => $value) {
+            if (property_exists($this, $attr)) {
+                $this->{$attr} = $value;
+            }
+        }
+    }
+
+    protected function getAttribute($key)
+    {
+        if (!$key || !isset($this->attributes[$key])) {
+            return;
+        }
+        return $this->attributes[$key];
+    }
+
+    protected function setAttribute($key, $value)
+    {
+        $this->attributes[$key] = $value;
+    }
+
+    /**
+     * Dynamically retrieve attributes on the model.
+     *
+     * @param  string  $key
+     * @return mixed
+     */
+    public function __get($key)
+    {
+        return $this->getAttribute($key);
+    }
+
+    /**
+     * Dynamically set attributes on the model.
+     *
+     * @param  string  $key
+     * @param  mixed  $value
+     * @return void
+     */
+    public function __set($key, $value)
+    {
+        $this->setAttribute($key, $value);
+    }
+
+    /**
+     * Determine if the given attribute exists.
+     *
+     * @param  mixed  $offset
+     * @return bool
+     */
+    public function offsetExists($offset)
+    {
+        if (property_exists($this, $offset)) {
+            return ! is_null($this->{$offset});
+        } else {
+            return ! is_null($this->getAttribute($offset));
+        }
+    }
+
+    /**
+     * Get the value for a given offset.
+     *
+     * @param  mixed  $offset
+     * @return mixed
+     */
+    public function offsetGet($offset)
+    {
+        if (property_exists($this, $offset)) {
+            return $this->{$offset};
+        }
+        return $this->getAttribute($offset);
+    }
+
+    /**
+     * Set the value for a given offset.
+     *
+     * @param  mixed  $offset
+     * @param  mixed  $value
+     * @return void
+     */
+    public function offsetSet($offset, $value)
+    {
+        if (property_exists($this, $offset)) {
+            $this->{$offset} = $value;
+        } else {
+            $this->setAttribute($offset, $value);
+        }
+    }
+
+    /**
+     * Unset the value for a given offset.
+     *
+     * @param  mixed  $offset
+     * @return void
+     */
+    public function offsetUnset($offset)
+    {
+        if (property_exists($this, $offset)) {
+            $this->{$offset} = null;
+        }
+        unset($this->attributes[$offset]);
+    }
+
+    /**
+     * Determine if an attribute or relation exists on the model.
+     *
+     * @param  string  $key
+     * @return bool
+     */
+    public function __isset($key)
+    {
+        return $this->offsetExists($key);
+    }
+
+    /**
+     * Unset an attribute on the model.
+     *
+     * @param  string  $key
+     * @return void
+     */
+    public function __unset($key)
+    {
+        $this->offsetUnset($key);
+    }
+
+    public function toArray(): array
+    {
+        $vars = get_object_vars($this);
+        unset($vars['attributes']);
+        return $vars + $this->attributes;
+    }
+
+    /**
+     * Convert the object into something JSON serializable.
+     *
+     * @return array
+     */
+    public function jsonSerialize()
+    {
+        return $this->toArray();
+    }
+}
diff --git a/src/Domain/Core/DomainService.php b/src/Domain/Core/DomainService.php
new file mode 100644
index 0000000..6dcb400
--- /dev/null
+++ b/src/Domain/Core/DomainService.php
@@ -0,0 +1,64 @@
+<?php
+
+/**
+ * 领域服务基础
+ *
+ * @date    2020-06-23 10:42:57
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Core;
+
+use Zeaven\EasySuit\Domain\Core\Model;
+use Str;
+
+abstract class DomainService
+{
+    protected $config = [];
+    protected $ctx;
+    protected static $booteds = [];
+
+    public function __construct()
+    {
+        $key = defined('static::CONFIG') ? static::CONFIG : '';
+        if ($key) {
+            $this->config = config('common.domain.' . $key);
+        }
+        $ctx = defined('static::CONTEXT') ? static::CONTEXT : '';
+        if ($ctx) {
+            $this->ctx = new $ctx();
+        }
+        if (method_exists($this, 'initialize')) {
+            $this->initialize();
+        }
+        if (!isset(static::$booteds[static::class])) {
+            static::$booteds[static::class] = true;
+            static::booted();
+        }
+    }
+
+    protected static function booted()
+    {
+    }
+
+    public function setUser(Model $user)
+    {
+        if ($this->ctx) {
+            $this->ctx->setUser($user);
+        }
+        return $this;
+    }
+
+    public function __get($entity)
+    {
+        if ($entity === 'user' && $this->ctx) {
+            return $this->ctx->user;
+        }
+        $entityName = Str::studly($entity);
+        $entityClass =  str_replace('Service\\' . class_basename(static::class), 'Entity\\', static::class) . $entityName;
+
+        throw_on(!class_exists($entityClass), 'Entity not exists!');
+
+        return resolve($entityClass);
+    }
+}
diff --git a/src/Domain/Core/JwtModel.php b/src/Domain/Core/JwtModel.php
new file mode 100644
index 0000000..f680716
--- /dev/null
+++ b/src/Domain/Core/JwtModel.php
@@ -0,0 +1,39 @@
+<?php
+
+namespace Zeaven\EasySuit\Domain\Core;
+
+use Tymon\JWTAuth\Contracts\JWTSubject;
+
+/**
+ * laravel 框架基础模型
+ *
+ * @mixin \Eloquent
+ * @method static \Illuminate\Database\Eloquent\Builder|\App\Commons\Models\Model newModelQuery()
+ * @method static \Illuminate\Database\Eloquent\Builder|\App\Commons\Models\Model newQuery()
+ * @method static \Illuminate\Database\Eloquent\Builder|\App\Commons\Models\Model query()
+ */
+class JwtModel extends AuthModel implements JWTSubject
+{
+
+    /**
+     * Get the identifier that will be stored in the subject claim of the JWT.
+     *
+     * @return mixed
+     */
+    public function getJWTIdentifier()
+    {
+        return $this->{$this->getAuthIdentifierName()};
+    }
+
+    /**
+     * Return a key value array, containing any custom claims to be added to the JWT.
+     *
+     * @return array
+     */
+    public function getJWTCustomClaims()
+    {
+        return [
+            'type' => strtolower(class_basename(static::class))
+        ];
+    }
+}
diff --git a/src/Domain/Core/Model.php b/src/Domain/Core/Model.php
new file mode 100644
index 0000000..1e13645
--- /dev/null
+++ b/src/Domain/Core/Model.php
@@ -0,0 +1,56 @@
+<?php
+
+namespace Zeaven\EasySuit\Domain\Core;
+
+use Str;
+use DateTimeInterface;
+use Illuminate\Support\Facades\DB;
+use Zeaven\EasySuit\Domain\Traits\Sortable\AutoSortable;
+use Illuminate\Database\Eloquent\Model as BaseModel;
+
+/**
+ * laravel 框架基础模型
+ *
+ * @mixin \Eloquent
+ * @method static \Illuminate\Database\Eloquent\Builder|\App\Commons\Models\Model newModelQuery()
+ * @method static \Illuminate\Database\Eloquent\Builder|\App\Commons\Models\Model newQuery()
+ * @method static \Illuminate\Database\Eloquent\Builder|\App\Commons\Models\Model query()
+ */
+class Model extends BaseModel
+{
+    use AutoSortable;
+
+    protected $guarded = ['id'];
+    protected $connection = 'mysql';
+    protected $perPage = 15;
+
+    /**
+     * 将表名映射为单数，如:模型 User => 表 user
+     *
+     * @return string
+     */
+    // public function getTable()
+    // {
+    //     return $this->table ?? Str::snake(class_basename($this));
+    // }
+
+    /**
+     * Prepare a date for array / JSON serialization.
+     * 序列化日期格式
+     * @param  \DateTimeInterface  $date
+     * @return string
+     */
+    protected function serializeDate(DateTimeInterface $date)
+    {
+        return $date->format('Y-m-d H:i:s');
+    }
+
+    /**
+     * 批量导入数据
+     * @param array $data [description]
+     */
+    public function addAll(array $data)
+    {
+        return DB::table($this->getTable())->insert($data);
+    }
+}
diff --git a/src/Domain/Core/ModelView.php b/src/Domain/Core/ModelView.php
new file mode 100644
index 0000000..b52b76b
--- /dev/null
+++ b/src/Domain/Core/ModelView.php
@@ -0,0 +1,19 @@
+<?php
+
+namespace Zeaven\EasySuit\Domain\Core;
+
+use Zeaven\EasySuit\Domain\Core\Model as BaseModel;
+use Zeaven\EasySuit\Domain\Traits\Sortable\AutoSortable;
+
+/**
+ * laravel 框架基础模型
+ *
+ * @mixin \Eloquent
+ * @method static \Illuminate\Database\Eloquent\Builder|\App\Commons\Models\Model newModelQuery()
+ * @method static \Illuminate\Database\Eloquent\Builder|\App\Commons\Models\Model newQuery()
+ * @method static \Illuminate\Database\Eloquent\Builder|\App\Commons\Models\Model query()
+ */
+class ModelView extends BaseModel
+{
+    protected $connection = 'mysql_view';
+}
diff --git a/src/Domain/Core/Pivot.php b/src/Domain/Core/Pivot.php
new file mode 100644
index 0000000..e965e98
--- /dev/null
+++ b/src/Domain/Core/Pivot.php
@@ -0,0 +1,43 @@
+<?php
+
+namespace Zeaven\EasySuit\Domain\Core;
+
+use Illuminate\Database\Eloquent\Relations\Pivot as BasePivot;
+use Str;
+use DateTimeInterface;
+
+/**
+ * laravel 框架基础模型
+ *
+ * @mixin \Eloquent
+ * @method static \Illuminate\Database\Eloquent\Builder|\App\Commons\Models\Model newModelQuery()
+ * @method static \Illuminate\Database\Eloquent\Builder|\App\Commons\Models\Model newQuery()
+ * @method static \Illuminate\Database\Eloquent\Builder|\App\Commons\Models\Model query()
+ */
+class Pivot extends BasePivot
+{
+    protected $guarded = ['id'];
+    protected $connection = 'mysql';
+    protected $perPage = 10;
+
+    /**
+     * Get the table associated with the model.
+     *
+     * @return string
+     */
+    public function getTable()
+    {
+        return $this->table ?? Str::snake(class_basename($this));
+    }
+
+    /**
+     * Prepare a date for array / JSON serialization.
+     *
+     * @param  \DateTimeInterface  $date
+     * @return string
+     */
+    protected function serializeDate(DateTimeInterface $date)
+    {
+        return $date->format('Y-m-d H:i:s');
+    }
+}
diff --git a/src/Domain/Core/UUIDModel.php b/src/Domain/Core/UUIDModel.php
new file mode 100644
index 0000000..83873c0
--- /dev/null
+++ b/src/Domain/Core/UUIDModel.php
@@ -0,0 +1,32 @@
+<?php
+
+/**
+ * UUIDModel.php
+ *
+ * Author: Guo
+ * Email jonasyeah@163.com
+ *
+ * Date:   2019-08-16 15:00
+ */
+
+namespace Zeaven\EasySuit\Domain\Core;
+
+use Zeaven\EasySuit\Domain\Core\Model as BaseModel;
+use Zeaven\EasySuit\Domain\Traits\Common\ModelUUID;
+
+/**
+ * Zeaven\EasySuit\Domain\Core\UUIDModel
+ *
+ * @method static \Illuminate\Database\Eloquent\Builder|\Zeaven\EasySuit\Domain\Core\UUIDModel newModelQuery()
+ * @method static \Illuminate\Database\Eloquent\Builder|\Zeaven\EasySuit\Domain\Core\UUIDModel newQuery()
+ * @method static \Illuminate\Database\Eloquent\Builder|\Zeaven\EasySuit\Domain\Core\UUIDModel query()
+ * @mixin \Eloquent
+ */
+class UUIDModel extends BaseModel
+{
+    use ModelUUID;
+
+    // 采用uuid作为主键id，方便数据迁移
+    protected $keyType = 'string';
+    public $incrementing = false;
+}
diff --git a/src/Domain/Traits/Appendable/GenderText.php b/src/Domain/Traits/Appendable/GenderText.php
new file mode 100644
index 0000000..a5ef01a
--- /dev/null
+++ b/src/Domain/Traits/Appendable/GenderText.php
@@ -0,0 +1,45 @@
+<?php
+
+/**
+ * 类名必须符合规则：{表名}{操作}Trait，如标签管理=TagMgrTrait，课件查询=coursewareQueryTrait
+ * 禁止如下命名：TagTrait，TagUpdateCreateTrait
+ * 方法参数包涵数组的，必须标明数据包括的属性
+ * create time: 2019-12-13 11:46:55
+ * create by:
+ */
+
+namespace Zeaven\EasySuit\Domain\Traits\Appendable;
+
+use Illuminate\Database\Eloquent\Casts\Attribute;
+
+/**
+ * 针对性别字段做转换
+ * const GENDERS = ['未知', '男', '女'] // 定义转换内容
+ */
+trait GenderText
+{
+    protected function initializeGenderText()
+    {
+        $this->append('gender_text');
+    }
+
+    private function getGenders()
+    {
+        return defined('static::GENDER') ? static::GENDER : ['未知','男','女'];
+    }
+
+    private function getGenderMin()
+    {
+        return defined('static::GENDER_MIN') ? static::GENDER_MIN : 0;
+    }
+
+    protected function genderText(): Attribute
+    {
+        $min = $this->getGenderMin();
+        $types = $this->getGenders();
+        return new Attribute(
+            get: fn ($_, $attributes) => $types[intval($attributes['gender'] ?? 0) - $min] ?? '',
+            set: fn ($value) => ['gender' => $min + (array_search($value, $types) ?: 0)],
+        );
+    }
+}
diff --git a/src/Domain/Traits/Appendable/StatusText.php b/src/Domain/Traits/Appendable/StatusText.php
new file mode 100644
index 0000000..2af8b22
--- /dev/null
+++ b/src/Domain/Traits/Appendable/StatusText.php
@@ -0,0 +1,43 @@
+<?php
+
+/**
+ * 订单状态
+ *
+ * @date    2019-10-30 09:24:58
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Traits\Appendable;
+
+use Illuminate\Database\Eloquent\Casts\Attribute;
+
+/**
+ * 针对model中某一个状态字段做转换
+ */
+trait StatusText
+{
+    protected function initializeStatusText()
+    {
+        $this->append('status_text');
+    }
+
+    private function getStatus()
+    {
+        return defined('static::STATUS') ? static::STATUS : [];
+    }
+
+    private function getStatusMin()
+    {
+        return defined('static::STATUS_MIN') ? static::STATUS_MIN : 0;
+    }
+
+    protected function statusText(): Attribute
+    {
+        $min = $this->getStatusMin();
+        $types = $this->getStatus();
+        return new Attribute(
+            get: fn ($_, $attributes) => $types[intval($attributes['status'] ?? -99) - $min] ?? '',
+            set: fn ($value) => ['status' => $min + (array_search($value, $types) ?: 0)],
+        );
+    }
+}
diff --git a/src/Domain/Traits/Appendable/TypeText.php b/src/Domain/Traits/Appendable/TypeText.php
new file mode 100644
index 0000000..c4be2f5
--- /dev/null
+++ b/src/Domain/Traits/Appendable/TypeText.php
@@ -0,0 +1,45 @@
+<?php
+
+/**
+ * 类名必须符合规则：{表名}{操作}Trait，如标签管理=TagMgrTrait，课件查询=coursewareQueryTrait
+ * 禁止如下命名：TagTrait，TagUpdateCreateTrait
+ * 方法参数包涵数组的，必须标明数据包括的属性
+ * create time: 2019-12-13 11:46:55
+ * create by:
+ */
+
+namespace Zeaven\EasySuit\Domain\Traits\Appendable;
+
+use Illuminate\Database\Eloquent\Casts\Attribute;
+
+/**
+ * 针对性别字段做转换
+ * const GENDERS = ['未知', '男', '女'] // 定义转换内容
+ */
+trait TypeText
+{
+    protected function initializeTypeText()
+    {
+        $this->append('type_text');
+    }
+
+    private function getTypes()
+    {
+        return defined('static::TYPES') ? static::TYPES : [];
+    }
+
+    private function getTypesMin()
+    {
+        return defined('static::TYPES_MIN') ? static::TYPES_MIN : 0;
+    }
+
+    protected function typeText(): Attribute
+    {
+        $min = $this->getTypesMin();
+        $types = $this->getTypes();
+        return new Attribute(
+            get: fn ($_, $attributes) => $types[intval($attributes['type'] ?? -99) - $min] ?? '',
+            set: fn ($value) => ['type' => $min + (array_search($value, $types) ?: 0)],
+        );
+    }
+}
diff --git a/src/Domain/Traits/Common/ModelUUID.php b/src/Domain/Traits/Common/ModelUUID.php
new file mode 100644
index 0000000..7547a04
--- /dev/null
+++ b/src/Domain/Traits/Common/ModelUUID.php
@@ -0,0 +1,30 @@
+<?php
+
+/**
+ * Model UUID 特性
+ * @date    2021-01-22 08:59:33
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Traits\Common;
+
+use Zeaven\EasySuit\Domain\Core\Model;
+use Str;
+use Hidehalo\Nanoid\Client;
+
+trait ModelUUID
+{
+    protected static function bootModelUUID()
+    {
+        static::creating(function (Model &$model) {
+            if (empty($model->uid)) {
+                // $model->uid = Str::orderedUuid()->toString();
+                $client = new Client();
+
+                # default random generator
+                $model->uid = $client->formattedId('0123456789abcdefghijklmnopqrstuvwxyz', 21);
+                // $model->uid = $client->generateId(21);
+            }
+        });
+    }
+}
diff --git a/src/Domain/Traits/DomainMgr/DomainManageable.php b/src/Domain/Traits/DomainMgr/DomainManageable.php
new file mode 100644
index 0000000..90cd97c
--- /dev/null
+++ b/src/Domain/Traits/DomainMgr/DomainManageable.php
@@ -0,0 +1,132 @@
+<?php
+
+namespace Zeaven\EasySuit\Domain\Traits\DomainMgr;
+
+use Zeaven\EasySuit\Domain\Core\DomainEntity;
+use Zeaven\EasySuit\Domain\Traits\Sortable\Sortable;
+use Arr;
+use Illuminate\Database\Eloquent\Model;
+use Str;
+
+/**
+ * 领域基础管理特性
+ * 在领域引用此特性，添加常量配置如下：
+ * const ENTITYS = [
+ * 'feedback' => Feedback::class,
+ * ];
+ *
+ * 将提供对feedback模型的crud功能，如
+ * 1. createFeedback(array $data)
+ * 2. queryFeedback(array $option), $option => ['where' => '', 'select' => '']
+ * 3. getFeedback(int $id)
+ * 4. updateFeedback(int $id, array $data)
+ * 5. deleteFeedback(int $id)
+ *
+ *
+ * @date    2020-07-16 13:07:47
+ * @version $Id$
+ */
+trait DomainManageable
+{
+    protected static function getDomainManageables()
+    {
+        static $managers;
+        if (empty($managers)) {
+            $managers = defined('static::ENTITYS') ? static::ENTITYS : [];
+        }
+        return $managers;
+    }
+
+    public function __call(string $method, array $arguments)
+    {
+        $managerMethods = static::getDomainManageables();
+        $name = preg_replace('/(create|query|get|update|delete|paginate)/', '', $method);
+        $key = Str::camel($name);
+        throw_on(!isset($managerMethods[$key]), 'Model not exists：' . $key);
+        $model = $managerMethods[$key];
+        $manageable = new $model();
+        // 判断entity是否存在对应方法
+        if (method_exists($manageable, $method)) {
+            return $manageable->{$method}(...$arguments);
+        }
+
+        $method = str_replace($name, 'Manageable', $method);
+
+        throw_on(!method_exists($this, $method), "Model method not found：{$method}");
+
+        return $this->{$method}($manageable, ...$arguments);
+    }
+
+    public function createManageable($manageable, array $data)
+    {
+        return $manageable->create($data);
+    }
+
+    protected function buildManageable($manageable, array $option = [])
+    {
+        $traits = class_uses($manageable);
+        $where = Arr::get($option, 'where');
+        $orWhere = Arr::get($option, 'or_where');
+        $select = Arr::get($option, 'select');
+        $order_bys = Arr::get($option, 'order_by');
+        return $manageable->when(
+            $where,
+            function ($query, $where) {
+                $query->where($where);
+            }
+        )
+            ->when(
+                $orWhere,
+                function ($query, $orWhere) {
+                    $query->where($orWhere);
+                }
+            )
+            ->selectWhen($select)
+            ->when(
+                !array_key_exists(Sortable::class, $traits),
+                function ($query) use ($order_bys) {
+                    if (blank($order_bys)) {
+                        $query->latest();
+                    } else {
+                        foreach ($order_bys as $order_column => $order_type) {
+                            $query->orderBy($order_column, $order_type);
+                        }
+                    }
+                }
+            );
+    }
+
+    /**
+     * $option => ['select' => [], 'where' => [], 'order_by' => []]
+     * @param  Model  $manageable [description]
+     * @param  array  $option     [description]
+     * @return [type]             [description]
+     */
+    public function queryManageable($manageable, array $option = [])
+    {
+        return $this->buildManageable($manageable, $option)
+            ->get();
+    }
+
+    public function paginateManageable($manageable, array $option = [])
+    {
+        $size = Arr::pull($option, 'size', request()->get('size', 15));
+        return $this->buildManageable($manageable, $option)
+            ->paginate($size);
+    }
+
+    public function getManageable($manageable, int $id, array $columns = ['*'])
+    {
+        return $manageable->whereKey($id)->firstOrFail($columns);
+    }
+
+    public function updateManageable($manageable, int $id, array $data)
+    {
+        return $this->getManageable($manageable, $id)->update($data);
+    }
+
+    public function deleteManageable($manageable, int $id)
+    {
+        return $this->getManageable($manageable, $id)->delete();
+    }
+}
diff --git a/src/Domain/Traits/Locational/Locational.php b/src/Domain/Traits/Locational/Locational.php
new file mode 100644
index 0000000..7535897
--- /dev/null
+++ b/src/Domain/Traits/Locational/Locational.php
@@ -0,0 +1,22 @@
+<?php
+
+/**
+ *
+ *
+ * @date    2019-09-24 12:36:52
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Traits\Locational;
+
+/**
+ * 省市区联动，使用国家统一格式
+ */
+trait Locational
+{
+    public static function bootLocational()
+    {
+        // 添加查询作用域
+        static::addGlobalScope(new LocationalScope());
+    }
+}
diff --git a/src/Domain/Traits/Locational/LocationalScope.php b/src/Domain/Traits/Locational/LocationalScope.php
new file mode 100644
index 0000000..67bd8fb
--- /dev/null
+++ b/src/Domain/Traits/Locational/LocationalScope.php
@@ -0,0 +1,110 @@
+<?php
+
+/**
+ *
+ *
+ * @date    2019-09-24 12:38:12
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Traits\Locational;
+
+use Illuminate\Database\Eloquent\Builder;
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\Scope;
+use DB;
+
+class LocationalScope implements Scope
+{
+    protected $extensions = ['whereProvince', 'whereCity', 'whereArea', 'whereTown', 'anyLocation'];
+
+    /**
+     * Apply the scope to a given Eloquent query builder.
+     *
+     * @param  \Illuminate\Database\Eloquent\Builder  $builder
+     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @return void
+     */
+    public function apply(Builder $builder, Model $model)
+    {
+        $builder->where('code', 'like', '__0000')->select(['code','name']);
+    }
+
+    /**
+     * Extend the query builder with the needed functions.
+     *
+     * @param  \Illuminate\Database\Eloquent\Builder  $builder
+     * @return void
+     */
+    public function extend(Builder $builder)
+    {
+        foreach ($this->extensions as $extension) {
+            $this->{"add{$extension}"}($builder);
+        }
+    }
+
+    protected function addWhereProvince(Builder $builder)
+    {
+        $builder->macro('whereProvince', function (Builder $builder, $province = null) {
+            $builder->withoutGlobalScope($this)->when(
+                $province,
+                function ($query, $province) {
+                    $query->whereCode($province);
+                },
+                function ($query) {
+                    $query->where('code', 'like', '__0000');
+                }
+            )->select(['code','name']);
+            return $builder;
+        });
+    }
+
+    protected function addWhereCity(Builder $builder)
+    {
+        $builder->macro('whereCity', function (Builder $builder, $province = null) {
+            $builder->withoutGlobalScope($this)->when(
+                $province,
+                function ($query, $province) {
+                    $query->where('code', '<>', $province)
+                        ->where('code', 'like', substr($province, 0, 2) . '__00');
+                },
+                function ($query) {
+                    $query->where('code', 'like', '____00');
+                }
+            )->select(['code','name']);
+            return $builder;
+        });
+    }
+
+    protected function addWhereArea(Builder $builder)
+    {
+        $builder->macro('whereArea', function (Builder $builder, $city = null) {
+            $builder->withoutGlobalScope($this)->when(
+                $city,
+                function ($query, $city) {
+                    $query->where('code', '<>', $city)
+                        ->where('code', 'like', substr($city, 0, 4) . '__');
+                },
+                function ($query) {
+                    $query->where('code', 'not like', '%00');
+                }
+            )->select(['code','name']);
+            return $builder;
+        });
+    }
+
+    protected function addWhereTown(Builder $builder)
+    {
+        $builder->macro('whereTown', function (Builder $builder, $area) {
+            return DB::table('location_streets')->where('code', 'like', "{$area}%")->select(['code','name']);
+        });
+    }
+
+    protected function addAnyLocation(Builder $builder)
+    {
+        $builder->macro('anyLocation', function (Builder $builder) {
+            $builder->withoutGlobalScope($this);
+            return $builder;
+        });
+    }
+}
diff --git a/src/Domain/Traits/MobileMask/MobileMask.php b/src/Domain/Traits/MobileMask/MobileMask.php
new file mode 100644
index 0000000..4a01d7f
--- /dev/null
+++ b/src/Domain/Traits/MobileMask/MobileMask.php
@@ -0,0 +1,31 @@
+<?php
+
+/**
+ * 手机号遮掩
+ *
+ * @date    2020-06-19 16:21:39
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Traits\MobileMask;
+
+use Zeaven\EasySuit\Domain\Traits\MobileMask\MobileMaskScope;
+use Illuminate\Database\Eloquent\Casts\Attribute;
+
+trait MobileMask
+{
+    public static function bootMobileMask()
+    {
+        // 添加查询作用域
+        static::addGlobalScope(new MobileMaskScope());
+    }
+
+    protected function mobile(): Attribute
+    {
+        $scope = static::getGlobalScope(MobileMaskScope::class);
+        return new Attribute(
+            get: fn ($value) => empty($scope->_mobileMask) ? $value
+                : preg_replace('/(\d{3})(\d{4})(\d{1,})$/', '$1' . str_repeat($scope->_mobileMask, 4) . '$3', $value),
+        );
+    }
+}
diff --git a/src/Domain/Traits/MobileMask/MobileMaskScope.php b/src/Domain/Traits/MobileMask/MobileMaskScope.php
new file mode 100644
index 0000000..5e4434b
--- /dev/null
+++ b/src/Domain/Traits/MobileMask/MobileMaskScope.php
@@ -0,0 +1,53 @@
+<?php
+
+/**
+ *
+ *
+ * @date    2019-09-24 12:38:12
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Traits\MobileMask;
+
+use Illuminate\Database\Eloquent\Builder;
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\Scope;
+
+class MobileMaskScope implements Scope
+{
+    protected $extensions = ['MobileMask'];
+    public $_mobileMask = '';
+
+    /**
+     * Apply the scope to a given Eloquent query builder.
+     *
+     * @param  \Illuminate\Database\Eloquent\Builder  $builder
+     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @return void
+     */
+    public function apply(Builder $builder, Model $model)
+    {
+    }
+
+    /**
+     * Extend the query builder with the needed functions.
+     *
+     * @param  \Illuminate\Database\Eloquent\Builder  $builder
+     * @return void
+     */
+    public function extend(Builder $builder)
+    {
+        foreach ($this->extensions as $extension) {
+            $this->{"add{$extension}"}($builder);
+        }
+    }
+
+
+    protected function addMobileMask(Builder $builder)
+    {
+        $builder->macro('mobileMask', function (Builder $builder, $mask = '*') {
+            $this->_mobileMask = $mask;
+            return $builder;
+        });
+    }
+}
diff --git a/src/Domain/Traits/Sortable/AutoSortable.php b/src/Domain/Traits/Sortable/AutoSortable.php
new file mode 100644
index 0000000..500ef6d
--- /dev/null
+++ b/src/Domain/Traits/Sortable/AutoSortable.php
@@ -0,0 +1,21 @@
+<?php
+
+/**
+ * 自动排序
+ * @authors master (master@v8y.com)
+ * @date    2021-05-27 09:04:42
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Traits\Sortable;
+
+use Zeaven\EasySuit\Domain\Traits\Sortable\AutoSortableScope;
+
+trait AutoSortable
+{
+    public static function bootAutoSortable()
+    {
+        // 添加查询作用域
+        static::addGlobalScope(new AutoSortableScope());
+    }
+}
diff --git a/src/Domain/Traits/Sortable/AutoSortableScope.php b/src/Domain/Traits/Sortable/AutoSortableScope.php
new file mode 100644
index 0000000..cf2ba45
--- /dev/null
+++ b/src/Domain/Traits/Sortable/AutoSortableScope.php
@@ -0,0 +1,66 @@
+<?php
+
+/**
+ * 自动排序作用域
+ * @authors master (master@v8y.com)
+ * @date    2021-05-27 09:06:02
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Traits\Sortable;
+
+use Illuminate\Database\Eloquent\Builder;
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\Scope;
+
+class AutoSortableScope implements Scope
+{
+    protected $extensions = ['autoSort', 'unAutoSort'];
+    /**
+     * 把约束加到 Eloquent 查询构造中。
+     *
+     * @param  \Illuminate\Database\Eloquent\Builder  $builder
+     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @return void
+     */
+    public function apply(Builder $builder, Model $model)
+    {
+    }
+
+    /**
+     * Extend the query builder with the needed functions.
+     *
+     * @param  \Illuminate\Database\Eloquent\Builder  $builder
+     * @return void
+     */
+    public function extend(Builder $builder)
+    {
+        foreach ($this->extensions as $extension) {
+            $this->{"add{$extension}"}($builder);
+        }
+    }
+
+    protected function addUnAutoSort(Builder $builder)
+    {
+        $builder->macro(
+            'unAutoSort',
+            function (Builder $builder) {
+                return $builder->withoutGlobalScope($this);
+            }
+        );
+    }
+
+    protected function addAutoSort(Builder $builder)
+    {
+        $builder->macro(
+            'autoSort',
+            function (Builder $builder) {
+                $sorter = request()->getSort();
+                if ($sorter && $sorter['field']) {
+                    $builder->reorder()->orderBy($sorter['field'], $sorter['order'] ?? 'asc');
+                }
+                return $builder;
+            }
+        );
+    }
+}
diff --git a/src/Domain/Traits/Sortable/Sortable.php b/src/Domain/Traits/Sortable/Sortable.php
new file mode 100644
index 0000000..de40dc8
--- /dev/null
+++ b/src/Domain/Traits/Sortable/Sortable.php
@@ -0,0 +1,172 @@
+<?php
+
+/**
+ * 排序特性
+ * sort_num 排序字段说明：
+ * 使用间隔为1000，小数点3位，如：
+ * A = 1000.000,
+ * B = 2000.000,
+ * C = 3000.000,
+ * D = 4000.000
+ * 如果将 B移动A,则 B=(A+A-1000)/2, 即:
+ * B = 500.000,
+ * A = 1000.000,
+ * C = 3000.000,
+ * D = 4000.000
+ * 如果将 A移动D,则 A=(D+D+1000)/2, 即：
+ * B = 500.000,
+ * C = 3000.000,
+ * D = 4000.000,
+ * A = 4500.000
+ * 如果将 D移动C,则 D=(B+C)/2, 即：
+ * B = 500.000,
+ * D = 1750.000,
+ * C = 3000.000,
+ * A = 4500.000
+ * 所以计算公式为，将当前项X移动Y、Z之间，则X的值=(Y+Z)/2，如Y不存在（顶部）则Y=Z-1000，，如Z不存在（底部）则Z=Y+1000
+ *
+ * @date    2019-09-16 15:01:37
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Traits\Sortable;
+
+use Zeaven\EasySuit\Domain\Traits\Sortable\SortableScope;
+
+/**
+ * 提供模型排序功能
+ * static::SORT_NUM 为排序字段，float型，保留3位小数
+ */
+trait Sortable
+{
+    private static $maxSortNum = false;
+    public static function bootSortable()
+    {
+        // 添加查询作用域
+        static::addGlobalScope(new SortableScope(static::getSortNumColumn()));
+
+        static::creating(
+            function ($model) {
+                static::getMaxSortNum();
+                $model->calcMaxSortNum();
+            }
+        );
+    }
+
+    public static function getSortNumColumn()
+    {
+        return defined('static::SORT_NUM') ? static::SORT_NUM : 'sort_num';
+    }
+
+    public static function getSortStepValue()
+    {
+        return defined('static::SORT_STEP') ? static::SORT_STEP : 1000;
+    }
+
+    /**
+     * 计算排序值
+     * @return [type] [description]
+     */
+    private function calcMaxSortNum()
+    {
+        $step = static::getSortStepValue();
+        $column = static::getSortNumColumn();
+
+        $this->attributes[$column] = static::$maxSortNum += $step;
+    }
+
+    private static function getMaxSortNum()
+    {
+        // 取得最大字段
+        if (static::$maxSortNum === false) {
+            static::$maxSortNum = static::max(static::getSortNumColumn()) ?: 0;
+        }
+        return static::$maxSortNum;
+    }
+
+    public function setSortNum(int $num)
+    {
+        $step = static::getSortStepValue();
+        $column = static::getSortNumColumn();
+        $this->setAttribute($column, $num * $step);
+        if (static::$maxSortNum === false || static::$maxSortNum < $this->attributes[$column]) {
+            static::$maxSortNum = $this->attributes[$column];
+        }
+        $this->save();
+        return $this;
+    }
+
+    /**
+     * 默认为倒序，上移即增加
+     * @param  int    $step 增加位移数量
+     * @return [type]       [description]
+     */
+    public function up(int $step)
+    {
+        if ($step < 0) {
+            throw new \Exception('argument step is not allow!');
+        }
+        if ($step === 0) {
+            return;
+        }
+        static::getMaxSortNum();
+        $column = static::getSortNumColumn();
+        $rows = $this->oldest($column)
+            ->where($column, '>=', $this->attributes[$column])
+            ->offset($step)->limit(2)->get(['sort_num']);
+
+        switch (count($rows)) {
+            case 2:
+                $value = floatval(bcdiv(bcadd($rows[0]->sort_num, $rows[1]->sort_num, 3), 2, 3));
+                break;
+            case 1:
+                $value = floatval(bcadd($rows[0]->sort_num, static::getSortStepValue(), 3));
+                static::$maxSortNum = $value;
+                break;
+            default:
+                $value = floatval(bcadd(static::$maxSortNum, static::getSortStepValue(), 3));
+                static::$maxSortNum = $value;
+                break;
+        }
+
+        $this->attributes[$column] = $value;
+        $this->save();
+        return $this;
+    }
+
+    public function down(int $step)
+    {
+        if ($step < 0) {
+            throw new \Exception('argument step is not allow!');
+        }
+        if ($step === 0) {
+            return;
+        }
+        static::getMaxSortNum();
+        $column = static::getSortNumColumn();
+        $rows = $this->latest($column)
+            ->where($column, '<=', $this->attributes[$column])
+            ->offset($step)->limit(2)->get(['sort_num']);
+
+        switch (count($rows)) {
+            case 2:
+                $value = floatval(bcdiv(bcadd($rows[0]->sort_num, $rows[1]->sort_num, 3), 2, 3));
+                break;
+            case 1:
+                $value = floatval(bcdiv($rows[0]->sort_num, 2, 3));
+                break;
+            default:
+                $min_value = $this->min($column) ?: static::getSortStepValue() * 2;
+                if ($min_value === $this->attributes[$column]) {
+                    $value = $min_value;
+                } else {
+                    $value = floatval(bcdiv($min_value, 2, 3));
+                }
+                break;
+        }
+
+        $this->attributes[$column] = $value;
+        $this->save();
+        return $this;
+    }
+}
diff --git a/src/Domain/Traits/Sortable/SortableScope.php b/src/Domain/Traits/Sortable/SortableScope.php
new file mode 100644
index 0000000..b4e6f3a
--- /dev/null
+++ b/src/Domain/Traits/Sortable/SortableScope.php
@@ -0,0 +1,114 @@
+<?php
+
+/**
+ *
+ *
+ * @date    2019-09-16 15:10:50
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Traits\Sortable;
+
+use Illuminate\Database\Eloquent\Builder;
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\Scope;
+
+class SortableScope implements Scope
+{
+    private $sort_field;
+
+    public function __construct($sort_field)
+    {
+        $this->sort_field = $sort_field;
+    }
+
+    protected $extensions = ['sortAsc', 'sortDesc', 'withoutSort', 'fixSort'];
+
+    /**
+     * 把约束加到 Eloquent 查询构造中。
+     *
+     * @param  \Illuminate\Database\Eloquent\Builder  $builder
+     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @return void
+     */
+    public function apply(Builder $builder, Model $model)
+    {
+        $builder->latest($model->getSortNumColumn());
+    }
+
+    /**
+     * Extend the query builder with the needed functions.
+     *
+     * @param  \Illuminate\Database\Eloquent\Builder  $builder
+     * @return void
+     */
+    public function extend(Builder $builder)
+    {
+        foreach ($this->extensions as $extension) {
+            $this->{"add{$extension}"}($builder);
+        }
+    }
+
+    protected function addWithoutSort(Builder $builder)
+    {
+        $builder->macro(
+            'withoutSort',
+            function (Builder $builder) {
+                return $builder->withoutGlobalScope($this);
+            }
+        );
+    }
+
+    protected function addSortAsc(Builder $builder)
+    {
+        $builder->macro(
+            'sortAsc',
+            function (Builder $builder) {
+                return $builder->withoutGlobalScope($this)->oldest($this->sort_field);
+            }
+        );
+    }
+
+    protected function addSortDesc(Builder $builder)
+    {
+        $builder->macro(
+            'sortDesc',
+            function (Builder $builder) {
+                return $builder->withoutGlobalScope($this)->latest($this->sort_field);
+            }
+        );
+    }
+
+    protected function addFixSort(Builder $builder)
+    {
+        $builder->macro(
+            'fixSort',
+            function (Builder $builder, array $ids = []) {
+                $items = $builder->oldest()->get();
+                return $items->unless(
+                    empty($ids),
+                    function ($collection) use ($ids) {
+                        return $collection->sortBy(
+                            function ($item) use ($ids) {
+                                $key = array_search($item->id, $ids);
+                                return $key === false ? 9999 : $key;
+                            }
+                        );
+                    }
+                )
+                ->values()
+                ->map(
+                    function ($item, $key) {
+                        $item->setSortNum($key + 1);
+                        return $item;
+                    }
+                )
+                ->sortBy(
+                    function ($item) {
+                        return $item[$this->sort_field];
+                    }
+                );
+            }
+        );
+    }
+}
diff --git a/src/Domain/Traits/UnlimitedAgentable/UnlimitedAgentScope.php b/src/Domain/Traits/UnlimitedAgentable/UnlimitedAgentScope.php
new file mode 100644
index 0000000..e5a2d3a
--- /dev/null
+++ b/src/Domain/Traits/UnlimitedAgentable/UnlimitedAgentScope.php
@@ -0,0 +1,48 @@
+<?php
+
+/**
+ * 无限级代理
+ * @authors master (master@v8y.com)
+ * @date    2021-03-31 09:03:26
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Domain\Traits\UnlimitedAgentable;
+
+use Illuminate\Database\Eloquent\Builder;
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\Scope;
+
+class UnlimitedAgentScope implements Scope
+{
+    public function __construct()
+    {
+    }
+
+    protected $extensions = [];
+
+    /**
+     * 把约束加到 Eloquent 查询构造中。
+     *
+     * @param  \Illuminate\Database\Eloquent\Builder  $builder
+     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @return void
+     */
+    public function apply(Builder $builder, Model $model)
+    {
+        // $builder->latest();
+    }
+
+    /**
+     * Extend the query builder with the needed functions.
+     *
+     * @param  \Illuminate\Database\Eloquent\Builder  $builder
+     * @return void
+     */
+    public function extend(Builder $builder)
+    {
+        foreach ($this->extensions as $extension) {
+            $this->{"add{$extension}"}($builder);
+        }
+    }
+}
diff --git a/src/Domain/Traits/UnlimitedAgentable/UnlimitedAgentable.php b/src/Domain/Traits/UnlimitedAgentable/UnlimitedAgentable.php
new file mode 100644
index 0000000..6bead2f
--- /dev/null
+++ b/src/Domain/Traits/UnlimitedAgentable/UnlimitedAgentable.php
@@ -0,0 +1,181 @@
+<?php
+
+namespace Zeaven\EasySuit\Domain\Traits\UnlimitedAgentable;
+
+use Zeaven\EasySuit\Domain\Traits\UnlimitedAgentable\UnlimitedAgentScope;
+
+/**
+ * 无限级代理
+ */
+trait UnlimitedAgentable
+{
+    private static $_UNLIMITED_MIDDLE_TABLE = '';
+    private static $_UNLIMITED_CHILD_KEY = 'child_id';
+    private static $_UNLIMITED_PARENT_KEY = 'parent_id';
+    // 是否需要统计
+    private static $_UNLIMITED_STAT = true;
+
+    public static function bootUnlimitedAgentable()
+    {
+        if (defined('static::UNLIMITED_MIDDLE_TABLE')) {
+            static::$_UNLIMITED_MIDDLE_TABLE = static::UNLIMITED_MIDDLE_TABLE;
+        }
+        if (defined('static::UNLIMITED_CHILD_KEY')) {
+            static::$_UNLIMITED_CHILD_KEY = static::UNLIMITED_CHILD_KEY;
+        }
+        if (defined('static::UNLIMITED_PARENT_KEY')) {
+            static::$_UNLIMITED_PARENT_KEY = static::UNLIMITED_PARENT_KEY;
+        }
+        if (defined('static::UNLIMITED_STAT')) {
+            static::$_UNLIMITED_STAT = static::UNLIMITED_STAT;
+        }
+        // 添加查询作用域
+        // static::addGlobalScope(new UnlimitedAgentScope);
+    }
+
+    // 上级代理，顺序为 直系上级代理..中间上级代理..顶级上级代理
+    public function allParents()
+    {
+        return $this->belongsToMany(
+            static::class,
+            static::$_UNLIMITED_MIDDLE_TABLE,
+            static::$_UNLIMITED_CHILD_KEY,
+            static::$_UNLIMITED_PARENT_KEY
+        )
+            ->oldest('step')
+            ->withPivot('step')
+            ->withTimestamps();
+    }
+
+    // 直系代理
+    public function parents()
+    {
+        return $this->allParents()->wherePivot('step', 0)->limit(1);
+    }
+
+    // 父级代理，树结构
+    public function nextParents()
+    {
+        return $this->parents()->with('nextParents');
+    }
+
+    // 下级代理，顺序为 直系下级..中间下级..最低下级
+    public function allChildren()
+    {
+        return $this->belongsToMany(
+            static::class,
+            static::$_UNLIMITED_MIDDLE_TABLE,
+            static::$_UNLIMITED_PARENT_KEY,
+            static::$_UNLIMITED_CHILD_KEY
+        )
+            ->oldest('step')
+            ->withPivot('step')
+            ->withTimestamps();
+    }
+
+    //
+    public function children()
+    {
+        return $this->allChildren()->wherePivot('step', 0)->limit(1);
+    }
+
+    // 下级代理，树结构
+    public function nextChildren()
+    {
+        return $this->children()->with('nextChildren');    // 0为直系代理
+    }
+
+    /**
+     * 添加上级
+     * @param  model|int $parent 上级或id
+     * @param bool $single 保留唯一上级
+     */
+    public function attachParent($parent, bool $single = true)
+    {
+        is_numeric($parent) && $parent = static::find($parent);
+        $parent->loadMissing('allParents');
+        return db_trans(
+            function () use ($parent, $single) {
+                if ($single) {
+                    // 移除原来的上级
+                    $this->detachParent();
+                }
+                $level = 0;
+                // 将邀请的代理添加为当前用户的上级代理
+                $this->allParents()->attach($parent->id, ['step' => $level++]); // 0为直属上级
+                if (static::$_UNLIMITED_STAT) {
+                    // 更新直属上级的统计数
+                    $parent->increment('children_count');
+                    $parent->increment('total_children_count');
+                }
+
+                // 添加上级的上级代理
+                foreach ($parent->allParents as $top) {
+                    $this->allParents()->attach($top->id, ['step' => $level++]);
+                    if (static::$_UNLIMITED_STAT) {
+                        // 上级代理的下级统计
+                        $top->increment('total_children_count');
+                    }
+                }
+
+                return $this;
+            }
+        );
+    }
+    /**
+     * 移除上级
+     * @param  model|int $parent 上级对象或id
+     * @return [type]         [description]
+     */
+    public function detachParent($parent = null)
+    {
+        is_numeric($parent) && $parent = static::findOrFail($parent);
+        return db_trans(
+            function () use ($parent) {
+                if (!$parent) {
+                    $this->allParents()->each(
+                        function ($top) {
+                            if (static::$_UNLIMITED_STAT) {
+                                if (data_get($top, 'pivot.step') === 0) {
+                                    $top->decrement('children_count');
+                                }
+                                $top->decrement('total_children_count');
+                            }
+                            $top->allChildren()->detach($this->id);
+                        }
+                    );
+                } else {
+                    $child = $parent->allChildren()->first();
+                    if ($child && $child->id === $this->id) {
+                        $parent->allChildren()->detach($this->id);
+                        if (static::$_UNLIMITED_STAT) {
+                            $parent->decrement('children_count');
+                            $parent->decrement('total_children_count');
+                        }
+                    }
+                }
+                return $this;
+            }
+        );
+    }
+    /**
+     * 添加下级
+     * @param  model|int $child 下级对象或id
+     * @return [type]        [description]
+     */
+    public function attachChildren($child)
+    {
+        is_numeric($child) && $child = static::findOrFail($child);
+        return $child->attachParent($this);
+    }
+    /**
+     * 移除下级
+     * @param  model|int $child 下级对象或id
+     * @return [type]        [description]
+     */
+    public function detachChildren($child = null)
+    {
+        is_numeric($child) && $child = static::findOrFail($child);
+        return $child->detachParent($this);
+    }
+}
diff --git a/src/EloquentExtension/EloquentExtensionProvider.php b/src/EloquentExtension/EloquentExtensionProvider.php
new file mode 100644
index 0000000..d210fcc
--- /dev/null
+++ b/src/EloquentExtension/EloquentExtensionProvider.php
@@ -0,0 +1,204 @@
+<?php
+
+namespace Zeaven\EasySuit\EloquentExtension;
+
+use Zeaven\EasySuit\EloquentExtension\SlimLengthAwarePaginator;
+use Closure;
+use Event;
+use Illuminate\Database\Eloquent\Builder;
+use Illuminate\Database\Eloquent\Model;
+use Illuminate\Database\Eloquent\Relations\MorphTo;
+use Illuminate\Database\Eloquent\Relations\Relation;
+use Illuminate\Pagination\LengthAwarePaginator;
+use Illuminate\Support\Collection;
+use Illuminate\Support\ServiceProvider;
+use Illuminate\Support\Str;
+
+// use Kalnoy\Nestedset\Collection as NestedCollection;
+
+class EloquentExtensionProvider extends ServiceProvider
+{
+    /**
+     * Bootstrap services.
+     *
+     * @return void
+     */
+    public function boot()
+    {
+    }
+
+
+    private function eloquentBuildExtends()
+    {
+        MorphTo::macro('_select', function ($columns) {
+            $columns = is_array($columns) ? $columns : func_get_args();
+            $this->macroBuffer[] = ['method' => 'select', 'parameters' => $columns];
+            return $this;
+        });
+
+        Builder::macro('with_columns', function (string $relation, array $keys, Closure $callback = null) {
+            return $this->with([
+                "{$relation}" => function ($query) use ($keys, $callback, $relation) {
+                    if (!empty($keys)) {
+                        if ($query instanceof MorphTo) {
+                            $table_name = false;
+                        } else {
+                            $table_name = $query->getRelated()->getTable();
+                        }
+                        if (is_string($table_name)) {
+                            for ($i = 0, $l = count($keys); $i < $l; $i++) {
+                                (stripos($keys[$i], '.') === false) and ($keys[$i] = "{$table_name}.{$keys[$i]}");
+                            }
+                            $query->select($keys);
+                        } else {
+                            $query->_select($keys);
+                        }
+                    }
+                    if (is_callable($callback)) {
+                        $callback($query);
+                    }
+                }
+            ]);
+        });
+
+        /**
+         * $query->withs('table1:col1,col2', 'table2:col1,col2'); table2 belong to table1
+         * $query->withs([
+         *     'table1:col1,col2',
+         *     'table2:col1,col2' => function($query) {},
+         *     'table3:col1,col2'
+         *    ])
+         */
+        Builder::macro('withs', function ($relations) {
+            $relations = is_array($relations) ? $relations : func_get_args();
+            $relation_define = head(array_keys($relations));
+            if (is_string($relation_define)) {
+                $relation = $relation_define;
+                $callback = array_shift($relations);
+            } else {
+                $relation = array_shift($relations);
+                $callback = null;
+            }
+            list($table, $columns) = stripos($relation, ':') ? explode(':', $relation) : [$relation, ''];
+            $columns = empty($columns) ? [] : array_map('trim', explode(',', $columns));
+            $this->with_columns($table, $columns, function ($query) use ($relations, $callback) {
+                if (is_callable($callback)) {
+                    $callback($query);
+                }
+                if (!empty($relations)) {
+                    $query->withs($relations);
+                }
+            });
+
+            return $this;
+        });
+
+        Builder::macro('selectWhen', function ($select, $default = ['*']) {
+            $select = is_array($select) ? $select : func_get_args();
+            $select = array_filter($select);
+            if (!empty($select)) {
+                $this->select($select);
+            } elseif ($default) {
+                $this->select($default);
+            }
+
+            return $this;
+        });
+
+
+        Builder::macro('whereWhen', function (...$args) {
+            $val = last($args);
+            if (filled($val)) {
+                $this->where(...$args);
+            }
+            return $this;
+        });
+
+
+        Builder::macro('whenFilled', function () {
+            $filleds = func_get_args();
+            $callback = array_pop($filleds);
+            $is_filled = !empty(array_filter($filleds, fn ($item) => filled($item)));
+
+            $this->when(
+                $is_filled,
+                function ($query) use ($filleds, $callback) {
+                    $callback && $callback($query, ...$filleds);
+                }
+            );
+
+            return $this;
+        });
+
+        Builder::macro('whenBetween', function ($column, $first, $second) {
+            $this->when(filled($first) || filled($second), function ($query) use ($column, $first, $second) {
+                if ($first && $second) {
+                    $query->whereBetween($column, [$first, $second]);
+                } elseif ($first) {
+                    $query->where($column, '>=', $first);
+                } else {
+                    $query->where($column, '<=', $second);
+                }
+            });
+            return $this;
+        });
+
+        Builder::macro('whenLike', function ($column, $value) {
+            $this->when(filled($value), function ($query) use ($column, $value) {
+                $query->where($column, 'like', "%{$value}%");
+            });
+            return $this;
+        });
+
+
+        /**
+         * $babys->pluckByKeys(['class_name' => 'class.class_name', 'name'=>'username', 'baby']);
+         * 返回[
+         *  [
+         *      'class_name' => 'xxx', 班级名称
+         *      'name' => 'yyy',  宝贝名称
+         *      'baby' => [
+         *          ...宝贝记录
+         *      ]
+         * ]
+         */
+        Collection::macro('pluckByKeys', function ($columns) {
+            return $this->map(function ($item) use ($columns) {
+                $result = [];
+                foreach ($columns as $field => $key) {
+                    if (is_numeric($field)) {
+                        $field = $key;
+                        $key = null;
+                    }
+                    $result[$field] = data_get($item, $key);
+                }
+
+                return $result;
+            });
+        });
+    }
+
+    private function eloquentPagination()
+    {
+        // 自定义分页，将分页属性 data 改为 items
+        $this->app->bind(
+            LengthAwarePaginator::class,
+            function ($_, $arguments) {
+                extract($arguments);
+                return new SlimLengthAwarePaginator($items, $total, $perPage, $currentPage, $options);
+            }
+        );
+    }
+
+    /**
+     * Register services.
+     *
+     * @return void
+     */
+    public function register()
+    {
+        $this->eloquentBuildExtends();
+
+        $this->eloquentPagination();
+    }
+}
diff --git a/src/EloquentExtension/SlimLengthAwarePaginator.php b/src/EloquentExtension/SlimLengthAwarePaginator.php
new file mode 100644
index 0000000..af896e8
--- /dev/null
+++ b/src/EloquentExtension/SlimLengthAwarePaginator.php
@@ -0,0 +1,26 @@
+<?php
+
+namespace Zeaven\EasySuit\EloquentExtension;
+
+use Illuminate\Pagination\LengthAwarePaginator;
+
+class SlimLengthAwarePaginator extends LengthAwarePaginator
+{
+    public function toArray()
+    {
+        return [
+            // 'current_page' => $this->currentPage(),
+            'items' => $this->items->toArray(),
+            // 'first_page_url' => $this->url(1),
+            // 'from' => $this->firstItem(),
+            // 'last_page' => $this->lastPage(),
+            // 'last_page_url' => $this->url($this->lastPage()),
+            // 'next_page_url' => $this->nextPageUrl(),
+            // 'path' => $this->path,
+            // 'per_page' => $this->perPage(),
+            // 'prev_page_url' => $this->previousPageUrl(),
+            // 'to' => $this->lastItem(),
+            'total' => $this->total(),
+        ];
+    }
+}
diff --git a/src/ErrorCode/ErrorCode.php b/src/ErrorCode/ErrorCode.php
new file mode 100644
index 0000000..eb18a43
--- /dev/null
+++ b/src/ErrorCode/ErrorCode.php
@@ -0,0 +1,42 @@
+<?php
+
+/**
+ * 错误码
+ *
+ * @date    2018-10-31 17:54:51
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\ErrorCode;
+
+use Illuminate\Support\Str;
+
+class ErrorCode
+{
+    private $data = [];
+    public function get(int $code, string $msg = null)
+    {
+        if ($msg) {
+            return $msg ? __($msg) : '';
+        }
+
+        if (is_numeric($code) && $code > 1000) {
+            $code = dechex($code);
+        }
+
+        $codeStr = strtolower(Str::after($code, '0x'));
+        $errData = request()->errorData() ?: [];
+
+        return __(ErrorCodeProvider::$abstract . ".{$codeStr}", $errData);
+    }
+
+    public function setData(array $data)
+    {
+        $this->data = $data;
+    }
+
+    public function getData()
+    {
+        return $this->data;
+    }
+}
diff --git a/src/ErrorCode/ErrorCodeProvider.php b/src/ErrorCode/ErrorCodeProvider.php
new file mode 100644
index 0000000..00afe45
--- /dev/null
+++ b/src/ErrorCode/ErrorCodeProvider.php
@@ -0,0 +1,63 @@
+<?php
+
+/**
+ * 错误码
+ *
+ * @date    2018-10-31 17:45:11
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\ErrorCode;
+
+use Illuminate\Contracts\Support\DeferrableProvider;
+use Illuminate\Support\ServiceProvider;
+use Request;
+
+class ErrorCodeProvider extends ServiceProvider // implements DeferrableProvider
+{
+    public static $abstract = 'error_code';
+    /**
+     * Bootstrap the application events.
+     *
+     * @return void
+     */
+    public function boot()
+    {
+        // Publish the configuration file
+        // if ($this->app->runningInConsole()) {
+        //     $this->publishes([
+        //         __DIR__ . '/config.php' => config_path(static::$abstract . '.php'),
+        //     ]);
+        // }
+    }
+
+    public function register()
+    {
+        // $this->mergeConfigFrom(__DIR__.'/config.php', static::$abstract);
+
+        $this->app->bind(static::$abstract, function () {
+            return new ErrorCode();
+        });
+
+        Request::macro(
+            'errorData',
+            function (?array $data = null) {
+                if ($data) {
+                    $this->attributes->set(ErrorCodeProvider::$abstract, $data);
+                } else {
+                    return $this->attributes->get(ErrorCodeProvider::$abstract);
+                }
+            }
+        );
+    }
+
+    /**
+     * 取得提供者提供的服务
+     *
+     * @return array
+     */
+    public function provides()
+    {
+        return [static::$abstract];
+    }
+}
diff --git a/src/ErrorCode/Facade.php b/src/ErrorCode/Facade.php
new file mode 100644
index 0000000..7bbdfd2
--- /dev/null
+++ b/src/ErrorCode/Facade.php
@@ -0,0 +1,20 @@
+<?php
+
+/**
+ * error code 门面
+ *
+ * @date    2018-10-31 17:52:04
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\ErrorCode;
+
+use Illuminate\Support\Facades\Facade as BaseFacade;
+
+class Facade extends BaseFacade
+{
+    protected static function getFacadeAccessor()
+    {
+        return ErrorCodeProvider::$abstract;
+    }
+}
diff --git a/src/Exceptions/Exception.php b/src/Exceptions/Exception.php
new file mode 100644
index 0000000..426fabc
--- /dev/null
+++ b/src/Exceptions/Exception.php
@@ -0,0 +1,20 @@
+<?php
+
+namespace Zeaven\EasySuit\Exceptions;
+
+use Exception as BaseException;
+
+class Exception extends BaseException
+{
+    private $errorCode;
+    public function __construct(string $message = "", int $code = 0, ?Throwable $previous = null, int $errorCode = 0)
+    {
+        parent::__construct($message, $code, $previous);
+        $this->errorCode = $errorCode ? $errorCode : $code;
+    }
+
+    public function getErrorCode()
+    {
+        return $this->errorCode;
+    }
+}
diff --git a/src/Exceptions/Handler.php b/src/Exceptions/Handler.php
new file mode 100644
index 0000000..f253002
--- /dev/null
+++ b/src/Exceptions/Handler.php
@@ -0,0 +1,85 @@
+<?php
+
+namespace Zeaven\EasySuit\Exceptions;
+
+use Illuminate\Auth\AuthenticationException;
+use Illuminate\Database\QueryException;
+use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
+use Illuminate\Validation\ValidationException;
+use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
+use Throwable;
+
+class Handler extends ExceptionHandler
+{
+    /**
+     * A list of the exception types that are not reported.
+     *
+     * @var array<int, class-string<Throwable>>
+     */
+    protected $dontReport = [
+        //
+    ];
+
+    /**
+     * A list of the inputs that are never flashed for validation exceptions.
+     *
+     * @var array<int, string>
+     */
+    protected $dontFlash = [
+        'current_password',
+        'password',
+        'password_confirmation',
+    ];
+
+    /**
+     * Register the exception handling callbacks for the application.
+     *
+     * @return void
+     */
+    public function register()
+    {
+        $this->reportable(function (Throwable $e) {
+            // 自定义异常报告，如sentry
+        });
+
+        $this->renderable(fn (Throwable $e, $request) => $this->customRender($e, $request));
+    }
+
+    private function customRender(Throwable $e, $request)
+    {
+
+        if ($request->method() === 'GET' && $request->headers->get('content-type') !== 'application/json') {
+            // 页面请求不做处理
+            return null;
+        }
+
+        if (method_exists($e, 'getErrorCode')) {
+            $errorCode = $e->getErrorCode();
+        } elseif (method_exists($e, 'getStatusCode')) {
+            $errorCode = $e->getStatusCode();
+        } else {
+            $errorCode = $e->getCode() ?: 500;
+        }
+
+        $response = [
+            'code' => $errorCode,
+            'data' => null,
+            'message' => $e->getMessage(),
+            'error' => $e->getTraceAsString()
+        ];
+
+        if ($e instanceof ValidationException) {
+            $response['message'] = head($e->errors())[0];
+        } elseif ($e instanceof NotFoundHttpException) {
+            $response['message'] = 'Invalid access address';
+        } elseif ($e instanceof AuthenticationException) {
+            $response['code'] = 401;
+            $response['message'] = __(401);
+        } elseif ($e instanceof QueryException) {
+            $response['code'] = 500;
+            $response['message'] = __(500);
+        }
+
+        return ok($response);
+    }
+}
diff --git a/src/Http/Middleware/ApiLocale.php b/src/Http/Middleware/ApiLocale.php
new file mode 100644
index 0000000..43c6c06
--- /dev/null
+++ b/src/Http/Middleware/ApiLocale.php
@@ -0,0 +1,47 @@
+<?php
+
+namespace Zeaven\EasySuit\Http\Middleware;
+
+use Closure;
+use Illuminate\Http\Request;
+use Arr;
+
+class ApiLocale
+{
+    /**
+     * 多语言配置表
+     * [ 'laravel语言包标识' => 'accept-language传递的值'] 如
+     * [ 'zh_CN' => 'zh'] 或 [ 'zh_CN' => ['zh', 'zh-CN']]
+     */
+    const LANGUAGES = ['zh_CN' => ['zh','zh-CN'],'en'];
+    /**
+     * Handle an incoming request.
+     *
+     * @param  \Illuminate\Http\Request  $request
+     * @param  \Closure  $next
+     * @return mixed
+     */
+    public function handle(Request $request, Closure $next)
+    {
+        // Accept-Language: zh-CN,zh;q=0.9,en;q=0.8,ja;q=0.7,zh-TW;q=0.6,it;q=0.5
+        $acc_lang = $request->headers->get('Accept-Language');
+        if ($acc_lang) {
+            $languages = collect(explode(',', $acc_lang))
+                ->map(fn($item) => explode(';', $item)[0])
+                ->map(fn($item) => str_replace('_', '-', strtolower($item)))
+                ->toArray();
+
+            foreach (static::LANGUAGES as $locale => $lans) {
+                if (is_numeric($locale)) {
+                    $locale = $lans;
+                }
+                $matcheds = array_intersect($languages, Arr::wrap($lans));
+                if (!empty($matcheds)) {
+                    app()->setLocale($locale);
+                    break;
+                }
+            }
+        }
+        return $next($request);
+    }
+}
diff --git a/src/Http/Middleware/ApiSignature.php b/src/Http/Middleware/ApiSignature.php
new file mode 100644
index 0000000..ba5aaa7
--- /dev/null
+++ b/src/Http/Middleware/ApiSignature.php
@@ -0,0 +1,56 @@
+<?php
+
+/**
+ * 把url所有key-value提取组成数组及排序后再合并成字符串
+ * ?a=123&c=543&b=678
+ * a123b678c543
+ */
+
+namespace Zeaven\EasySuit\Http\Middleware;
+
+use Closure;
+use Illuminate\Support\Arr;
+
+/**
+ * 使用
+ * middleware => ['api.sign:1']
+ */
+class ApiSignature
+{
+    /**
+     * Handle an incoming request.
+     * 接口签名验证
+     * 签名方式：
+     * 1. 将url参数提取为 key-value 数据并排序
+     * 2. 去掉 signature 字段，剩下的数组按key排序，即ksort
+     * 3. 将数组每一项 key-value 连接成字符串，如 ['a' => 1, 'b' => 2] = a1b2
+     * 4. 对字符串做加密，然后做 base64_encode
+     * 5. 最后做 base64_to_safe，在原来的base64_encode基础上对 "+"、"/" 替换为 "-","_", 对末尾的 "=" 去掉
+     * @param  \Illuminate\Http\Request  $request
+     * @param  \Closure  $next
+     * @return mixed
+     */
+    public function handle($request, Closure $next, bool $strict = false)
+    {
+        $query_array = $request->all();
+        if (!$strict) {
+            // 参数没有product、version的不处理
+            return $next($request);
+        }
+
+
+        $signature = throw_empty(Arr::pull($query_array, 'signature'), '无效的签名');
+        ksort($query_array);
+        $query_str = collect($query_array)->map(function ($value, $key) {
+            return $key . $value;
+        })->implode('');
+        $encrypt_data = base64_to_safe(zw_encrypt($query_str));
+
+        throw_on($encrypt_data !== $signature, '接口签名失败');
+
+        // TODO: 增加对时间戳的判断，误差大于30分钟认为无效
+        // code...
+
+        return $next($request);
+    }
+}
diff --git a/src/Http/Middleware/GlobalResponse.php b/src/Http/Middleware/GlobalResponse.php
new file mode 100644
index 0000000..06250ff
--- /dev/null
+++ b/src/Http/Middleware/GlobalResponse.php
@@ -0,0 +1,130 @@
+<?php
+
+namespace Zeaven\EasySuit\Http\Middleware;
+
+use Closure;
+use Illuminate\Http\Request;
+use Str;
+use ErrorCode;
+use Arr;
+
+class GlobalResponse
+{
+    /**
+     * Handle an incoming request.
+     *
+     * @param \Illuminate\Http\Request $request
+     * @param \Closure $next
+     * @return mixed
+     */
+    public function handle(Request $request, Closure $next)
+    {
+        if ($except_routes = config('easy_suit.global_response.exclude')) {
+            foreach ($except_routes as $except_route) {
+                if ($request->is($except_route)) {
+                    return $next($request);
+                }
+            }
+        }
+        $response = $next($request);
+
+        $enable_debugbar = (app()->bound('debugbar') && app('debugbar')->isEnabled()) ? ['_debugbar' => app('debugbar')->getData()] : [];
+        [$enable_debugbar, $sqlSlow] = $this->filterDebugInfo($enable_debugbar);
+
+        $code = $response->getStatusCode();
+        $response->setStatusCode(200);
+
+        if ($response instanceof JsonResponse) {
+            $data = $this->wrapResponse($response->getData(true), $code);
+            $sqlSlow && $data['sql'] = '检查到sql慢查询';
+            $response->setData($data + $enable_debugbar);
+        } elseif (Str::contains($response->headers->get('content-type'), 'application/json')) {
+            $data = json_decode($response->getContent(), true) ?? null;
+            $data = $this->wrapResponse($data, $code);
+            $sqlSlow && $data['sql'] = '检查到sql慢查询';
+            $response->setContent(json_encode($data + $enable_debugbar, JSON_UNESCAPED_UNICODE));
+        }
+
+        return $response;
+    }
+
+    public function wrapResponse($data, $code)
+    {
+        $result = [];
+        // [$error_code, $error_msg] = array_values(ErrorCode::get());
+        $result['code'] = $code === 200 ? 0 : $code;
+        $result['data'] = null;
+        $result['message'] = null;
+
+        if (
+            ($data instanceof ArrayAccess || is_array($data))
+            && Arr::has($data, ['code', 'data', 'message'])
+        ) {
+            if ($data['code'] !== 0) {
+                $result['message'] = ErrorCode::get($data['code'], $data['message']);
+                $result['code'] = $data['code'];
+            } else {
+                $result['data'] = $this->emptyToNull($data['data']);
+            }
+            if (!app()->bound('debugbar')) {
+                $result['error'] = $data['error'];
+            }
+            if (config('app.debug')) {
+                $result['error'] = $data['error'];
+            }
+        } else {
+            $result['data'] = $this->emptyToNull($data);
+        }
+        if (config('app.env') === 'production' || !config('app.debug')) {
+            unset($result['error']);
+        }
+
+        $fields = config('easy_suit.global_response.fields', []);
+        $response = [];
+        foreach ($fields as $key => $value) {
+            if (!$value || !isset($result[$key])) {
+                continue;
+            }
+            $response[$value] = $result[$key];
+        }
+
+        return $response;
+    }
+
+    private function emptyToNull($data)
+    {
+        if (blank($data)) {
+            return null;
+        } elseif ($data instanceof ArrayAccess || is_array($data)) {
+            foreach ($data as $key => $value) {
+                if (blank($value)) {
+                    $data[$key] = null;
+                } elseif ($value instanceof ArrayAccess || is_array($data)) {
+                    $data[$key] = $this->emptyToNull($value);
+                }
+            }
+        }
+
+        return $data;
+    }
+
+    private function filterDebugInfo(array $debugbar)
+    {
+        $slow = false;
+        if (empty($debugbar)) {
+            return [$debugbar, $slow];
+        }
+
+        $statements = data_get($debugbar, '_debugbar.queries.statements', []);
+
+        foreach ($statements as &$state) {
+            unset($state['backtrace']);
+            if ($state['duration'] >= 0.5) {
+                $slow = true;
+            }
+        }
+        data_set($debugbar, '_debugbar.queries.statements', $statements);
+
+        return [$debugbar, $slow];
+    }
+}
diff --git a/src/Http/Requests/BaseRequest.php b/src/Http/Requests/BaseRequest.php
new file mode 100644
index 0000000..047284d
--- /dev/null
+++ b/src/Http/Requests/BaseRequest.php
@@ -0,0 +1,125 @@
+<?php
+
+namespace Zeaven\EasySuit\Http\Requests;
+
+use Illuminate\Foundation\Http\FormRequest;
+use Arr;
+
+abstract class BaseRequest extends FormRequest
+{
+    private $ruleConfigs;
+
+    /**
+     * Determine if the user is authorized to make this request.
+     *
+     * @return bool
+     */
+    public function authorize()
+    {
+        return true;
+    }
+
+    /**
+     * 定义验证规则
+     * key, // 默认全局规则
+     * key => 1, // 默认全局规则，1为默认值
+     * key => ['rule' => 'required', default => 1],
+     * key => ['rule' => 'required|*', default => 1], // *号指继承全局规则
+     * key => ['rule' => 'required|*|integer', default => 1], // *可调理继承顺序
+     * key => ['rule' => 'required', default => 1, type => 'int'], // 转换为int型
+     * key => ['rule' => 'required', default => 1, type => 'int', 'as' => 'otherKey'], // 变量名替换为otherKey
+     *
+     * @return [type] [description]
+     */
+    abstract protected function rule(): array;
+
+    /**
+     * Get the validation rules that apply to the request.
+     *
+     * @return array
+     */
+    public function rules()
+    {
+        $defaultRules = $this->globalRules();
+        $this->ruleConfigs = $this->parseRules($this->rule(), $defaultRules);
+
+        return $this->ruleConfigs
+            ->mapWithKeys(fn ($item, $key) => [$key => $item['rule'] ?? ''])
+            ->toArray();
+    }
+
+    public function getRuleConfig()
+    {
+        //dd($this->ruleConfigs);
+        return $this->ruleConfigs->toArray();
+    }
+
+    private function parseRules(array $rules, $defaultRules)
+    {
+        return collect($rules)->mapWithKeys(
+            function ($value, $field) use ($defaultRules) {
+                $defRule = $defaultRules[$field] ?? '';
+                if (is_numeric($field)) {
+                    $field = $value;
+                    $defRule = $defaultRules[$field] ?? '';
+                    $config = ['rule' => $defRule] + ['default' => null];
+                } elseif (!is_array($value)) {
+                    $config = ['rule' => $defRule, 'default' => $value];
+                } else {
+                    if (isset($value['rule'])) {
+                        // 继承默认规则
+                        if (!empty($defRule)) {
+                            $value['rule'] = str_replace('*', $defRule, $value['rule']);
+                        }
+                    }
+                    $config = $value + ['rule' => '', 'default' => null];
+                }
+                return [$field => $config];
+            }
+        );
+    }
+
+    /**
+     * 全局验证规则，如果定义了 $_rules 相同规则 ，将会覆盖全局规则
+     * @return [type] [description]
+     */
+    protected function globalRules()
+    {
+        return [
+            // 'mobile'   => 'required|mobile',
+            // 'password' => 'required|min:4',
+            // 'name'     => 'string|max:40',
+            // 'gender'   => 'integer',
+            // 'size'     => 'integer',
+            // 'keywords' => 'string',
+            // 'id'       => 'integer',
+            // 'page'     => 'integer',
+            // 'phone'    => 'mobile',
+            // 'code'     => 'string',
+            // 'type'     => 'integer',
+            // 'token'    => 'string',
+        ];
+    }
+
+    /**
+     * 获取验证错误的自定义属性
+     * 在错误消息里 :email 将会替换为 email address
+     *
+     * @return array
+     */
+    public function attributes()
+    {
+        return [];
+    }
+
+    /**
+     * 获取已定义验证规则的错误消息
+     *
+     * @return array
+     */
+    public function messages()
+    {
+        return [
+        ];
+    }
+}
diff --git a/src/Http/ResponseMappers/BaseResponseMapper.php b/src/Http/ResponseMappers/BaseResponseMapper.php
new file mode 100644
index 0000000..ea9600a
--- /dev/null
+++ b/src/Http/ResponseMappers/BaseResponseMapper.php
@@ -0,0 +1,200 @@
+<?php
+
+namespace Zeaven\EasySuit\Http\ResponseMappers;
+
+use Arr;
+use Illuminate\Contracts\Support\Arrayable;
+use Illuminate\Support\Collection;
+use Illuminate\Support\HigherOrderTapProxy;
+
+/**
+ * 响应资源属性映射
+ *
+ * 使用说明：
+ *
+ * 属性映射
+ * 'username' => 'user.0.username', // 将user对象数组的第一个对象username映射到顶级username字段
+ * 'bc' => 'bank_card.*',   // 将bank_card记录的所有字段展开，并添加前缀'bc_',如果前缀是'_'，则不加前缀
+ * // 对user数组的每个对象内部做字段映射
+ * 'user.*' => [
+ *      'name' => 'username',
+ *      'status' => 'status_text'
+ *  ]
+ *  // 将字段'user.0.role.name' 的值经过多个handle转换后映射到顶级role字段
+ * 'role' => ['user.0.role.name', RoleHandler::class, ...] // 通过RoleHandler类进行转换，可填多个
+ *
+ * RoleHandler::class 说明：
+ * class RoleHandler
+ * {
+ *     // $value为键：user.0.role.name对应值/或上一个handler返回值， $data为当前记录user.0.role的值
+ *     public function handle($value, $data)
+ *     {
+ *         return $value. $data['description'];
+ *     }
+ * }
+ * @date    2020-07-10 09:25:00
+ * @version $Id$
+ */
+abstract class BaseResponseMapper implements Arrayable
+{
+    protected static $handlerInstances = [];
+    private $_value;
+    /**
+     * 属性映射配置
+     * @var array
+     */
+    protected $mapper = [];
+
+    /**
+     * 隐藏属性配置
+     * @var array
+     */
+    protected $hidden = [];
+
+    public function __construct($value)
+    {
+        $this->_value = $value instanceof HigherOrderTapProxy ? $value->target : $value;
+    }
+
+    public function isArray()
+    {
+        return ($this->_value instanceof Collection) || is_array($this->_value);
+    }
+
+    protected static function getHandler(string $handle_class)
+    {
+        if (array_key_exists($handle_class, static::$handlerInstances)) {
+            return static::$handlerInstances[$handle_class];
+        }
+
+        return static::$handlerInstances[$handle_class] = app($handle_class);
+    }
+
+    public function toArray()
+    {
+        $data = $this->_value;
+        if (!is_array($data) && method_exists($data, 'toArray')) {
+            $data = $data->toArray();
+        }
+        $mappers = $this->mapper ?? [];
+        $this->convertData($data, $mappers);
+        $hiddens = $this->hidden ?? [];
+        $this->hiddenData($data, $hiddens);
+
+        return $data;
+    }
+
+    protected function hiddenData(&$data, array $hiddens)
+    {
+        foreach ($hiddens as $hidden) {
+            $keys = explode('.', $hidden);
+            $this->setHidden($data, $keys);
+        }
+    }
+
+    protected function convertData(&$data, array $mappers)
+    {
+        foreach ($mappers as $key => $mapper) {
+            $keys = explode('.', $key);
+            $this->convertAttr($data, $keys, $mapper);
+        }
+    }
+
+    /**
+     * 转换属性
+     * @param  [type] &$data  [description]
+     * @param  array  $keys   [description]
+     * @param  mxied $mapper [description]
+     * @return [type]         [description]
+     */
+    protected function convertAttr(&$data, array $keys, $mapper)
+    {
+        $key = array_shift($keys);
+        if ($key === '*') {
+            throw_on(!is_array($mapper), '转换属性为数组时，值必须是数组');
+            // 当前$data为数组
+            foreach ($data as &$item) {
+                $this->convertData($item, $mapper);
+            }
+            return;
+        }
+        if (empty($keys)) {
+            if (is_array($mapper)) {
+                // 转换属性为数组时，第一个值为key，第二个值为转换类，如 ['username' => ['user.name', Name::class]]
+                // Name::class 将处理转换的数据
+                $clazz = $mapper;
+                $mapper = array_shift($clazz);
+            }
+            // 已是最后一个key
+            [$spread, $value] = $this->getKeyValue($data, $mapper);
+            if (isset($clazz)) {
+                foreach ($clazz as $class) {
+                    if (is_callable($class)) {
+                        $value = $class($value, $data);
+                    } else {
+                        $handler = static::getHandler($class);
+                        $value = $handler->handle($value, $data);
+                    }
+                }
+            }
+            if ($spread) {
+                foreach ($value as $k => $v) {
+                    $data[ltrim("{$key}_{$k}", '_')] = $v;
+                }
+            } else {
+                $data[$key] = $value;
+            }
+            return;
+        }
+
+        $data = &$data[$key];
+        if (empty($data)) {
+            return;
+        }
+        if (method_exists($data, 'toArray')) {
+            $data = $data->toArray();
+        }
+        $this->convertAttr($data, $keys, $mapper);
+    }
+
+    protected function getKeyValue($data, $key)
+    {
+        $keys = explode('.', $key);
+        do {
+            $key = array_shift($keys);
+            if ($key === '*') {
+                return [true, $data];
+            }
+            $data = &$data[$key];
+            if (method_exists($data, 'toArray')) {
+                $data = $data->toArray();
+            }
+        } while ($data && $keys);
+        return [false, $data];
+    }
+
+    protected function setHidden(&$data, array $keys)
+    {
+        $key = array_shift($keys);
+        if (empty($keys)) {
+            unset($data[$key]);
+        } else {
+            if ($key === '*') {
+                foreach ($data as &$item) {
+                    $this->setHidden($item, $keys);
+                }
+            } else {
+                $data = &$data[$key];
+                if (method_exists($data, 'toArray')) {
+                    $data = $data->toArray();
+                }
+                $this->setHidden($data, $keys);
+            }
+        }
+    }
+
+    public static function _($value)
+    {
+        return new static($value);
+    }
+}
diff --git a/src/Jwt/AutoRefreshJwtAuth.php b/src/Jwt/AutoRefreshJwtAuth.php
new file mode 100644
index 0000000..47c5b26
--- /dev/null
+++ b/src/Jwt/AutoRefreshJwtAuth.php
@@ -0,0 +1,113 @@
+<?php
+
+namespace Zeaven\EasySuit\Jwt;
+
+use Closure;
+use Tymon\JWTAuth\Exceptions\JWTException;
+use Tymon\JWTAuth\Exceptions\PayloadException;
+use Tymon\JWTAuth\Exceptions\TokenBlacklistedException;
+use Tymon\JWTAuth\Exceptions\TokenExpiredException;
+use Tymon\JWTAuth\Exceptions\TokenInvalidException;
+use Tymon\JWTAuth\Exceptions\UserNotDefinedException;
+
+/**
+ * 自定义JWT-auth认证中间件
+ */
+class AutoRefreshJwtAuth
+{
+    /**
+     * Handle an incoming request.
+     *
+     * @param  \Illuminate\Http\Request  $request
+     * @param  \Closure  $next
+     *
+     * @return mixed
+     */
+    public function handle($request, Closure $next, string ...$guards)
+    {
+        $useGuard = auth()->getDefaultDriver();
+        $guards    = empty($guards) ? [auth()->getDefaultDriver()] : $guards;
+        try {
+            foreach ($guards as $guard) {
+                if (! config('auth.guards.' . $guard)) {
+                    continue;
+                }
+                $useGuard = $guard;
+                if ($this->setGuard($useGuard, $request)) {
+                    break;
+                }
+            }
+
+            if (!auth()->user()) {
+                // TODO: 是否需要把token存入数据库中，从后台失效token，增加从后台查询token的合法性
+                throw_e(0xf00012);
+                // TODO: 增加对不同身份用户的认证，如管理员和普通用户
+            }
+        } catch (TokenExpiredException $e) {
+            // throw_e(0xf00002);
+            // 增加token过期，自动刷新的机制
+            auth()->shouldUse($useGuard);
+            $refreshToken = $this->getRefreshToken();
+            // 设置当前请求的token，否则本次请求无效
+            $request->headers->set('Authorization', 'Bearer ' . $refreshToken);
+            auth()->setToken($refreshToken);
+            auth()->setRequest($request);
+            auth()->parseToken()->getPayload();
+
+            $response = $next($request);
+
+            // Send the refreshed token back to the client.
+            $response->headers->set('Authorization', 'Bearer ' . $refreshToken);
+
+            return $response;
+        } catch (TokenInvalidException | TokenBlacklistedException $e) {
+            throw_e(0xf00022);
+        } catch (JWTException $e) {
+            throw_e(0xf00032);
+        }
+
+        return $next($request);
+    }
+
+    private function getRefreshToken()
+    {
+        $token = auth()->getToken()->get();
+
+        return cache()->lock($token, 3)
+            ->block(
+                3,
+                function () use ($token) {
+                    $refreshToken = cache("jwt:token_gracelist:{$token}");
+                    if ($refreshToken) {
+                        return $refreshToken;
+                    }
+
+                    try {
+                        $refreshToken = auth()->refresh();
+                        cache(["jwt:token_gracelist:{$token}" => $refreshToken], 60);
+                        // 刷新token后，删除原来的token
+                    } catch (JWTException $e) {
+                        // sentry($e, compact('token'));
+                        throw_e(0xf00002);
+                    }
+
+                    return $refreshToken;
+                }
+            );
+    }
+
+    private function setGuard(string $useGuard, $request)
+    {
+        $auth = auth($useGuard);
+        $auth->setRequest($request);
+        $auth->parseToken()->getPayload();
+
+        if ($auth->user()) {
+            // 设置当前Guard
+            auth()->shouldUse($useGuard);
+
+            return $true;
+        }
+        return false;
+    }
+}
diff --git a/src/Jwt/JwtAuthencicateProvider.php b/src/Jwt/JwtAuthencicateProvider.php
new file mode 100644
index 0000000..1314474
--- /dev/null
+++ b/src/Jwt/JwtAuthencicateProvider.php
@@ -0,0 +1,26 @@
+<?php
+
+namespace Zeaven\EasySuit\Jwt;
+
+use Zeaven\EasySuit\Jwt\AutoRefreshJwtAuth;
+// use Tymon\JWTAuth\Http\Middleware\Authenticate;
+use App\Http\Middleware\Authenticate;
+use Illuminate\Support\ServiceProvider;
+
+class JwtAuthencicateProvider extends ServiceProvider
+{
+    /**
+     * Register any application services.
+     *
+     * @return void
+     */
+    public function register()
+    {
+        // 指定路由开启 api 验证
+        $this->app->when(['App\Http\Controllers\Api', 'App\Http\Controllers\Admin'])
+            ->needs(Authenticate::class)
+            ->give(function ($app) {
+                return new AutoRefreshJwtAuth($app['auth']);
+            });
+    }
+}
diff --git a/src/MeiliSearch/Factory/RequestFactory.php b/src/MeiliSearch/Factory/RequestFactory.php
new file mode 100644
index 0000000..b20bb86
--- /dev/null
+++ b/src/MeiliSearch/Factory/RequestFactory.php
@@ -0,0 +1,24 @@
+<?php
+
+namespace Zeaven\EasySuit\MeiliSearch\Factory;
+
+use GuzzleHttp\Psr7\Request;
+use Psr\Http\Message\RequestFactoryInterface;
+use Psr\Http\Message\RequestInterface;
+
+class RequestFactory implements RequestFactoryInterface
+{
+    function __construct(private string $key)
+    {
+    }
+
+    public function createRequest(string $method, $uri): RequestInterface
+    {
+        $request = new Request($method, $uri);
+        if ($this->key) {
+            $request = $request->withAddedHeader('X-MEILI-API-KEY', $this->key);
+        }
+
+        return $request;
+    }
+}
diff --git a/src/MeiliSearch/MeiliSearchServiceProvider.php b/src/MeiliSearch/MeiliSearchServiceProvider.php
new file mode 100644
index 0000000..486f23c
--- /dev/null
+++ b/src/MeiliSearch/MeiliSearchServiceProvider.php
@@ -0,0 +1,22 @@
+<?php
+
+namespace Zeaven\EasySuit\MeiliSearch;
+
+use Zeaven\EasySuit\MeiliSearch\Factory\RequestFactory;
+use Illuminate\Support\ServiceProvider;
+use MeiliSearch\Client as MeiliSearch;
+
+class MeiliSearchServiceProvider extends ServiceProvider
+{
+    public function register()
+    {
+        // 修复MeiliSearch-php缺少api key
+        if (class_exists(MeiliSearch::class)) {
+            $this->app->scoped(MeiliSearch::class, function ($app) {
+                $config = $app['config']->get('scout.meilisearch');
+                $apiKey = ($config['apikey'] ?? '') ?: $config['key'];
+                return new MeiliSearch($config['host'], $config['key'], null, new RequestFactory($apiKey));
+            });
+        }
+    }
+}
diff --git a/src/MeiliSearch/readme.md b/src/MeiliSearch/readme.md
new file mode 100644
index 0000000..20daf98
--- /dev/null
+++ b/src/MeiliSearch/readme.md
@@ -0,0 +1,22 @@
+## MeiliSearch启动
+
+MeiliSearch如果以development方式启动，则masterKey不是必须的
+
+### MasterKey作用
+
+做development方式下MasterKey可以访问默认生成的AdminKey和SearchKey
+
+即
+```php
+$client = new Client('http://127.0.0.1:7700', 'masterKey');
+$client->getRawKeys();
+// 返回的 private 和 public
+```
+
+1. private key可以用于在web端查询使用
+2. private key和public key都可以在环境变量中替换masterKey使用
+3. masterKey是无法用于同步索引的
+
+### 生成api key
+
+请在production模式下，使用masterKey生成apikey
\ No newline at end of file
diff --git a/src/Request/RequestExtension.php b/src/Request/RequestExtension.php
new file mode 100644
index 0000000..c91891c
--- /dev/null
+++ b/src/Request/RequestExtension.php
@@ -0,0 +1,208 @@
+<?php
+
+/**
+ * 输入类
+ * Date: 2018/7/10
+ * Time: 14:31
+ *
+ * 用法：
+ * App\Http\Requests\AdminRequest
+ * $request->fields(['parameter1'=>['default'=>'123','rule'=>'required|integer','as'=>'alias','type'=>'int'],'parameter2'=>12,'paramter3'])
+ * 或在AdminRequest的rule属性进行配置后
+ * $request->params(null|false) => 返回参数value数组
+ * $request->params(true) => 返回参数key/value数组
+ * $request->params(['a','b']) => 返回指定key的参数key/value数组
+ * $request->params(OtherClass) => 将参数key/value数组传入OtherClass构造函数，并返回OtherClass实例
+ *
+ * 3种参数的输入形式
+ *      1.不指定默认值的参数 如：'paramter'
+ *      2.指定默认值的参数 如：'paramter'=>'默认值'
+ *      3.指定默认值,别名,类型,验证规则的参数 如 'parameter1'=>['default'=>'123','rule'=>'required|integer','as'='alias']
+ *      notice:以上1,2种方法，如果没有指定验证规则，则会调用App\Http\Requests\AdminRequest里面的默认验证规则
+ *
+ * 参数可选的属性
+ * default:指定参数的默认值
+ * rule:指定参数的验证规则
+ *      rule输入形式：直接用laravel自带的验证规格，参考：https://laravel-china.org/docs/laravel/5.6/validation/1372#c58a91
+ * as: 指定参数的别名，如"post_name"参数指定别名为"name",返回的数据的键名为"name"
+ * type:指定参数的数据类型
+ *      可选的值：
+ *          -int  强制转换成int类型
+ *          -float 强制转换成float类型
+ *          -ip  ip类型
+ *          -url url类型
+ *          -email 邮件类型
+ *          -split 将字符串转换成数组
+ *          -array 将json数据转换成数组
+ *          -json 将json数据转换成数组
+ *          -date 将字符串转成Carbon日期
+ *          -carbon 将字符串转成Carbon日期
+ *
+ *
+ *
+ *
+ */
+
+namespace Zeaven\EasySuit\Request;
+
+use Exception;
+use Illuminate\Support\Carbon;
+use Illuminate\Support\Collection;
+use Illuminate\Validation\ValidationException;
+
+final class RequestExtension
+{
+    const VALID_STRINGS = [
+        'email' => FILTER_VALIDATE_EMAIL,
+        'url' => FILTER_VALIDATE_URL,
+        'ip' => FILTER_VALIDATE_IP,
+        'float' => FILTER_VALIDATE_FLOAT,
+        'int' => FILTER_VALIDATE_INT,
+        'bool' => FILTER_VALIDATE_BOOLEAN,
+
+    ];
+    private $request;
+
+    public function __construct($request)
+    {
+        $this->request = $request;
+    }
+
+    public function get(array $arguments)
+    {
+        //解析
+        $configs = $this->expalinConfigs($arguments);
+
+        //验证参数的合法性
+        $validate_rules = $this->coverToValidatorRules($configs);
+        $messages = method_exists($this->request, 'messages') ? $this->request->messages() : [];
+        $attributes = method_exists($this->request, 'attributes') ? $this->request->attributes() : [];
+        try {
+            $data = $this->request->validate($validate_rules, $messages, $attributes);
+            //获取参数的默认值
+            $result = $this->getRuleValues($data, $configs);
+            return $result;
+        } catch (Exception $e) {
+            throw_e($e);
+        } catch (ValidationException $e) {
+            throw_e(head($e->errors())[0], 4);
+        } catch (\Exception $e) {
+            throw_e($e);
+        }
+    }
+
+    public function values(): array
+    {
+        try {
+            $data = $this->request->all();
+
+            $configs = $this->request->getRuleConfig();
+            return $this->getRuleValues($data, $configs);
+        } catch (Exception $e) {
+            throw_e($e);
+        } catch (ValidationException $e) {
+            throw_e(head($e->errors())[0], 4);
+        } catch (\Exception $e) {
+            throw_e($e);
+        }
+    }
+
+    private function expalinConfigs(array $arguments)
+    {
+        // ['attribute1'=>['default'=>1,'rule'=>'required|array','as'=>'alias','type'=>'int' ],'attribute2','attribute3'=>3]
+        return collect($arguments)->mapWithKeys(function ($item, $key) {
+            if (is_numeric($key)) {
+                $key = $item;
+                $item = ['default' => null];
+            } elseif (!is_array($item)) {
+                $item = ['rule' => 'nullable', 'default' => $item];
+            }
+            return [$key => $item];
+        })->toArray();
+    }
+
+
+    /**
+     * 转换成laravel默认的验证规则
+     * @param array $configs
+     */
+    private function coverToValidatorRules(array $configs)
+    {
+        if (method_exists($this->request, 'getRules')) {
+            $request_rules = $this->request->getRules(array_keys($configs));
+        } else {
+            $request_rules = [];
+        }
+        foreach ($configs as $key => $config) {
+            $request_rules[$key] = $config['rule'] ?? $request_rules[$key] ?? 'string';
+        };
+        return $request_rules;
+    }
+
+    private function getRuleValues(array $validate_data, array $configs)
+    {
+        $result = [];
+        foreach ($configs as $key => $config) {
+            $input = $validate_data[$key] ?? '';
+            if (empty($config)) {
+                $result[$key] = $input ?? '';
+                continue;
+            }
+            if (!isset($config['urldecode']) || $config['urldecode'] !== false) {
+                is_string($input) && $input = rawurldecode($input);
+            }
+            if (!isset($input) || blank($input)) {
+                // 设默认值
+                $input = array_key_exists('default', $config) ? $config['default'] : '';
+            } elseif (isset($config['type'])) {
+                // 转类型
+                $input = $this->convertToType($input, $config['type']);
+            }
+
+            //别名转换
+            if (isset($config['as'])) {
+                $result[$config['as']] = $input;
+            } else {
+                $result[$key] = $input;
+            }
+        }
+        return $result;
+    }
+
+    public function convertToType($value, $type)
+    {
+        switch ($type) {
+            case 'ip':
+            case 'int':
+            case 'float':
+            case 'email':
+            case 'url':
+            case 'bool':
+                $value = filter_var($value, self::VALID_STRINGS[$type]);
+                break;
+            case 'split':
+                $value = explode(',', $value);
+                break;
+            case 'array':
+            case 'json':
+                if (is_array($value)) {
+                    break;
+                }
+                $value = json_decode($value, JSON_UNESCAPED_UNICODE);
+                break;
+            case 'date':
+            case 'carbon':
+                if (is_numeric($value)) {
+                    $value = Carbon::createFromTimestamp($value);
+                } else {
+                    $value = Carbon::parse($value);
+                }
+
+                break;
+            case 'ip2long':
+                $value = ip2long($value) ?: null;
+                break;
+        }
+        return $value;
+    }
+}
diff --git a/src/Request/RequestExtensionProvider.php b/src/Request/RequestExtensionProvider.php
new file mode 100644
index 0000000..eecba6e
--- /dev/null
+++ b/src/Request/RequestExtensionProvider.php
@@ -0,0 +1,83 @@
+<?php
+
+namespace Zeaven\EasySuit\Request;
+
+use Illuminate\Support\ServiceProvider;
+use Request;
+use Symfony\Component\Finder\Finder;
+
+/**
+ * 用法：
+ * App\Http\Requests\AdminRequest
+ * $request->fields(['parameter1'=>['default'=>'123','rule'=>'required|integer','as'=>'alias','type'=>'int'],'parameter2'=>12,'paramter3'])
+ * 或在AdminRequest的rule属性进行配置后
+ * $request->params(null|false) => 返回参数value数组
+ * $request->params(true) => 返回参数key/value数组
+ * $request->params(['a','b']) => 返回指定key的参数key/value数组
+ * $request->params(OtherClass) => 将参数key/value数组传入OtherClass构造函数，并返回OtherClass实例
+*/
+
+class RequestExtensionProvider extends ServiceProvider
+{
+    /**
+     * Bootstrap services.
+     *
+     * @return void
+     */
+    public function boot()
+    {
+    }
+
+    /**
+     * Register services.
+     *
+     * @return void
+     */
+    public function register()
+    {
+        Request::macro(
+            'fields',
+            function (array $arguments, bool $removeKeys = true) {
+                $requestExtend = new RequestExtension($this);
+                $result = $requestExtend->get($arguments);
+                return !$removeKeys ? $result : array_values($result);
+            }
+        );
+
+        Request::macro(
+            'params',
+            function ($param_class = null) {
+                $requestExtend = new RequestExtension($this);
+                $result = $requestExtend->values();
+                if (blank($param_class) || $param_class === false) {
+                    return array_values($result);
+                } elseif ($param_class === true) {
+                    return $result;
+                } elseif (is_array($param_class)) {
+                    $res = [];
+                    foreach ($param_class as $value) {
+                        $res[] = isset($result[$value]) ? $result[$value] : null;
+                    }
+                    return $res;
+                } elseif (class_exists($param_class)) {
+                    return new $param_class($result);
+                }
+            }
+        );
+
+        Request::macro(
+            'values',
+            function () {
+                return $this->params(false);
+            }
+        );
+
+        Request::macro(
+            'getSort',
+            function () {
+                $sorter = $this->get('sorter') ?? '';
+                return json_decode($sorter, true) ?: [];
+            }
+        );
+    }
+}
diff --git a/src/SanctumExtension/Listeners/TokenAuthenticatedListener.php b/src/SanctumExtension/Listeners/TokenAuthenticatedListener.php
new file mode 100644
index 0000000..154e481
--- /dev/null
+++ b/src/SanctumExtension/Listeners/TokenAuthenticatedListener.php
@@ -0,0 +1,24 @@
+<?php
+
+namespace Zeaven\EasySuit\SanctumExtension\Listeners;
+
+use Laravel\Sanctum\Events\TokenAuthenticated;
+
+class TokenAuthenticatedListener
+{
+    /**
+     * 处理事件
+     *
+     * @param  \App\Events\OrderShipped  $event
+     * @return void
+     */
+    public function handle(TokenAuthenticated $event)
+    {
+        $userProvider = auth()->guard()->getProvider();
+        if (method_exists($userProvider, 'getFields')) {
+            $fields = $userProvider->getFields();
+            $user = $event->token->tokenable;
+            $user->setVisible($fields);
+        }
+    }
+}
diff --git a/src/SanctumExtension/Middleware/TokenRefreshAuthenticate.php b/src/SanctumExtension/Middleware/TokenRefreshAuthenticate.php
new file mode 100644
index 0000000..3120a16
--- /dev/null
+++ b/src/SanctumExtension/Middleware/TokenRefreshAuthenticate.php
@@ -0,0 +1,99 @@
+<?php
+
+namespace Zeaven\EasySuit\SanctumExtension\Middleware;
+
+use Closure;
+use DB;
+use Illuminate\Auth\Middleware\Authenticate;
+use Illuminate\Database\Eloquent\Model;
+use Laravel\Sanctum\PersonalAccessToken;
+use Laravel\Sanctum\TransientToken;
+
+class TokenRefreshAuthenticate extends Authenticate
+{
+
+
+    /**
+     * Handle an incoming request.
+     *
+     * @param  \Illuminate\Http\Request  $request
+     * @param  \Closure  $next
+     * @param  string[]  ...$guards
+     * @return mixed
+     *
+     * @throws \Illuminate\Auth\AuthenticationException
+     */
+    public function handle($request, Closure $next, ...$guards)
+    {
+        $newAccessToken = $this->authenticate($request, $guards);
+        $response = $next($request);
+
+        if ($newAccessToken) {
+            // Send the refreshed token back to the client.
+            $response->headers->set('Authorization', 'Bearer ' . $newAccessToken->plainTextToken);
+        }
+
+        return $response;
+    }
+
+    /**
+     * Determine if the user is logged in to any of the given guards.
+     *
+     * @param  \Illuminate\Http\Request  $request
+     * @param  array  $guards
+     * @return void
+     *
+     * @throws \Illuminate\Auth\AuthenticationException
+     */
+    protected function authenticate($request, array $guards)
+    {
+        if (empty($guards)) {
+            $guards = [null];
+        }
+
+        foreach ($guards as $guard) {
+            if ($this->auth->guard($guard)->check()) {
+                $this->auth->shouldUse($guard);
+                $newAccessToken = $this->refreshToken($this->auth->user());
+
+                return $newAccessToken;
+            }
+        }
+
+        $this->unauthenticated($request, $guards);
+    }
+
+    private function refreshToken(Model $user)
+    {
+        $currentAccessToken = $user->currentAccessToken();
+        if ($currentAccessToken instanceof TransientToken) {
+            // 同源策略，将从cookie和session中读取用户信息，使用xsrfToken保护
+            return;
+        }
+        // 第三方请求将定期刷新token，防止token泄漏造成安全问题
+        $config = config('sanctum');
+        $refreshTTL = $config['refresh_ttl'];
+        $removeToken = $config['remove_refresh_expire_token'];
+        $refreshGraceTTL = $config['refresh_grace_ttl'] ?: 3;
+        if (!$refreshTTL) {
+            return;
+        }
+
+        return cache()->lock($currentAccessToken->plainTextToken, $refreshGraceTTL)
+            ->block(
+                1,
+                function () use ($currentAccessToken, $refreshTTL, $removeToken) {
+                    if ($currentAccessToken->created_at->lt(now()->subMinutes($refreshTTL))) {
+                        // 过期刷新
+                        return DB::transaction(function () use ($currentAccessToken, $removeToken) {
+                            $newAccessToken = $currentAccessToken->tokenable->createToken($currentAccessToken->name, $currentAccessToken->abilities);
+                            auth()->guard(config('sanctum.guard')[0])->login($currentAccessToken->tokenable);
+                            $removeToken && $currentAccessToken->delete();     // 自行判断是否删除
+
+                            return $newAccessToken;
+                        });
+                    }
+                }
+            );
+    }
+}
diff --git a/src/SanctumExtension/SanctumExtensionProvider.php b/src/SanctumExtension/SanctumExtensionProvider.php
new file mode 100644
index 0000000..9930b56
--- /dev/null
+++ b/src/SanctumExtension/SanctumExtensionProvider.php
@@ -0,0 +1,44 @@
+<?php
+
+namespace Zeaven\EasySuit\SanctumExtension;
+
+use Zeaven\EasySuit\SanctumExtension\Listeners\TokenAuthenticatedListener;
+use Zeaven\EasySuit\SanctumExtension\Middleware\TokenRefreshAuthenticate;
+use App\Http\Middleware\Authenticate;
+use Event;
+use Illuminate\Support\ServiceProvider;
+use Laravel\Sanctum\Events\TokenAuthenticated;
+
+class SanctumExtensionProvider extends ServiceProvider
+{
+
+
+    /**
+     * Register any application services.
+     *
+     * @return void
+     */
+    public function register()
+    {
+        // 指定路由开启 api 验证
+        // $this->app->when(['App\Http\Controllers\Api', 'App\Http\Controllers\Admin'])
+        //     ->needs(Authenticate::class)
+        //     ->give(function ($app) {
+        //         return new TokenRefreshAuthenticate($app['auth']);
+        //     });
+    }
+
+    /**
+     * Bootstrap any application services.
+     *
+     * @param  \Closure  $callback
+     * @return void
+     */
+    public function boot()
+    {
+        Event::listen(
+            TokenAuthenticated::class,
+            [TokenAuthenticatedListener::class, 'handle']
+        );
+    }
+}
diff --git a/src/SanctumExtension/readme.md b/src/SanctumExtension/readme.md
new file mode 100644
index 0000000..85f07e8
--- /dev/null
+++ b/src/SanctumExtension/readme.md
@@ -0,0 +1,49 @@
+## Sanctum 验证说明
+
+Sanctum验证分为同源和第三方请求
+
+### 同源验证
+
+> 同源验证下需要先请求CSRF保护路由，即 /sanctum/csrf-cookie
+> HTTP库会设置cookie的X-XSRF-TOKEN请求头，可参考官方说明
+> 使用HasApiTokens的createToken创建accessToken后，会自动将用户标志写入session
+> 后续请求会尝试从session读取用户标志，并以 sanctum.guard 配置的Guard恢复用户信息（对应的Guard必须是session驱动）
+> 
+> **注：同源情况下无需设置 Authorization 请求头**
+
+> 如果session过期，则授权失效
+> 此时如果请求头带有 Authorization认证，sanctum也会使用自身的Guard通过token恢复用户信息
+
+
+### 第三方请求
+
+> 不在sanctum.stateful配置的安全域下，如移动端请求是无法通过CSRF保护和sessoin恢复用户标识的
+> 这时候需要在请求头添加Authorization认证信息
+
+
+### 自动刷新Token
+
+> sanctum的token默认有个过期时间配置 sanctum.expiration，过期则无法再次使用
+> 如果设置过期时间太长，则安全性太低
+> 因此添加一个自动刷新token功能，增加如下配置到 sanctum.php
+> 
+> ```php
+>     'expiration' => 20160,  // 两周过期时间
+>     'refresh_ttl' => 60,    // 一个小时刷新一次token
+>     'refresh_grace_ttl' => 5, // 刷新token的灰色时间，防止同一token并发多个请求刷新多次
+>     'remove_refresh_expire_token' => true,  // 是否移除刷新后的token
+> ```
+> 
+> 如上配置，token将会在每小时刷新一次，每次有效期是两周
+> 即两周内有访问，token有效期就可以一直往后延
+> 每次刷新后，原来的token也可以选择是否需要删除
+> 
+> **注：自动刷新token必须添加Authorization请求头**
+> 
+>> 每次刷新token后，请求的响应头会添加 Authorization 返回新的token，将其替换掉原来的token即可
+
+### 指定验证路由
+
+> 验证方式对应的Provider会替换掉默认的Authenticate对象，以接管验证逻辑
+> 但是默认的路由或第三方包提供的接口不希望验证受到影响
+> 所以指定了Api或Admin下的控制器才走自定义验证，可自行修改其他路由地址
\ No newline at end of file
diff --git a/src/ServiceProvider.php b/src/ServiceProvider.php
new file mode 100644
index 0000000..a8a50ef
--- /dev/null
+++ b/src/ServiceProvider.php
@@ -0,0 +1,157 @@
+<?php
+
+namespace Zeaven\EasySuit;
+
+use App\Exceptions\Handler;
+use App\Http\Middleware\Authenticate;
+use Auth;
+use Illuminate\Support\Facades\Route;
+use Illuminate\Support\ServiceProvider as BaseServiceProvider;
+use Illuminate\Support\Stringable;
+use Str;
+use Symfony\Component\Finder\Finder;
+use Zeaven\EasySuit\Auth\Authenticate as EasySuitAuthenticate;
+use Zeaven\EasySuit\Auth\CacheEloquentUserProvider;
+use Zeaven\EasySuit\Exceptions\Handler as EasySuitHandler;
+
+class ServiceProvider extends BaseServiceProvider
+{
+    /**
+     * Bootstrap services.
+     *
+     * @return void
+     */
+    public function boot()
+    {
+        $this->publishes([
+        __DIR__ . '/../config/easy_suit.php' => config_path('easy_suit.php'),
+        __DIR__ . '/../config/error_code.php' => lang_path('en/error_code.php'),
+        ]);
+
+        if ($this->app->runningInConsole()) {
+            $this->loadCommands();
+        }
+    }
+
+    /**
+     * Register services.
+     *
+     * @return void
+     */
+    public function register()
+    {
+        $this->mergeConfigFrom(__DIR__ . '/../config/easy_suit.php', 'easy_suit');
+        $this->mergeConfigFrom(__DIR__ . '/../config/sanctum.php', 'sanctum');
+
+        $this->configException();
+
+
+        $this->configAuth();
+
+        $this->configStrable();
+
+        $this->configRoute();
+    }
+
+    private function configException()
+    {
+        $this->app->bind(Handler::class, EasySuitHandler::class);
+    }
+
+    private function loadCommands()
+    {
+        $namespace = 'Zeaven\\EasySuit\\';
+        $commands = [];
+        foreach ((new Finder())->in(__DIR__ . '/Console/Commands')->files() as $command) {
+            $realPath = $command->getRealPath();
+            if (Str::contains($realPath, 'stubs')) {
+                continue;
+            }
+            $commands[] = $namespace . str_replace(
+                ['/', '.php'],
+                ['\\', ''],
+                Str::after($command->getRealPath(), 'laravel-easy-suit/src/')
+            );
+        }
+        $this->commands($commands);
+    }
+
+    private function configAuth()
+    {
+        $this->app->bind(Authenticate::class, EasySuitAuthenticate::class);
+
+        // 自定义用户提供者，默认每次通过token查询用户是否存在，自定义提供者可在查询中增加缓存，减少数据库查询，但是用户状态更新不及时
+        // 需要手动调用CustomEloquentUserProvider::refresh($key)清除登录缓存
+        Auth::provider(
+            'cache_eloquent',
+            function ($app, array $config) {
+                // 返回 Illuminate\Contracts\Auth\UserProvider 实例...
+                $model = $config['model'];
+                $fields = $config['fields'];
+                $authModel = $config['auth_model'];
+
+                return $app->make(CacheEloquentUserProvider::class, compact('model', 'authModel', 'fields'));
+            }
+        );
+    }
+
+    private function configStrable()
+    {
+        /**
+         * 字符串增强
+         * Str::replaceMatch('{foo} {bar}', ['foo' => 1, 'bar' => ]) ==> '1 2'
+         * @var [type]
+         */
+        Str::macro(
+            'replaceMatch',
+            function (string $subject, array $replacements) {
+                return preg_replace_callback(
+                    "/{([^{}]+)}/",
+                    function ($matches) use ($replacements) {
+                        $matche = $matches[1];
+                        foreach ($replacements as $key => $value) {
+                            if ($key === $matche) {
+                                return $value;
+                            }
+                        }
+                        return $matches[0];
+                    },
+                    $subject
+                );
+            }
+        );
+        Stringable::macro(
+            'replaceMatch',
+            function (array $replacements) {
+                return preg_replace_callback(
+                    "/{([^{}]+)}/",
+                    function ($matches) use ($replacements) {
+                        $matche = $matches[1];
+                        foreach ($replacements as $key => $value) {
+                            if ($key === $matche) {
+                                return $value;
+                            }
+                        }
+                        return $matches[0];
+                    },
+                    $this->value()
+                );
+            }
+        );
+    }
+
+    private function configRoute()
+    {
+        Route::macro(
+            'configRoute',
+            function (string $name, string $prefix = '/', array $middleware = []) {
+                $namespace = "App\\Http\\Controllers\\" . ucfirst($name);
+                Route::prefix($prefix)
+                    ->middleware(empty($middleware) ? $name : $middleware)
+                    ->namespace($namespace)
+                    ->domain(config('app.url'))
+                    ->group(base_path("routes/{$name}.php"));
+            }
+        );
+    }
+}
diff --git a/src/Services/PostmanClient.php b/src/Services/PostmanClient.php
new file mode 100644
index 0000000..1bf18b3
--- /dev/null
+++ b/src/Services/PostmanClient.php
@@ -0,0 +1,60 @@
+<?php
+
+/**
+ * postman client
+ *
+ * @date    2019-04-11 13:52:34
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Services;
+
+use GuzzleHttp\Client;
+use Exception;
+
+class PostmanClient
+{
+    private $xApiKey;
+    private $client;
+
+    public function __construct()
+    {
+        $this->xApiKey = config('easy_suit.postman.token');
+
+        $this->client = new Client([
+            'base_uri' => 'https://api.getpostman.com/',
+            // 'timeout' => 10,
+            'debug' => false,
+            'headers' => [
+                'X-Api-Key' => $this->xApiKey
+            ]
+        ]);
+    }
+
+    public function request(string $method, string $url, array $params = [])
+    {
+        $response = $this->client->request($method, $url, $params);
+        if ($response->getStatusCode() === 200) {
+            $body = $response->getBody();
+            $result = json_decode((string)$body, true);
+            return $result;
+        } else {
+            throw_e(new Exception('请求失败：' . $url));
+        }
+    }
+
+    /**
+     * postmanClient->collects('get', 'id')
+     * @param string $method [description]
+     * @param array $arguments [description]
+     * @return [type]            [description]
+     */
+    public function __call(string $method, array $arguments)
+    {
+        $method = strtolower($method);
+        if (in_array($method, ['get', 'post', 'put', 'delete'])) {
+            return $this->request($method, ...$arguments);
+        }
+        throw new Exception('方法不存在:' . $method);
+    }
+}
diff --git a/src/Validators/IdCardValidator.php b/src/Validators/IdCardValidator.php
new file mode 100644
index 0000000..ace376b
--- /dev/null
+++ b/src/Validators/IdCardValidator.php
@@ -0,0 +1,143 @@
+<?php
+
+/**
+ * 身份证卡号验证
+ *
+ * @date    2020-08-05 13:39:41
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Validators;
+
+class IdCardValidator implements Validator
+{
+    public function validate($attribute, $value, $parameters, $validator): bool
+    {
+        return self::isValid($value);
+    }
+
+    public function replacer($message, $attribute, $rule, $parameters, $validator): string
+    {
+        return str_replace(':id_card', request()->input($attribute), $message);
+    }
+    /**
+     * 校验身份证号是否合法
+     * @param string $num 待校验的身份证号
+     * @return bool
+     */
+    private static function isValid(string $num)
+    {
+        //老身份证长度15位，新身份证长度18位
+        $length = strlen($num);
+        if ($length == 15) { //如果是15位身份证
+            //15位身份证没有字母
+            if (!is_numeric($num)) {
+                return false;
+            }
+            // 省市县（6位）
+            $areaNum = substr($num, 0, 6);
+            // 出生年月（6位）
+            $dateNum = substr($num, 6, 6);
+        } elseif ($length === 18) { //如果是18位身份证
+            //基本格式校验
+            if (!preg_match('/^\d{17}[0-9xX]$/', $num)) {
+                return false;
+            }
+            // 省市县（6位）
+            $areaNum = substr($num, 0, 6);
+            // 出生年月日（8位）
+            $dateNum = substr($num, 6, 8);
+        } else { //假身份证
+            return false;
+        }
+
+        //验证地区
+        if (!self::isAreaCodeValid($areaNum)) {
+            return false;
+        }
+
+        //验证日期
+        if (!self::isDateValid($dateNum)) {
+            return false;
+        }
+
+        //验证最后一位
+        if (!self::isVerifyCodeValid($num)) {
+            return false;
+        }
+
+        return true;
+    }
+
+    /**
+     * 省市自治区校验
+     * @param string $area 省、直辖市代码
+     * @return bool
+     */
+    private static function isAreaCodeValid(string $area)
+    {
+        $provinceCode = substr($area, 0, 2);
+
+        // 根据GB/T2260—999，省市代码11到65
+        if (11 <= $provinceCode && $provinceCode <= 65) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    /**
+     * 验证出生日期合法性
+     * @param string $date 日期
+     * @return bool
+     */
+    private static function isDateValid(string $date)
+    {
+        if (strlen($date) == 6) { //15位身份证号没有年份，这里拼上年份
+            $date = '19' . $date;
+        }
+        $year  = intval(substr($date, 0, 4));
+        $month = intval(substr($date, 4, 2));
+        $day   = intval(substr($date, 6, 2));
+
+        //日期基本格式校验
+        if (!checkdate($month, $day, $year)) {
+            return false;
+        }
+
+        //日期格式正确，但是逻辑存在问题(如:年份大于当前年)
+        $currYear = date('Y');
+        if ($year > $currYear) {
+            return false;
+        }
+        return true;
+    }
+
+    /**
+     * 验证18位身份证最后一位
+     * @param string $num 待校验的身份证号
+     * @return bool
+     */
+    private static function isVerifyCodeValid(string $num)
+    {
+        if (strlen($num) == 18) {
+            $factor = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
+            $tokens = ['1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'];
+
+            $checkSum = 0;
+            for ($i = 0; $i < 17; $i++) {
+                $checkSum += intval($num[$i]) * $factor[$i];
+            }
+
+            $mod   = $checkSum % 11;
+            $token = $tokens[$mod];
+
+            $lastChar = strtoupper($num[17]);
+
+            if ($lastChar != $token) {
+                return false;
+            }
+        }
+        return true;
+    }
+}
diff --git a/src/Validators/MbMaxValidator.php b/src/Validators/MbMaxValidator.php
new file mode 100644
index 0000000..299bf3a
--- /dev/null
+++ b/src/Validators/MbMaxValidator.php
@@ -0,0 +1,24 @@
+<?php
+
+/**
+ *
+ * 中文字符长度验证
+ * @date    2019-03-13 18:27:27
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Validators;
+
+class MbMaxValidator implements Validator
+{
+    public function validate($attribute, $value, $parameters, $validator): bool
+    {
+        [$max] = $parameters;
+        return mb_strlen($value) <= $max;
+    }
+
+    public function replacer($message, $attribute, $rule, $parameters, $validator): string
+    {
+        return str_replace(':mb_max', $parameters[0], $message);
+    }
+}
diff --git a/src/Validators/MobileValidator.php b/src/Validators/MobileValidator.php
new file mode 100644
index 0000000..dcb0570
--- /dev/null
+++ b/src/Validators/MobileValidator.php
@@ -0,0 +1,25 @@
+<?php
+
+/**
+ * 手机号验证
+ * Date: 2019/3/27
+ * Time: 16:44
+ */
+
+namespace Zeaven\EasySuit\Validators;
+
+class MobileValidator implements Validator
+{
+    public function validate($attribute, $value, $parameters, $validator): bool
+    {
+        if (preg_match('/^100\d{6,}$/', $value)) {
+            return true;
+        }
+        return  preg_match("/^1[34578]\d{9}$/", $value);
+    }
+
+    public function replacer($message, $attribute, $rule, $parameters, $validator): string
+    {
+        return str_replace(':mobile', request()->input($attribute), $message);
+    }
+}
diff --git a/src/Validators/Validator.php b/src/Validators/Validator.php
new file mode 100644
index 0000000..b06f941
--- /dev/null
+++ b/src/Validators/Validator.php
@@ -0,0 +1,34 @@
+<?php
+
+/**
+ *
+ *
+ * @date    2019-03-13 18:25:58
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Validators;
+
+interface Validator
+{
+    /**
+     * 验证规则
+     * @param  string $attribute  参数名
+     * @param  string $value      参数值
+     * @param  array $parameters  规则参数，如规则size:1,20，则参数为[1,20]
+     * @param  object $validator  验证实例
+     * @return bool               是否通过验证
+     */
+    public function validate($attribute, $value, $parameters, $validator): bool;
+
+    /**
+     * 验证错误信息字符串替换
+     * @param  string $message    验证错误信息
+     * @param  string $attribute  参数名
+     * @param  string $rule       参数规则
+     * @param  array $parameters  验证参数
+     * @param  object $validator  验证实例
+     * @return string             返回替换后的错误信息
+     */
+    public function replacer($message, $attribute, $rule, $parameters, $validator): string;
+}
diff --git a/src/Validators/ValidatorExtension.php b/src/Validators/ValidatorExtension.php
new file mode 100644
index 0000000..92aac98
--- /dev/null
+++ b/src/Validators/ValidatorExtension.php
@@ -0,0 +1,26 @@
+<?php
+
+/**
+ * 验证扩展
+ *
+ * @date    2019-03-13 18:24:39
+ * @version $Id$
+ */
+
+namespace Zeaven\EasySuit\Validators;
+
+use Str;
+use Validator;
+
+class ValidatorExtension
+{
+    public static function add($class, ?string $name = null)
+    {
+        if (empty($name)) {
+            $name = Str::snake(str_replace('Validator', '', class_basename($class)));
+        }
+        Validator::extend($name, $class . '@validate');
+
+        Validator::replacer($name, $class . '@replacer');
+    }
+}
diff --git a/src/Validators/ValidatorServiceProvider.php b/src/Validators/ValidatorServiceProvider.php
new file mode 100644
index 0000000..68601e3
--- /dev/null
+++ b/src/Validators/ValidatorServiceProvider.php
@@ -0,0 +1,33 @@
+<?php
+
+namespace Zeaven\EasySuit\Validators;
+
+use Zeaven\EasySuit\Validators\MbMaxValidator;
+use Zeaven\EasySuit\Validators\MobileValidator;
+use Zeaven\EasySuit\Validators\ValidatorExtension;
+use Illuminate\Support\ServiceProvider;
+
+class ValidatorServiceProvider extends ServiceProvider
+{
+
+    /**
+     * Bootstrap services.
+     *
+     * @return void
+     */
+    public function boot()
+    {
+        ValidatorExtension::add(MbMaxValidator::class);
+        ValidatorExtension::add(IdCardValidator::class);
+        ValidatorExtension::add(MobileValidator::class);
+    }
+
+    /**
+     * Register services.
+     *
+     * @return void
+     */
+    public function register()
+    {
+    }
+}
diff --git a/src/helpers.php b/src/helpers.php
new file mode 100644
index 0000000..05f05d6
--- /dev/null
+++ b/src/helpers.php
@@ -0,0 +1,270 @@
+<?php
+
+use Zeaven\EasySuit\Annotations\AnnoLog;
+use Zeaven\EasySuit\Exceptions\Exception;
+
+//成功返回json格式数据
+if (!function_exists('ok')) {
+    function ok($result = null, array $headers = [])
+    {
+        if (blank($result)) {
+        } elseif ($result instanceof Symfony\Component\HttpFoundation\Response) {
+            return $result;
+        } elseif (is_a($result, Illuminate\Support\Collection::class)) {
+            $result = compact('result');
+        } elseif (is_array($result)) {
+            array_key_exists(0, $result) && $result = compact('result');
+        } elseif ($result instanceof App\Commons\Http\ResponseMappers\BaseResponseMapper) {
+            if ($result->isArray()) {
+                $result = [
+                    'result' => $result->toArray()
+                ];
+            }
+        } elseif (!is_object($result)) {
+            $result = compact('result');
+        }
+        return response()->json($result)->withHeaders($headers);
+    }
+}
+
+
+/**
+ * 异常抛出
+ * throw_e(500)
+ * throw_e('message', 500)
+ */
+if (!function_exists('throw_e')) {
+    function throw_e($err, int|array $code = 500, ?array $data = null)
+    {
+        if (is_array($code)) {
+            [$code, $data] = [500, $code];
+        }
+        if (is_numeric($err)) {
+            [$err, $code] = ['', $err];
+        }
+        if ($err instanceof Exception) {
+            throw $err;
+        } else {
+            request()->errorData($data);
+            if ($code > 550) {
+                throw new Exception(strval($err), 500, null, $code);
+            } else {
+                throw new Exception(strval($err), $code, null, $code);
+            }
+        }
+    }
+}
+// 条件异常
+if (!function_exists('throw_on')) {
+    function throw_on($bool, $err, int|array $code = 500, ?array $data = null)
+    {
+        if ($bool) {
+            throw_e($err, $code, $data);
+        }
+        return $bool;
+    }
+}
+// 空异常
+if (!function_exists('throw_empty')) {
+    function throw_empty($empty, $err, int|array $code = 500, ?array $data = null)
+    {
+        if (empty($empty)) {
+            throw_e($err, $code, $data);
+        }
+        return $empty;
+    }
+}
+
+if (! function_exists('common_path')) {
+    function common_path(string $path = '')
+    {
+        return app_path('Common/' . $path);
+    }
+}
+
+if (! function_exists('anno_log')) {
+    function anno_log($key, $value = null)
+    {
+        AnnoLog::data($key, $value);
+    }
+}
+
+
+/**
+ * 比较两个数字的大小
+ * @param  int|string  $a
+ * @param  int|string  $b
+ * @param  string  $operator  比较符号，'=','>=','>','<','!='
+ * @return [type]           [description]
+ */
+function _bccomp($a, $b, $operator = '=')
+{
+    if (function_exists('bccomp')) {
+        return version_compare(bccomp(strval($a), strval($b), 6), 0, $operator);
+    } else {
+        $result = strcmp(strval(round(floatval($a), 6)), strval(round(floatval($b), 6)));
+        return version_compare($result, 0, $operator);
+    }
+}
+
+function _bcadd($a, $b, $scale = 2)
+{
+    return round(floatval(bcadd($a, $b, 5)), $scale);
+}
+
+function _bcsub($a, $b, $scale = 2)
+{
+    return round(floatval(bcsub($a, $b, 5)), $scale);
+}
+
+function _bcmul($a, $b, $scale = 2)
+{
+    if (function_exists('bcmul')) {
+        return round(floatval(bcmul($a, $b, 5)), $scale);
+    } else {
+        return round(floatval($a) * floatval($b), $scale);
+    }
+}
+
+function _bcdiv($a, $b, $scale = 2)
+{
+    return round(floatval(bcdiv($a, $b, 5)), $scale);
+}
+
+if (!function_exists('size_convert')) {
+    function size_convert(int $bytes, string $type = '', int $decimals = 2): float
+    {
+        $size = ['B', 'kB', 'MB', 'GB', 'TB', 'PB'];
+
+        if (empty($type)) {
+            $floor = floor((strlen(strval($bytes)) - 1) / 3);
+        } else {
+            $floor = array_search($type, $size);
+        }
+
+        return round(($bytes / pow(1024, $floor)), $decimals); // . $size[$floor];
+    }
+}
+
+if (!function_exists('sentry')) {
+    function sentry($msg, array $extra = [])
+    {
+        if (!app()->bound('sentry') || App::environment('local')) {
+            Log::error(($msg instanceof \Exception) ? $msg->getMessage() : $msg, $extra);
+        } else {
+            $sentry = app('sentry');
+            \Sentry\configureScope(
+                function (\Sentry\State\Scope $scope) use ($extra): void {
+                    // Add user context
+                    if (auth()->check()) {
+                        $scope->setUser(
+                            auth()->user()->toArray()
+                        );
+                    }
+                    foreach ($extra as $key => $value) {
+                        $scope->setExtra($key, $value);
+                    }
+                }
+            );
+            if ($msg instanceof \Exception) {
+                $sentry->captureException($msg);
+            } else {
+                $sentry->captureMessage($msg);
+            }
+        }
+    }
+}
+
+
+function base64_to_safe($data)
+{
+    return rtrim(strtr($data, '+/', '-_'), '=');
+}
+
+function base64_to_unsafe($data)
+{
+    return str_pad(strtr($data, '-_', '+/'), strlen($data) + (strlen($data) % 4), '=', STR_PAD_RIGHT);
+}
+
+
+if (!function_exists('mb_explode')) {
+    // 中文字符串分隔
+    function mb_explode(string $deliter, string $string)
+    {
+        $array = [0 => ''];
+        $step = 0;
+        for ($i = 0, $l = mb_strlen($string) - 1; $i <= $l; $i++) {
+            $value = mb_substr($string, $i, 1);
+            if ($value === $deliter) {
+                $step++;
+            } elseif (empty($deliter)) {
+                $array[$step++] = ($array[$step] ?? '') . $value;
+            } else {
+                $array[$step] = ($array[$step] ?? '') . $value;
+            }
+        }
+        return array_values($array);
+        // return array_map(function ($i) use ($string) {
+        //     return mb_substr($string, $i, 1);
+        // }, range(0, mb_strlen($string) -1));
+    }
+}
+
+
+if (!function_exists('db_trans')) {
+    // 开启事务
+    // db_trans(['mysql',...], callback)
+    // db_trans(callback);
+    function db_trans($conns, $closure = null)
+    {
+        throw_empty($conns, '开启事务失败');
+        if (is_callable($conns)) {
+            $closure = $conns;
+            $conns = [];
+        }
+        if (empty($conns)) {
+            return Illuminate\Support\Facades\DB::transaction($closure);
+        } else {
+            $outerConn = array_pop($conns);
+            foreach ($conns as $conn) {
+                $inner_closure = $closure;
+                $closure = function () use ($inner_closure) {
+                    return Illuminate\Support\Facades\DB::connection($conn)->transaction($inner_closure);
+                };
+            }
+            return Illuminate\Support\Facades\DB::connection($outerConn)->transaction($closure);
+        }
+    }
+}
+
+if (!function_exists('locker')) {
+    /**
+     * redis锁
+     * @param  string  $name  锁名，保证唯一性
+     * @param  callable  $closure
+     * @param  integer  $expire  过期时间(秒)，超过时间任务未完成，将无法阻塞其他任务
+     * @param  integer  $wait  等待时间(秒)，超过时间无法获得涣，将抛异常
+     * @return [type]          [description]
+     */
+    function locker(string $name, callable $closure, int $expire = 10, int $wait = 10)
+    {
+        return cache()->lock($name, $expire)->block($wait, $closure);
+    }
+}
+
+if (!function_exists('locker_trans')) {
+    /**
+     * redis锁，并开始数据库事务
+     * @param string $name 锁名，保证唯一性
+     * @param callable $closure
+     * @param integer $expire 过期时间(秒)，超过时间任务未完成，将无法阻塞其他任务
+     * @param integer $wait 等待时间(秒)，超过时间无法获得涣，将抛异常
+     * @return [type]          [description]
+     */
+    function locker_trans(string $name, callable $closure, int $expire = 10, int $wait = 20)
+    {
+        return locker($name, function () use ($closure) {
+            return db_trans($closure);
+        }, $expire, $wait);
+    }
+}
-- 
2.31.0

